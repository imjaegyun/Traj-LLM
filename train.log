[2025-01-13 01:53:29,993][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 01:53:55,119][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 01:54:35,844][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 01:55:08,815][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 01:55:08,838][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 01:58:16,086][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 02:00:04,045][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 02:00:44,734][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 02:01:17,477][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 02:01:17,499][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 02:03:26,594][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 02:04:07,078][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 02:04:39,072][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 02:04:39,095][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 02:04:49,337][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=143.1968536376953
[2025-01-13 02:05:01,492][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=122.89095306396484
[2025-01-13 02:05:40,565][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=0.0
[2025-01-13 02:06:21,669][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=0.0
[2025-01-13 03:49:13,010][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 03:49:13,010][train.train_model][INFO] - Final Config:
[2025-01-13 03:49:13,013][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
modules:
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 128
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 128
    hidden_dim: 256
    num_lanes: 6
  laplace_decoder:
    input_dim: 164
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  modules:
    sparse_encoder:
      input_dim: 4
      hidden_dim: 128
      output_dim: 128
    high_level_model:
      llm_model_name: meta-llama/Llama-3.2-3B
      input_dim: 128
      output_dim: 128
      use_lora: true
      lora_rank: 16
    lane_aware_probability:
      agent_dim: 128
      lane_dim: 4
      hidden_dim: 128
      num_lanes: 6
    laplace_decoder:
      input_dim: 256
      output_dim: 2
      num_modes: 3
    fusion:
      num_heads: 4
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train

[2025-01-13 03:49:53,787][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 03:50:26,318][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 03:50:26,341][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 03:52:37,054][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 03:52:37,054][train.train_model][INFO] - Final Config:
[2025-01-13 03:52:37,057][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
modules:
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 128
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    agent_dim: 128
    lane_dim: 4
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 164
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  modules:
    sparse_encoder:
      input_dim: 4
      hidden_dim: 128
      output_dim: 128
    high_level_model:
      llm_model_name: meta-llama/Llama-3.2-3B
      input_dim: 128
      output_dim: 128
      use_lora: true
      lora_rank: 16
    lane_aware_probability:
      agent_dim: 128
      lane_dim: 4
      hidden_dim: 128
      num_lanes: 6
    laplace_decoder:
      input_dim: 256
      output_dim: 2
      num_modes: 3
    fusion:
      num_heads: 4
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train

[2025-01-13 03:57:02,411][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 03:57:02,411][train.train_model][INFO] - Final Config:
[2025-01-13 03:57:02,415][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
modules:
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 128
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    agent_dim: 128
    lane_dim: 4
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 164
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  modules:
    sparse_encoder:
      input_dim: 4
      hidden_dim: 128
      output_dim: 128
    high_level_model:
      llm_model_name: meta-llama/Llama-3.2-3B
      input_dim: 128
      output_dim: 128
      use_lora: true
      lora_rank: 16
    lane_aware_probability:
      agent_dim: 128
      lane_dim: 4
      hidden_dim: 128
      num_lanes: 6
    laplace_decoder:
      input_dim: 256
      output_dim: 2
      num_modes: 3
    fusion:
      num_heads: 4
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train

[2025-01-13 03:57:43,013][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 03:58:15,065][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 03:58:15,088][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 03:58:56,159][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 03:58:56,159][train.train_model][INFO] - Final Config:
[2025-01-13 03:58:56,162][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
modules:
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 128
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    agent_dim: 128
    lane_dim: 4
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 164
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  modules:
    sparse_encoder:
      input_dim: 4
      hidden_dim: 128
      output_dim: 128
    high_level_model:
      llm_model_name: meta-llama/Llama-3.2-3B
      input_dim: 128
      output_dim: 128
      use_lora: true
      lora_rank: 16
    lane_aware_probability:
      agent_dim: 128
      lane_dim: 4
      hidden_dim: 128
      num_lanes: 6
    laplace_decoder:
      input_dim: 256
      output_dim: 2
      num_modes: 3
    fusion:
      num_heads: 4
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train

[2025-01-13 03:59:37,025][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 04:00:09,874][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 04:00:09,896][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 11:11:56,211][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 11:11:56,211][train.train_model][INFO] - Final Config:
[2025-01-13 11:11:56,214][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
modules:
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 6144
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    agent_dim: 128
    lane_dim: 4
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 164
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  modules:
    sparse_encoder:
      input_dim: 4
      hidden_dim: 128
      output_dim: 128
    high_level_model:
      llm_model_name: meta-llama/Llama-3.2-3B
      input_dim: 128
      output_dim: 128
      use_lora: true
      lora_rank: 16
    lane_aware_probability:
      agent_dim: 128
      lane_dim: 4
      hidden_dim: 128
      num_lanes: 6
    laplace_decoder:
      input_dim: 256
      output_dim: 2
      num_modes: 3
    fusion:
      num_heads: 4
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train

[2025-01-13 11:12:45,623][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 11:12:45,623][train.train_model][INFO] - Final Config:
[2025-01-13 11:12:45,626][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
modules:
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 6144
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    agent_dim: 128
    lane_dim: 4
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 164
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  modules:
    sparse_encoder:
      input_dim: 4
      hidden_dim: 128
      output_dim: 128
    high_level_model:
      llm_model_name: meta-llama/Llama-3.2-3B
      input_dim: 128
      output_dim: 128
      use_lora: true
      lora_rank: 16
    lane_aware_probability:
      agent_dim: 128
      lane_dim: 4
      hidden_dim: 128
      num_lanes: 6
    laplace_decoder:
      input_dim: 256
      output_dim: 2
      num_modes: 3
    fusion:
      num_heads: 4
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train

[2025-01-13 11:13:26,765][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 11:13:59,368][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 11:13:59,391][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 11:18:31,323][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 11:18:31,323][train.train_model][INFO] - Final Config:
[2025-01-13 11:18:31,326][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 6144
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    agent_dim: 128
    lane_dim: 4
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 164
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 11:19:12,473][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 11:19:44,926][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 11:19:44,950][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 11:48:38,941][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 11:48:38,941][train.train_model][INFO] - Final Config:
[2025-01-13 11:48:38,944][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    agent_dim: 128
    lane_dim: 4
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 11:49:20,878][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 11:49:54,145][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 11:49:54,169][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 11:54:44,290][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 11:54:44,290][train.train_model][INFO] - Final Config:
[2025-01-13 11:54:44,293][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    agent_dim: 128
    lane_dim: 4
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 11:55:40,238][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 11:56:25,464][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 11:56:25,490][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:04:05,789][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:04:05,789][train.train_model][INFO] - Final Config:
[2025-01-13 12:04:05,791][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:05:01,638][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:05:44,912][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:05:44,936][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:07:56,406][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:07:56,406][train.train_model][INFO] - Final Config:
[2025-01-13 12:07:56,409][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:08:52,506][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:09:37,392][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:09:37,416][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:12:24,675][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:12:24,675][train.train_model][INFO] - Final Config:
[2025-01-13 12:12:24,678][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:13:06,921][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:13:39,347][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:13:39,370][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:13:50,040][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:13:50,113][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:13:50,134][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 6, 6])
[2025-01-13 12:13:50,135][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 6, 3108])
[2025-01-13 12:13:50,142][train.train_model][DEBUG] - Fused Features Mapped Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:13:50,165][train.train_model][DEBUG] - Hidden States Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:17:27,640][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:17:27,640][train.train_model][INFO] - Final Config:
[2025-01-13 12:17:27,642][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:18:08,865][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:18:41,704][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:18:41,727][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:18:51,827][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:18:51,900][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:18:51,921][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 6, 6])
[2025-01-13 12:18:51,921][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 6, 3108])
[2025-01-13 12:18:51,929][train.train_model][DEBUG] - Fused Features Mapped Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:18:51,951][train.train_model][DEBUG] - Hidden States Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:21:56,688][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:21:56,688][train.train_model][INFO] - Final Config:
[2025-01-13 12:21:56,691][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:22:37,890][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:23:10,606][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:23:10,629][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:23:20,698][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:23:20,771][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:23:20,792][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 6, 6])
[2025-01-13 12:23:20,792][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 6, 3108])
[2025-01-13 12:23:20,800][train.train_model][DEBUG] - Fused Features Mapped Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:23:20,824][train.train_model][DEBUG] - Hidden States Shape: torch.Size([64, 6, 3072])
[2025-01-13 12:27:42,817][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:27:42,817][train.train_model][INFO] - Final Config:
[2025-01-13 12:27:42,820][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:32:00,039][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:32:00,039][train.train_model][INFO] - Final Config:
[2025-01-13 12:32:00,041][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:32:31,783][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:33:03,781][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:33:03,804][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:33:13,776][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:33:13,864][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:33:13,944][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:33:13,979][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 6])
[2025-01-13 12:33:13,980][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3078])
[2025-01-13 12:36:31,693][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:36:31,693][train.train_model][INFO] - Final Config:
[2025-01-13 12:36:31,696][train.train_model][INFO] - train:
  lr: 0.001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:37:03,577][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:37:35,731][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:37:35,754][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:37:45,593][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:45,682][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:45,763][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:45,799][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:45,799][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:45,808][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:45,836][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:45,838][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:45,869][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:45,869][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:45,870][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:45,871][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:45,903][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=nan
[2025-01-13 12:37:49,091][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:49,096][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:49,171][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:49,177][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:49,177][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:49,180][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:49,290][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:49,293][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:49,326][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:49,327][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:49,327][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:49,329][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:49,424][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:49,426][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:49,458][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:49,459][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:49,459][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:49,460][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:49,556][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:49,558][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:49,590][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:49,590][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:49,591][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:49,592][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:51,524][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:51,528][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:51,572][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:51,572][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:51,573][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:51,574][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:51,661][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:51,663][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:51,699][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:51,700][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:51,700][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:51,702][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:51,794][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:51,796][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:51,830][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:51,830][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:51,831][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:51,832][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:51,926][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:51,929][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:51,961][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:51,962][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:51,962][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:51,963][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:53,933][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:53,935][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:53,968][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:53,969][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:53,969][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:53,970][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:54,066][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:54,068][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:54,099][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:54,100][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:54,100][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:54,101][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:54,198][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([40, 6, 4])
[2025-01-13 12:37:54,201][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([40, 6, 128])
[2025-01-13 12:37:54,233][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([40, 12, 3072])
[2025-01-13 12:37:54,233][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([40, 12, 36])
[2025-01-13 12:37:54,234][train.train_model][DEBUG] - Fused Features Shape: torch.Size([40, 12, 3108])
[2025-01-13 12:37:54,235][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:37:57,537][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:57,544][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:57,589][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:57,589][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:57,590][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:57,591][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:57,593][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:37:57,595][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:37:57,645][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:37:57,646][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:37:57,646][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:37:57,647][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:37:57,649][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([42, 6, 4])
[2025-01-13 12:37:57,651][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([42, 6, 128])
[2025-01-13 12:37:57,703][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([42, 12, 3072])
[2025-01-13 12:37:57,704][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([42, 12, 36])
[2025-01-13 12:37:57,704][train.train_model][DEBUG] - Fused Features Shape: torch.Size([42, 12, 3108])
[2025-01-13 12:37:57,705][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:37:57,731][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=nan
[2025-01-13 12:38:22,883][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:22,888][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:22,926][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:22,927][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:22,927][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:22,929][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:23,022][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:23,025][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:23,056][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:23,057][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:23,057][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:23,058][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:23,155][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:23,157][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:23,188][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:23,188][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:23,188][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:23,190][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:23,287][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:23,289][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:23,320][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:23,321][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:23,321][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:23,322][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:25,325][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:25,327][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:25,359][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:25,360][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:25,360][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:25,361][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:25,461][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:25,463][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:25,495][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:25,496][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:25,496][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:25,497][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:25,593][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:25,595][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:25,627][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:25,628][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:25,628][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:25,629][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:25,725][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:25,728][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:25,760][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:25,761][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:25,761][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:25,762][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:27,739][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:27,743][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:27,791][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:27,791][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:27,791][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:27,793][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:27,879][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:27,881][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:27,913][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:27,913][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:27,914][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:27,915][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:28,012][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([40, 6, 4])
[2025-01-13 12:38:28,014][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([40, 6, 128])
[2025-01-13 12:38:28,045][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([40, 12, 3072])
[2025-01-13 12:38:28,045][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([40, 12, 36])
[2025-01-13 12:38:28,046][train.train_model][DEBUG] - Fused Features Shape: torch.Size([40, 12, 3108])
[2025-01-13 12:38:28,047][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:38:31,318][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:31,324][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:31,367][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:31,367][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:31,368][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:31,373][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:31,376][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:38:31,378][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:38:31,424][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:38:31,425][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:38:31,425][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:38:31,426][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:38:31,428][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([42, 6, 4])
[2025-01-13 12:38:31,430][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([42, 6, 128])
[2025-01-13 12:38:31,482][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([42, 12, 3072])
[2025-01-13 12:38:31,483][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([42, 12, 36])
[2025-01-13 12:38:31,483][train.train_model][DEBUG] - Fused Features Shape: torch.Size([42, 12, 3108])
[2025-01-13 12:38:31,484][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:38:31,511][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=nan
[2025-01-13 12:39:02,230][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:02,235][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:02,273][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:02,274][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:02,274][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:02,275][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:02,368][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:02,370][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:02,401][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:02,402][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:02,402][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:02,403][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:02,502][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:02,504][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:02,536][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:02,537][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:02,537][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:02,538][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:02,634][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:02,636][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:02,668][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:02,669][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:02,669][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:02,670][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:04,649][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:04,652][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:04,686][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:04,687][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:04,687][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:04,688][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:04,785][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:04,788][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:04,820][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:04,821][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:04,821][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:04,822][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:04,919][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:04,921][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:04,952][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:04,953][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:04,953][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:04,954][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:05,051][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:05,053][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:05,085][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:05,086][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:05,086][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:05,087][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:07,113][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:07,116][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:07,149][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:07,149][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:07,149][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:07,151][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:07,246][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:07,248][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:07,280][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:07,281][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:07,281][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:07,282][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:07,378][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([40, 6, 4])
[2025-01-13 12:39:07,380][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([40, 6, 128])
[2025-01-13 12:39:07,411][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([40, 12, 3072])
[2025-01-13 12:39:07,411][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([40, 12, 36])
[2025-01-13 12:39:07,411][train.train_model][DEBUG] - Fused Features Shape: torch.Size([40, 12, 3108])
[2025-01-13 12:39:07,413][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:39:10,718][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:10,724][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:10,767][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:10,768][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:10,768][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:10,770][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:10,778][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:10,780][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:10,825][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:10,826][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:10,826][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:10,827][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:10,828][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([42, 6, 4])
[2025-01-13 12:39:10,830][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([42, 6, 128])
[2025-01-13 12:39:10,883][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([42, 12, 3072])
[2025-01-13 12:39:10,883][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([42, 12, 36])
[2025-01-13 12:39:10,883][train.train_model][DEBUG] - Fused Features Shape: torch.Size([42, 12, 3108])
[2025-01-13 12:39:10,885][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:39:10,911][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=nan
[2025-01-13 12:39:41,971][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:41,979][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:42,020][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:42,021][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:42,021][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:42,023][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:42,117][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:42,119][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:42,151][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:42,151][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:42,151][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:42,153][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:42,249][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:42,251][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:42,283][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:42,283][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:42,284][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:42,285][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:42,381][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:42,383][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:42,415][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:42,416][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:42,416][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:42,417][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:44,393][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:44,396][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:44,429][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:44,430][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:44,430][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:44,431][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:44,526][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:44,529][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:44,560][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:44,561][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:44,561][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:44,562][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:44,658][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:44,661][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:44,692][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:44,692][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:44,693][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:44,694][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:44,791][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:44,793][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:44,824][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:44,825][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:44,825][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:44,826][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:46,810][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:46,812][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:46,845][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:46,845][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:46,846][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:46,847][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:46,942][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:46,945][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:46,976][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:46,976][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:46,976][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:46,978][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:47,075][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([40, 6, 4])
[2025-01-13 12:39:47,077][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([40, 6, 128])
[2025-01-13 12:39:47,106][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([40, 12, 3072])
[2025-01-13 12:39:47,106][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([40, 12, 36])
[2025-01-13 12:39:47,106][train.train_model][DEBUG] - Fused Features Shape: torch.Size([40, 12, 3108])
[2025-01-13 12:39:47,108][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:39:50,438][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:50,442][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:50,474][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:50,474][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:50,475][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:50,476][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:50,478][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:39:50,485][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:39:50,538][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:39:50,539][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:39:50,539][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:39:50,540][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:39:50,542][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([42, 6, 4])
[2025-01-13 12:39:50,544][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([42, 6, 128])
[2025-01-13 12:39:50,596][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([42, 12, 3072])
[2025-01-13 12:39:50,597][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([42, 12, 36])
[2025-01-13 12:39:50,597][train.train_model][DEBUG] - Fused Features Shape: torch.Size([42, 12, 3108])
[2025-01-13 12:39:50,598][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:39:50,624][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=nan
[2025-01-13 12:40:21,819][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:21,827][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:21,869][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:21,869][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:21,870][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:21,871][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:21,963][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:21,966][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:21,996][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:21,997][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:21,997][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:21,998][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:22,089][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:22,091][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:22,122][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:22,122][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:22,123][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:22,124][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:22,215][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:22,217][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:22,248][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:22,249][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:22,249][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:22,250][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:24,232][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:24,236][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:24,280][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:24,280][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:24,281][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:24,282][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:24,368][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:24,370][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:24,400][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:24,401][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:24,401][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:24,402][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:24,494][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:24,497][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:24,528][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:24,528][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:24,528][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:24,530][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:24,620][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:24,622][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:24,653][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:24,654][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:24,654][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:24,655][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:26,649][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:26,654][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:26,703][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:26,703][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:26,704][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:26,705][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:26,790][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:26,792][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:26,823][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:26,823][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:26,823][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:26,825][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:26,917][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([40, 6, 4])
[2025-01-13 12:40:26,919][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([40, 6, 128])
[2025-01-13 12:40:26,950][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([40, 12, 3072])
[2025-01-13 12:40:26,950][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([40, 12, 36])
[2025-01-13 12:40:26,950][train.train_model][DEBUG] - Fused Features Shape: torch.Size([40, 12, 3108])
[2025-01-13 12:40:26,952][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:40:30,284][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:30,288][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:30,319][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:30,320][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:30,320][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:30,321][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:30,325][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:40:30,327][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:40:30,384][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:40:30,384][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:40:30,385][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:40:30,386][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:40:30,387][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([42, 6, 4])
[2025-01-13 12:40:30,389][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([42, 6, 128])
[2025-01-13 12:40:30,442][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([42, 12, 3072])
[2025-01-13 12:40:30,442][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([42, 12, 36])
[2025-01-13 12:40:30,442][train.train_model][DEBUG] - Fused Features Shape: torch.Size([42, 12, 3108])
[2025-01-13 12:40:30,443][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:40:30,470][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=nan
[2025-01-13 12:41:01,342][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:01,350][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:01,398][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:01,399][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:01,399][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:01,401][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:01,491][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:01,493][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:01,526][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:01,527][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:01,527][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:01,528][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:01,622][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:01,625][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:01,658][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:01,659][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:01,659][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:01,660][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:01,751][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:01,754][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:01,786][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:01,786][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:01,787][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:01,788][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:03,767][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:03,770][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:03,803][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:03,804][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:03,804][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:03,805][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:03,903][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:03,905][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:03,938][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:03,938][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:03,939][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:03,940][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:04,033][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:04,035][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:04,067][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:04,068][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:04,068][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:04,069][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:04,161][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:04,163][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:04,196][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:04,196][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:04,196][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:04,198][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:06,216][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:06,218][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:06,250][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:06,250][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:06,250][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:06,252][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:06,350][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:06,352][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:06,383][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:06,384][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:06,384][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:06,385][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:06,477][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([40, 6, 4])
[2025-01-13 12:41:06,479][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([40, 6, 128])
[2025-01-13 12:41:06,509][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([40, 12, 3072])
[2025-01-13 12:41:06,510][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([40, 12, 36])
[2025-01-13 12:41:06,510][train.train_model][DEBUG] - Fused Features Shape: torch.Size([40, 12, 3108])
[2025-01-13 12:41:06,511][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:41:09,785][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:09,791][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:09,833][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:09,834][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:09,834][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:09,835][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:09,839][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:09,841][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:09,892][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:09,893][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:09,893][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:09,894][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:09,896][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([42, 6, 4])
[2025-01-13 12:41:09,898][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([42, 6, 128])
[2025-01-13 12:41:09,950][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([42, 12, 3072])
[2025-01-13 12:41:09,950][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([42, 12, 36])
[2025-01-13 12:41:09,951][train.train_model][DEBUG] - Fused Features Shape: torch.Size([42, 12, 3108])
[2025-01-13 12:41:09,952][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:41:09,977][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=nan
[2025-01-13 12:41:40,902][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:40,911][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:40,960][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:40,961][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:40,961][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:40,962][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:41,049][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:41,052][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:41,084][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:41,084][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:41,084][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:41,086][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:41,180][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:41,182][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:41,214][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:41,215][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:41,215][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:41,217][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:41,309][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:41,311][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:41,344][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:41,345][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:41,345][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:41,346][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:43,360][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:43,363][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:43,408][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:43,408][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:43,409][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:43,410][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:43,497][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:43,499][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:43,530][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:43,531][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:43,531][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:43,532][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:43,626][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:43,628][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:43,659][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:43,659][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:43,660][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:43,661][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:43,754][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:43,756][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:43,789][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:43,790][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:43,790][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:43,792][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:45,753][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:45,756][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:45,789][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:45,790][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:45,790][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:45,792][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:45,888][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:45,890][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:45,925][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:45,925][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:45,925][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:45,927][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:46,017][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([40, 6, 4])
[2025-01-13 12:41:46,019][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([40, 6, 128])
[2025-01-13 12:41:46,051][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([40, 12, 3072])
[2025-01-13 12:41:46,051][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([40, 12, 36])
[2025-01-13 12:41:46,052][train.train_model][DEBUG] - Fused Features Shape: torch.Size([40, 12, 3108])
[2025-01-13 12:41:46,053][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:41:49,402][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:49,409][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:49,450][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:49,451][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:49,451][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:49,452][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:49,455][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([64, 6, 4])
[2025-01-13 12:41:49,457][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([64, 6, 128])
[2025-01-13 12:41:49,510][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([64, 12, 3072])
[2025-01-13 12:41:49,511][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([64, 12, 36])
[2025-01-13 12:41:49,511][train.train_model][DEBUG] - Fused Features Shape: torch.Size([64, 12, 3108])
[2025-01-13 12:41:49,512][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:41:49,513][train.train_model][DEBUG] - SparseContextEncoder Input Shape: torch.Size([42, 6, 4])
[2025-01-13 12:41:49,515][train.train_model][DEBUG] - Sparse Features Shape: torch.Size([42, 6, 128])
[2025-01-13 12:41:49,567][train.train_model][DEBUG] - High-Level Features Shape: torch.Size([42, 12, 3072])
[2025-01-13 12:41:49,567][train.train_model][DEBUG] - Lane-aware Probabilities Shape: torch.Size([42, 12, 36])
[2025-01-13 12:41:49,568][train.train_model][DEBUG] - Fused Features Shape: torch.Size([42, 12, 3108])
[2025-01-13 12:41:49,569][train.train_model][DEBUG] - Laplace Decoder Outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:41:49,594][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=nan
[2025-01-13 12:45:27,237][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:45:27,238][train.train_model][INFO] - Final Config:
[2025-01-13 12:45:27,240][train.train_model][INFO] - train:
  lr: 0.0001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:45:58,989][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:46:31,686][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:46:31,708][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:46:41,623][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:46:41,710][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:46:41,788][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:46:41,823][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:46:41,823][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:46:41,833][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:46:41,847][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=0
[2025-01-13 12:46:41,877][train.train_model][ERROR] -   => agent_in=tensor([[ 873.2697, 1867.5603,   -5.7234,    3.5980],
        [ 870.4088, 1869.3589,   -5.6397,    3.5708],
        [ 867.5896, 1871.1438,   -5.4182,    3.4254],
        [ 864.8811, 1872.8562,   -5.2736,    3.3171],
        [ 862.2451, 1874.5143,   -5.0552,    3.1200],
        [ 859.4662, 1876.2294,   -4.8648,    2.9810]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 873.2697, 1867.5603],
        [ 870.4088, 1869.3589],
        [ 867.5896, 1871.1438],
        [ 864.8811, 1872.8562],
        [ 862.2451, 1874.5143],
        [ 859.4662, 1876.2294],
        [ 857.0346, 1877.7194],
        [ 854.7612, 1879.0966],
        [ 852.5053, 1880.4707],
        [ 850.4337, 1881.7307],
        [ 848.0394, 1883.2101],
        [ 845.4049, 1884.8805]], device='cuda:0')
[2025-01-13 12:46:41,881][train.train_model][ERROR] -   => pi=tensor([[0.2977, 0.3756, 0.3267],
        [0.2977, 0.3756, 0.3267],
        [0.2977, 0.3756, 0.3267],
        [0.2977, 0.3756, 0.3267],
        [0.2977, 0.3756, 0.3267],
        [0.2977, 0.3756, 0.3267],
        [0.3003, 0.3740, 0.3258],
        [0.3003, 0.3740, 0.3258],
        [0.3003, 0.3740, 0.3258],
        [0.3003, 0.3740, 0.3258],
        [0.3003, 0.3740, 0.3258],
        [0.3003, 0.3740, 0.3258]], device='cuda:0') mu=tensor([[[ 0.0319,  0.0174],
         [-0.0215,  0.1781],
         [-0.2861, -0.0519]],

        [[ 0.0319,  0.0174],
         [-0.0215,  0.1781],
         [-0.2861, -0.0519]],

        [[ 0.0319,  0.0174],
         [-0.0215,  0.1781],
         [-0.2861, -0.0519]],

        [[ 0.0319,  0.0174],
         [-0.0215,  0.1781],
         [-0.2861, -0.0519]],

        [[ 0.0319,  0.0174],
         [-0.0215,  0.1781],
         [-0.2861, -0.0519]],

        [[ 0.0319,  0.0174],
         [-0.0215,  0.1781],
         [-0.2861, -0.0519]],

        [[ 0.0239,  0.0088],
         [-0.0211,  0.1711],
         [-0.2778, -0.0513]],

        [[ 0.0239,  0.0088],
         [-0.0211,  0.1711],
         [-0.2778, -0.0513]],

        [[ 0.0239,  0.0088],
         [-0.0211,  0.1711],
         [-0.2778, -0.0513]],

        [[ 0.0239,  0.0088],
         [-0.0211,  0.1711],
         [-0.2778, -0.0513]],

        [[ 0.0239,  0.0088],
         [-0.0211,  0.1711],
         [-0.2778, -0.0513]],

        [[ 0.0239,  0.0088],
         [-0.0211,  0.1711],
         [-0.2778, -0.0513]]], device='cuda:0', dtype=torch.float16) b=tensor([[[0.0497, 0.1473],
         [0.0232, 0.2051],
         [0.0540, 0.0383]],

        [[0.0497, 0.1473],
         [0.0232, 0.2051],
         [0.0540, 0.0383]],

        [[0.0497, 0.1473],
         [0.0232, 0.2051],
         [0.0540, 0.0383]],

        [[0.0497, 0.1473],
         [0.0232, 0.2051],
         [0.0540, 0.0383]],

        [[0.0497, 0.1473],
         [0.0232, 0.2051],
         [0.0540, 0.0383]],

        [[0.0497, 0.1473],
         [0.0232, 0.2051],
         [0.0540, 0.0383]],

        [[0.0410, 0.1545],
         [0.0181, 0.2162],
         [0.0649, 0.0367]],

        [[0.0410, 0.1545],
         [0.0181, 0.2162],
         [0.0649, 0.0367]],

        [[0.0410, 0.1545],
         [0.0181, 0.2162],
         [0.0649, 0.0367]],

        [[0.0410, 0.1545],
         [0.0181, 0.2162],
         [0.0649, 0.0367]],

        [[0.0410, 0.1545],
         [0.0181, 0.2162],
         [0.0649, 0.0367]],

        [[0.0410, 0.1545],
         [0.0181, 0.2162],
         [0.0649, 0.0367]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:46:41,882][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:46:41,884][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:46:41,914][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:46:41,915][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:46:41,915][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:46:41,916][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:46:41,949][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=1
[2025-01-13 12:46:41,950][train.train_model][ERROR] -   => agent_in=tensor([[ 3.9609e+02,  1.1474e+03, -1.2863e-04,  8.5636e-05],
        [ 3.9609e+02,  1.1474e+03, -1.0998e-04,  7.4718e-05],
        [ 3.9609e+02,  1.1474e+03, -8.6321e-05,  8.2352e-05],
        [ 3.9609e+02,  1.1474e+03, -1.1263e-04, -1.2039e-05],
        [ 3.9609e+02,  1.1474e+03, -8.9997e-05,  4.4610e-06],
        [ 3.9609e+02,  1.1474e+03, -5.2940e-05,  5.6597e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 396.0914, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0910, 1147.3601],
        [ 396.0910, 1147.3601]], device='cuda:0')
[2025-01-13 12:46:41,954][train.train_model][ERROR] -   => pi=tensor([[0.2978, 0.3754, 0.3268],
        [0.2978, 0.3754, 0.3268],
        [0.2978, 0.3754, 0.3268],
        [0.2978, 0.3754, 0.3268],
        [0.2978, 0.3754, 0.3268],
        [0.2978, 0.3754, 0.3268],
        [0.3005, 0.3740, 0.3255],
        [0.3005, 0.3740, 0.3255],
        [0.3005, 0.3740, 0.3255],
        [0.3005, 0.3740, 0.3255],
        [0.3005, 0.3740, 0.3255],
        [0.3005, 0.3740, 0.3255]], device='cuda:0') mu=tensor([[[ 3.7842e-02,  1.1383e-02],
         [-2.9694e-02,  1.7297e-01],
         [-2.7393e-01, -4.5959e-02]],

        [[ 3.7842e-02,  1.1383e-02],
         [-2.9694e-02,  1.7297e-01],
         [-2.7393e-01, -4.5959e-02]],

        [[ 3.7842e-02,  1.1383e-02],
         [-2.9694e-02,  1.7297e-01],
         [-2.7393e-01, -4.5959e-02]],

        [[ 3.7842e-02,  1.1383e-02],
         [-2.9694e-02,  1.7297e-01],
         [-2.7393e-01, -4.5959e-02]],

        [[ 3.7842e-02,  1.1383e-02],
         [-2.9694e-02,  1.7297e-01],
         [-2.7393e-01, -4.5959e-02]],

        [[ 3.7842e-02,  1.1383e-02],
         [-2.9694e-02,  1.7297e-01],
         [-2.7393e-01, -4.5959e-02]],

        [[ 3.0701e-02, -2.5940e-04],
         [-2.8961e-02,  1.6443e-01],
         [-2.6709e-01, -4.8462e-02]],

        [[ 3.0701e-02, -2.5940e-04],
         [-2.8961e-02,  1.6443e-01],
         [-2.6709e-01, -4.8462e-02]],

        [[ 3.0701e-02, -2.5940e-04],
         [-2.8961e-02,  1.6443e-01],
         [-2.6709e-01, -4.8462e-02]],

        [[ 3.0701e-02, -2.5940e-04],
         [-2.8961e-02,  1.6443e-01],
         [-2.6709e-01, -4.8462e-02]],

        [[ 3.0701e-02, -2.5940e-04],
         [-2.8961e-02,  1.6443e-01],
         [-2.6709e-01, -4.8462e-02]],

        [[ 3.0701e-02, -2.5940e-04],
         [-2.8961e-02,  1.6443e-01],
         [-2.6709e-01, -4.8462e-02]]], device='cuda:0', dtype=torch.float16) b=tensor([[[0.0396, 0.1390],
         [0.0247, 0.2272],
         [0.0329, 0.0327]],

        [[0.0396, 0.1390],
         [0.0247, 0.2272],
         [0.0329, 0.0327]],

        [[0.0396, 0.1390],
         [0.0247, 0.2272],
         [0.0329, 0.0327]],

        [[0.0396, 0.1390],
         [0.0247, 0.2272],
         [0.0329, 0.0327]],

        [[0.0396, 0.1390],
         [0.0247, 0.2272],
         [0.0329, 0.0327]],

        [[0.0396, 0.1390],
         [0.0247, 0.2272],
         [0.0329, 0.0327]],

        [[0.0360, 0.1426],
         [0.0237, 0.2324],
         [0.0401, 0.0329]],

        [[0.0360, 0.1426],
         [0.0237, 0.2324],
         [0.0401, 0.0329]],

        [[0.0360, 0.1426],
         [0.0237, 0.2324],
         [0.0401, 0.0329]],

        [[0.0360, 0.1426],
         [0.0237, 0.2324],
         [0.0401, 0.0329]],

        [[0.0360, 0.1426],
         [0.0237, 0.2324],
         [0.0401, 0.0329]],

        [[0.0360, 0.1426],
         [0.0237, 0.2324],
         [0.0401, 0.0329]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:46:41,955][train.train_model][WARNING] - No valid samples found in validation.
[2025-01-13 12:46:45,198][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:46:45,203][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:46:45,277][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:46:45,284][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:46:45,284][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:46:45,286][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:46:45,287][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=0
[2025-01-13 12:46:45,289][train.train_model][ERROR] -   => agent_in=tensor([[4.3928e+02, 1.6882e+03, 1.0208e+00, 2.0225e+00],
        [4.3979e+02, 1.6892e+03, 1.0330e+00, 2.0400e+00],
        [4.4030e+02, 1.6902e+03, 1.0172e+00, 2.0237e+00],
        [4.4081e+02, 1.6912e+03, 1.2332e+00, 2.4739e+00],
        [4.4143e+02, 1.6924e+03, 1.3910e+00, 2.8102e+00],
        [4.4213e+02, 1.6938e+03, 1.6140e+00, 3.2430e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 439.2781, 1688.1521],
        [ 439.7884, 1689.1631],
        [ 440.3048, 1690.1829],
        [ 440.8134, 1691.1945],
        [ 441.4297, 1692.4310],
        [ 442.1250, 1693.8358],
        [ 442.9319, 1695.4569],
        [ 443.8810, 1697.3641],
        [ 444.9291, 1699.4613],
        [ 446.0268, 1701.6809],
        [ 447.1848, 1704.0455],
        [ 448.3593, 1706.4619]], device='cuda:0')
[2025-01-13 12:46:45,294][train.train_model][ERROR] -   => pi=tensor([[0.2928, 0.3786, 0.3286],
        [0.2928, 0.3786, 0.3286],
        [0.2928, 0.3786, 0.3286],
        [0.2928, 0.3786, 0.3286],
        [0.2928, 0.3786, 0.3286],
        [0.2928, 0.3786, 0.3286],
        [0.2947, 0.3773, 0.3280],
        [0.2947, 0.3773, 0.3280],
        [0.2947, 0.3773, 0.3280],
        [0.2947, 0.3773, 0.3280],
        [0.2947, 0.3773, 0.3280],
        [0.2947, 0.3773, 0.3280]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0378,  0.0085],
         [-0.0349,  0.1768],
         [-0.2935, -0.0434]],

        [[ 0.0378,  0.0085],
         [-0.0349,  0.1768],
         [-0.2935, -0.0434]],

        [[ 0.0378,  0.0085],
         [-0.0349,  0.1768],
         [-0.2935, -0.0434]],

        [[ 0.0378,  0.0085],
         [-0.0349,  0.1768],
         [-0.2935, -0.0434]],

        [[ 0.0378,  0.0085],
         [-0.0349,  0.1768],
         [-0.2935, -0.0434]],

        [[ 0.0378,  0.0085],
         [-0.0349,  0.1768],
         [-0.2935, -0.0434]],

        [[ 0.0307, -0.0007],
         [-0.0347,  0.1704],
         [-0.2874, -0.0447]],

        [[ 0.0307, -0.0007],
         [-0.0347,  0.1704],
         [-0.2874, -0.0447]],

        [[ 0.0307, -0.0007],
         [-0.0347,  0.1704],
         [-0.2874, -0.0447]],

        [[ 0.0307, -0.0007],
         [-0.0347,  0.1704],
         [-0.2874, -0.0447]],

        [[ 0.0307, -0.0007],
         [-0.0347,  0.1704],
         [-0.2874, -0.0447]],

        [[ 0.0307, -0.0007],
         [-0.0347,  0.1704],
         [-0.2874, -0.0447]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[0.0446, 0.1204],
         [0.0353, 0.2164],
         [0.0345, 0.0276]],

        [[0.0446, 0.1204],
         [0.0353, 0.2164],
         [0.0345, 0.0276]],

        [[0.0446, 0.1204],
         [0.0353, 0.2164],
         [0.0345, 0.0276]],

        [[0.0446, 0.1204],
         [0.0353, 0.2164],
         [0.0345, 0.0276]],

        [[0.0446, 0.1204],
         [0.0353, 0.2164],
         [0.0345, 0.0276]],

        [[0.0446, 0.1204],
         [0.0353, 0.2164],
         [0.0345, 0.0276]],

        [[0.0417, 0.1241],
         [0.0316, 0.2246],
         [0.0430, 0.0269]],

        [[0.0417, 0.1241],
         [0.0316, 0.2246],
         [0.0430, 0.0269]],

        [[0.0417, 0.1241],
         [0.0316, 0.2246],
         [0.0430, 0.0269]],

        [[0.0417, 0.1241],
         [0.0316, 0.2246],
         [0.0430, 0.0269]],

        [[0.0417, 0.1241],
         [0.0316, 0.2246],
         [0.0430, 0.0269]],

        [[0.0417, 0.1241],
         [0.0316, 0.2246],
         [0.0430, 0.0269]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:46:45,294][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:53:43,407][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 12:53:43,407][train.train_model][INFO] - Final Config:
[2025-01-13 12:53:43,410][train.train_model][INFO] - train:
  lr: 0.0001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 12:54:14,645][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 12:54:47,123][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 12:54:47,145][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 12:54:56,996][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:54:57,083][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:54:57,160][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:54:57,196][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:54:57,196][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:54:57,206][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:54:57,220][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=0
[2025-01-13 12:54:57,281][train.train_model][ERROR] -   => agent_in=tensor([[ 873.2697, 1867.5603,   -5.7234,    3.5980],
        [ 870.4088, 1869.3589,   -5.6397,    3.5708],
        [ 867.5896, 1871.1438,   -5.4182,    3.4254],
        [ 864.8811, 1872.8562,   -5.2736,    3.3171],
        [ 862.2451, 1874.5143,   -5.0552,    3.1200],
        [ 859.4662, 1876.2294,   -4.8648,    2.9810]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 873.2697, 1867.5603],
        [ 870.4088, 1869.3589],
        [ 867.5896, 1871.1438],
        [ 864.8811, 1872.8562],
        [ 862.2451, 1874.5143],
        [ 859.4662, 1876.2294],
        [ 857.0346, 1877.7194],
        [ 854.7612, 1879.0966],
        [ 852.5053, 1880.4707],
        [ 850.4337, 1881.7307],
        [ 848.0394, 1883.2101],
        [ 845.4049, 1884.8805]], device='cuda:0')
[2025-01-13 12:54:57,285][train.train_model][ERROR] -   => pi=tensor([[0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3300, 0.3670, 0.3031],
        [0.3300, 0.3670, 0.3031],
        [0.3300, 0.3670, 0.3031],
        [0.3300, 0.3670, 0.3031],
        [0.3300, 0.3670, 0.3031],
        [0.3300, 0.3670, 0.3031]], device='cuda:0') mu=tensor([[[ 0.0163, -0.0171],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0117]],

        [[ 0.0163, -0.0171],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0117]],

        [[ 0.0163, -0.0171],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0117]],

        [[ 0.0163, -0.0171],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0117]],

        [[ 0.0163, -0.0171],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0117]],

        [[ 0.0163, -0.0171],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0117]],

        [[-0.0126,  0.0189],
         [ 0.0105,  0.0009],
         [ 0.0892,  0.0074]],

        [[-0.0126,  0.0189],
         [ 0.0105,  0.0009],
         [ 0.0892,  0.0074]],

        [[-0.0126,  0.0189],
         [ 0.0105,  0.0009],
         [ 0.0892,  0.0074]],

        [[-0.0126,  0.0189],
         [ 0.0105,  0.0009],
         [ 0.0892,  0.0074]],

        [[-0.0126,  0.0189],
         [ 0.0105,  0.0009],
         [ 0.0892,  0.0074]],

        [[-0.0126,  0.0189],
         [ 0.0105,  0.0009],
         [ 0.0892,  0.0074]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0523, -0.1522],
         [-0.0327, -0.2043],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2043],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2043],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2043],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2043],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2043],
         [ 0.0558,  0.0288]],

        [[ 0.0805, -0.1523],
         [-0.0280, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0280, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0280, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0280, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0280, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0280, -0.2142],
         [ 0.0495,  0.0367]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:54:57,288][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:54:57,289][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:54:57,320][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:54:57,320][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:54:57,320][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:54:57,322][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:54:57,354][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=1
[2025-01-13 12:54:57,356][train.train_model][ERROR] -   => agent_in=tensor([[ 3.9609e+02,  1.1474e+03, -1.2863e-04,  8.5636e-05],
        [ 3.9609e+02,  1.1474e+03, -1.0998e-04,  7.4718e-05],
        [ 3.9609e+02,  1.1474e+03, -8.6321e-05,  8.2352e-05],
        [ 3.9609e+02,  1.1474e+03, -1.1263e-04, -1.2039e-05],
        [ 3.9609e+02,  1.1474e+03, -8.9997e-05,  4.4610e-06],
        [ 3.9609e+02,  1.1474e+03, -5.2940e-05,  5.6597e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 396.0914, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0910, 1147.3601],
        [ 396.0910, 1147.3601]], device='cuda:0')
[2025-01-13 12:54:57,359][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3672, 0.3008],
        [0.3320, 0.3672, 0.3008],
        [0.3320, 0.3672, 0.3008],
        [0.3320, 0.3672, 0.3008],
        [0.3320, 0.3672, 0.3008],
        [0.3320, 0.3672, 0.3008],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005]], device='cuda:0') mu=tensor([[[ 0.0027, -0.0324],
         [ 0.0213, -0.0115],
         [ 0.0985,  0.0163]],

        [[ 0.0027, -0.0324],
         [ 0.0213, -0.0115],
         [ 0.0985,  0.0163]],

        [[ 0.0027, -0.0324],
         [ 0.0213, -0.0115],
         [ 0.0985,  0.0163]],

        [[ 0.0027, -0.0324],
         [ 0.0213, -0.0115],
         [ 0.0985,  0.0163]],

        [[ 0.0027, -0.0324],
         [ 0.0213, -0.0115],
         [ 0.0985,  0.0163]],

        [[ 0.0027, -0.0324],
         [ 0.0213, -0.0115],
         [ 0.0985,  0.0163]],

        [[-0.0223,  0.0055],
         [-0.0029, -0.0010],
         [ 0.0980,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0029, -0.0010],
         [ 0.0980,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0029, -0.0010],
         [ 0.0980,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0029, -0.0010],
         [ 0.0980,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0029, -0.0010],
         [ 0.0980,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0029, -0.0010],
         [ 0.0980,  0.0054]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0419, -0.1581],
         [-0.0385, -0.1876],
         [ 0.0310,  0.0226]],

        [[ 0.0419, -0.1581],
         [-0.0385, -0.1876],
         [ 0.0310,  0.0226]],

        [[ 0.0419, -0.1581],
         [-0.0385, -0.1876],
         [ 0.0310,  0.0226]],

        [[ 0.0419, -0.1581],
         [-0.0385, -0.1876],
         [ 0.0310,  0.0226]],

        [[ 0.0419, -0.1581],
         [-0.0385, -0.1876],
         [ 0.0310,  0.0226]],

        [[ 0.0419, -0.1581],
         [-0.0385, -0.1876],
         [ 0.0310,  0.0226]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0310,  0.0332]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0310,  0.0332]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0310,  0.0332]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0310,  0.0332]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0310,  0.0332]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0310,  0.0332]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:54:57,360][train.train_model][WARNING] - No valid samples found in validation.
[2025-01-13 12:55:00,569][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:00,573][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:00,648][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:00,654][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:00,654][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:00,657][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:00,657][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=0
[2025-01-13 12:55:00,660][train.train_model][ERROR] -   => agent_in=tensor([[ 853.3978, 1311.7261,   -4.8847,   -4.4066],
        [ 850.9561, 1309.5233,   -4.3247,   -4.1047],
        [ 848.7943, 1307.4716,   -4.1567,   -4.3435],
        [ 846.7139, 1305.2976,   -3.1860,   -4.0214],
        [ 845.1197, 1303.2854,   -2.4716,   -4.0279],
        [ 843.8856, 1301.2740,   -1.7914,   -3.9610]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 853.3978, 1311.7261],
        [ 850.9561, 1309.5233],
        [ 848.7943, 1307.4716],
        [ 846.7139, 1305.2976],
        [ 845.1197, 1303.2854],
        [ 843.8856, 1301.2740],
        [ 842.9910, 1299.2963],
        [ 842.4048, 1297.4437],
        [ 842.0880, 1295.7667],
        [ 842.0160, 1294.2428],
        [ 842.0981, 1293.1112],
        [ 842.3857, 1291.6929]], device='cuda:0')
[2025-01-13 12:55:00,664][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3313, 0.3635, 0.3052],
        [0.3313, 0.3635, 0.3052],
        [0.3313, 0.3635, 0.3052],
        [0.3313, 0.3635, 0.3052],
        [0.3313, 0.3635, 0.3052],
        [0.3313, 0.3635, 0.3052]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0145, -0.0120],
         [ 0.0305, -0.0032],
         [ 0.0758,  0.0169]],

        [[-0.0145, -0.0120],
         [ 0.0305, -0.0032],
         [ 0.0758,  0.0169]],

        [[-0.0145, -0.0120],
         [ 0.0305, -0.0032],
         [ 0.0758,  0.0169]],

        [[-0.0145, -0.0120],
         [ 0.0305, -0.0032],
         [ 0.0758,  0.0169]],

        [[-0.0145, -0.0120],
         [ 0.0305, -0.0032],
         [ 0.0758,  0.0169]],

        [[-0.0145, -0.0120],
         [ 0.0305, -0.0032],
         [ 0.0758,  0.0169]],

        [[-0.0350,  0.0255],
         [ 0.0115, -0.0028],
         [ 0.0799,  0.0161]],

        [[-0.0350,  0.0255],
         [ 0.0115, -0.0028],
         [ 0.0799,  0.0161]],

        [[-0.0350,  0.0255],
         [ 0.0115, -0.0028],
         [ 0.0799,  0.0161]],

        [[-0.0350,  0.0255],
         [ 0.0115, -0.0028],
         [ 0.0799,  0.0161]],

        [[-0.0350,  0.0255],
         [ 0.0115, -0.0028],
         [ 0.0799,  0.0161]],

        [[-0.0350,  0.0255],
         [ 0.0115, -0.0028],
         [ 0.0799,  0.0161]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0213, -0.1350],
         [-0.0332, -0.2233],
         [ 0.0466,  0.0419]],

        [[ 0.0213, -0.1350],
         [-0.0332, -0.2233],
         [ 0.0466,  0.0419]],

        [[ 0.0213, -0.1350],
         [-0.0332, -0.2233],
         [ 0.0466,  0.0419]],

        [[ 0.0213, -0.1350],
         [-0.0332, -0.2233],
         [ 0.0466,  0.0419]],

        [[ 0.0213, -0.1350],
         [-0.0332, -0.2233],
         [ 0.0466,  0.0419]],

        [[ 0.0213, -0.1350],
         [-0.0332, -0.2233],
         [ 0.0466,  0.0419]],

        [[ 0.0615, -0.1379],
         [-0.0253, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1379],
         [-0.0253, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1379],
         [-0.0253, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1379],
         [-0.0253, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1379],
         [-0.0253, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1379],
         [-0.0253, -0.2200],
         [ 0.0383,  0.0434]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:00,664][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:00,717][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:00,720][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:00,752][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:00,753][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:00,753][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:00,755][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:00,785][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=1
[2025-01-13 12:55:00,787][train.train_model][ERROR] -   => agent_in=tensor([[1414.7256, 1554.9775,    4.4873,   -1.7066],
        [1416.9686, 1554.1245,    4.2622,   -1.7080],
        [1419.0994, 1553.2706,    4.2525,   -1.8896],
        [1421.2250, 1552.3262,    4.1156,   -2.2476],
        [1423.2845, 1551.2013,    4.1286,   -2.7949],
        [1425.3484, 1549.8042,    4.0219,   -3.3514]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1414.7256, 1554.9775],
        [1416.9686, 1554.1245],
        [1419.0994, 1553.2706],
        [1421.2250, 1552.3262],
        [1423.2845, 1551.2013],
        [1425.3484, 1549.8042],
        [1427.3589, 1548.1289],
        [1429.2950, 1546.1971],
        [1431.1510, 1544.0028],
        [1432.9052, 1541.5918],
        [1434.5767, 1538.9965],
        [1436.1621, 1536.2957]], device='cuda:0')
[2025-01-13 12:55:00,791][train.train_model][ERROR] -   => pi=tensor([[0.3275, 0.3691, 0.3034],
        [0.3275, 0.3691, 0.3034],
        [0.3275, 0.3691, 0.3034],
        [0.3275, 0.3691, 0.3034],
        [0.3275, 0.3691, 0.3034],
        [0.3275, 0.3691, 0.3034],
        [0.3268, 0.3679, 0.3053],
        [0.3268, 0.3679, 0.3053],
        [0.3268, 0.3679, 0.3053],
        [0.3268, 0.3679, 0.3053],
        [0.3268, 0.3679, 0.3053],
        [0.3268, 0.3679, 0.3053]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0123, -0.0053],
         [ 0.0383, -0.0231],
         [ 0.0778,  0.0079]],

        [[-0.0123, -0.0053],
         [ 0.0383, -0.0231],
         [ 0.0778,  0.0079]],

        [[-0.0123, -0.0053],
         [ 0.0383, -0.0231],
         [ 0.0778,  0.0079]],

        [[-0.0123, -0.0053],
         [ 0.0383, -0.0231],
         [ 0.0778,  0.0079]],

        [[-0.0123, -0.0053],
         [ 0.0383, -0.0231],
         [ 0.0778,  0.0079]],

        [[-0.0123, -0.0053],
         [ 0.0383, -0.0231],
         [ 0.0778,  0.0079]],

        [[-0.0381,  0.0286],
         [ 0.0221, -0.0181],
         [ 0.0749,  0.0099]],

        [[-0.0381,  0.0286],
         [ 0.0221, -0.0181],
         [ 0.0749,  0.0099]],

        [[-0.0381,  0.0286],
         [ 0.0221, -0.0181],
         [ 0.0749,  0.0099]],

        [[-0.0381,  0.0286],
         [ 0.0221, -0.0181],
         [ 0.0749,  0.0099]],

        [[-0.0381,  0.0286],
         [ 0.0221, -0.0181],
         [ 0.0749,  0.0099]],

        [[-0.0381,  0.0286],
         [ 0.0221, -0.0181],
         [ 0.0749,  0.0099]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0298, -0.1232],
         [-0.0322, -0.2556],
         [ 0.0556,  0.0456]],

        [[ 0.0298, -0.1232],
         [-0.0322, -0.2556],
         [ 0.0556,  0.0456]],

        [[ 0.0298, -0.1232],
         [-0.0322, -0.2556],
         [ 0.0556,  0.0456]],

        [[ 0.0298, -0.1232],
         [-0.0322, -0.2556],
         [ 0.0556,  0.0456]],

        [[ 0.0298, -0.1232],
         [-0.0322, -0.2556],
         [ 0.0556,  0.0456]],

        [[ 0.0298, -0.1232],
         [-0.0322, -0.2556],
         [ 0.0556,  0.0456]],

        [[ 0.0732, -0.1252],
         [-0.0227, -0.2472],
         [ 0.0397,  0.0458]],

        [[ 0.0732, -0.1252],
         [-0.0227, -0.2472],
         [ 0.0397,  0.0458]],

        [[ 0.0732, -0.1252],
         [-0.0227, -0.2472],
         [ 0.0397,  0.0458]],

        [[ 0.0732, -0.1252],
         [-0.0227, -0.2472],
         [ 0.0397,  0.0458]],

        [[ 0.0732, -0.1252],
         [-0.0227, -0.2472],
         [ 0.0397,  0.0458]],

        [[ 0.0732, -0.1252],
         [-0.0227, -0.2472],
         [ 0.0397,  0.0458]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:00,792][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:00,796][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:00,798][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:00,829][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:00,829][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:00,830][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:00,831][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:00,863][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=2
[2025-01-13 12:55:00,865][train.train_model][ERROR] -   => agent_in=tensor([[ 1.1978e+03,  1.1256e+03,  1.9408e-07, -1.3502e-07],
        [ 1.1978e+03,  1.1256e+03, -3.7345e-07,  3.1605e-07],
        [ 1.1978e+03,  1.1256e+03, -2.1779e-06,  1.4805e-06],
        [ 1.1978e+03,  1.1256e+03,  1.5611e-06, -1.0975e-06],
        [ 1.1978e+03,  1.1256e+03,  6.0184e-06, -4.2293e-06],
        [ 1.1978e+03,  1.1256e+03, -2.2380e-07,  1.6365e-07]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172],
        [1197.8009, 1125.6172]], device='cuda:0')
[2025-01-13 12:55:00,869][train.train_model][ERROR] -   => pi=tensor([[0.3260, 0.3678, 0.3062],
        [0.3260, 0.3678, 0.3062],
        [0.3260, 0.3678, 0.3062],
        [0.3260, 0.3678, 0.3062],
        [0.3260, 0.3678, 0.3062],
        [0.3260, 0.3678, 0.3062],
        [0.3260, 0.3667, 0.3073],
        [0.3260, 0.3667, 0.3073],
        [0.3260, 0.3667, 0.3073],
        [0.3260, 0.3667, 0.3073],
        [0.3260, 0.3667, 0.3073],
        [0.3260, 0.3667, 0.3073]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0108,  0.0012],
         [ 0.0426, -0.0266],
         [ 0.0894,  0.0048]],

        [[-0.0108,  0.0012],
         [ 0.0426, -0.0266],
         [ 0.0894,  0.0048]],

        [[-0.0108,  0.0012],
         [ 0.0426, -0.0266],
         [ 0.0894,  0.0048]],

        [[-0.0108,  0.0012],
         [ 0.0426, -0.0266],
         [ 0.0894,  0.0048]],

        [[-0.0108,  0.0012],
         [ 0.0426, -0.0266],
         [ 0.0894,  0.0048]],

        [[-0.0108,  0.0012],
         [ 0.0426, -0.0266],
         [ 0.0894,  0.0048]],

        [[-0.0400,  0.0345],
         [ 0.0263, -0.0193],
         [ 0.0839,  0.0055]],

        [[-0.0400,  0.0345],
         [ 0.0263, -0.0193],
         [ 0.0839,  0.0055]],

        [[-0.0400,  0.0345],
         [ 0.0263, -0.0193],
         [ 0.0839,  0.0055]],

        [[-0.0400,  0.0345],
         [ 0.0263, -0.0193],
         [ 0.0839,  0.0055]],

        [[-0.0400,  0.0345],
         [ 0.0263, -0.0193],
         [ 0.0839,  0.0055]],

        [[-0.0400,  0.0345],
         [ 0.0263, -0.0193],
         [ 0.0839,  0.0055]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0253, -0.1071],
         [-0.0269, -0.2578],
         [ 0.0634,  0.0469]],

        [[ 0.0253, -0.1071],
         [-0.0269, -0.2578],
         [ 0.0634,  0.0469]],

        [[ 0.0253, -0.1071],
         [-0.0269, -0.2578],
         [ 0.0634,  0.0469]],

        [[ 0.0253, -0.1071],
         [-0.0269, -0.2578],
         [ 0.0634,  0.0469]],

        [[ 0.0253, -0.1071],
         [-0.0269, -0.2578],
         [ 0.0634,  0.0469]],

        [[ 0.0253, -0.1071],
         [-0.0269, -0.2578],
         [ 0.0634,  0.0469]],

        [[ 0.0641, -0.1102],
         [-0.0198, -0.2537],
         [ 0.0490,  0.0482]],

        [[ 0.0641, -0.1102],
         [-0.0198, -0.2537],
         [ 0.0490,  0.0482]],

        [[ 0.0641, -0.1102],
         [-0.0198, -0.2537],
         [ 0.0490,  0.0482]],

        [[ 0.0641, -0.1102],
         [-0.0198, -0.2537],
         [ 0.0490,  0.0482]],

        [[ 0.0641, -0.1102],
         [-0.0198, -0.2537],
         [ 0.0490,  0.0482]],

        [[ 0.0641, -0.1102],
         [-0.0198, -0.2537],
         [ 0.0490,  0.0482]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:00,869][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:00,875][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:00,877][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:00,908][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:00,909][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:00,909][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:00,910][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:00,942][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=3
[2025-01-13 12:55:00,944][train.train_model][ERROR] -   => agent_in=tensor([[1207.4497, 2804.5889,    7.2933,   -6.0731],
        [1211.0952, 2801.5532,    7.1593,   -6.0276],
        [1214.6740, 2798.5400,    7.0864,   -5.9285],
        [1218.2124, 2795.5798,    6.9597,   -5.8191],
        [1221.6915, 2792.6709,    6.7718,   -5.6466],
        [1225.0803, 2789.8452,    6.6264,   -5.4690]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1207.4497, 2804.5889],
        [1211.0952, 2801.5532],
        [1214.6740, 2798.5400],
        [1218.2124, 2795.5798],
        [1221.6915, 2792.6709],
        [1225.0803, 2789.8452],
        [1228.7262, 2786.8362],
        [1231.8992, 2784.2253],
        [1234.9486, 2781.7134],
        [1237.8955, 2779.2998],
        [1240.7408, 2776.9453],
        [1243.5806, 2774.5884]], device='cuda:0')
[2025-01-13 12:55:00,948][train.train_model][ERROR] -   => pi=tensor([[0.3304, 0.3689, 0.3008],
        [0.3304, 0.3689, 0.3008],
        [0.3304, 0.3689, 0.3008],
        [0.3304, 0.3689, 0.3008],
        [0.3304, 0.3689, 0.3008],
        [0.3304, 0.3689, 0.3008],
        [0.3308, 0.3679, 0.3014],
        [0.3308, 0.3679, 0.3014],
        [0.3308, 0.3679, 0.3014],
        [0.3308, 0.3679, 0.3014],
        [0.3308, 0.3679, 0.3014],
        [0.3308, 0.3679, 0.3014]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0185, -0.0198],
         [ 0.0282, -0.0120],
         [ 0.0906,  0.0155]],

        [[ 0.0185, -0.0198],
         [ 0.0282, -0.0120],
         [ 0.0906,  0.0155]],

        [[ 0.0185, -0.0198],
         [ 0.0282, -0.0120],
         [ 0.0906,  0.0155]],

        [[ 0.0185, -0.0198],
         [ 0.0282, -0.0120],
         [ 0.0906,  0.0155]],

        [[ 0.0185, -0.0198],
         [ 0.0282, -0.0120],
         [ 0.0906,  0.0155]],

        [[ 0.0185, -0.0198],
         [ 0.0282, -0.0120],
         [ 0.0906,  0.0155]],

        [[-0.0078,  0.0153],
         [ 0.0101, -0.0057],
         [ 0.0851,  0.0119]],

        [[-0.0078,  0.0153],
         [ 0.0101, -0.0057],
         [ 0.0851,  0.0119]],

        [[-0.0078,  0.0153],
         [ 0.0101, -0.0057],
         [ 0.0851,  0.0119]],

        [[-0.0078,  0.0153],
         [ 0.0101, -0.0057],
         [ 0.0851,  0.0119]],

        [[-0.0078,  0.0153],
         [ 0.0101, -0.0057],
         [ 0.0851,  0.0119]],

        [[-0.0078,  0.0153],
         [ 0.0101, -0.0057],
         [ 0.0851,  0.0119]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0565, -0.1475],
         [-0.0331, -0.2003],
         [ 0.0553,  0.0266]],

        [[ 0.0565, -0.1475],
         [-0.0331, -0.2003],
         [ 0.0553,  0.0266]],

        [[ 0.0565, -0.1475],
         [-0.0331, -0.2003],
         [ 0.0553,  0.0266]],

        [[ 0.0565, -0.1475],
         [-0.0331, -0.2003],
         [ 0.0553,  0.0266]],

        [[ 0.0565, -0.1475],
         [-0.0331, -0.2003],
         [ 0.0553,  0.0266]],

        [[ 0.0565, -0.1475],
         [-0.0331, -0.2003],
         [ 0.0553,  0.0266]],

        [[ 0.0836, -0.1473],
         [-0.0283, -0.2089],
         [ 0.0490,  0.0348]],

        [[ 0.0836, -0.1473],
         [-0.0283, -0.2089],
         [ 0.0490,  0.0348]],

        [[ 0.0836, -0.1473],
         [-0.0283, -0.2089],
         [ 0.0490,  0.0348]],

        [[ 0.0836, -0.1473],
         [-0.0283, -0.2089],
         [ 0.0490,  0.0348]],

        [[ 0.0836, -0.1473],
         [-0.0283, -0.2089],
         [ 0.0490,  0.0348]],

        [[ 0.0836, -0.1473],
         [-0.0283, -0.2089],
         [ 0.0490,  0.0348]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:00,948][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:02,993][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:02,995][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:03,025][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:03,026][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:03,026][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:03,028][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:03,060][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=4
[2025-01-13 12:55:03,062][train.train_model][ERROR] -   => agent_in=tensor([[ 1.5871e+03,  2.8832e+03,  1.8721e-06, -1.9842e-06],
        [ 1.5871e+03,  2.8832e+03,  5.8103e-07,  6.8523e-09],
        [ 1.5871e+03,  2.8832e+03, -1.4882e-06,  3.3202e-06],
        [ 1.5871e+03,  2.8832e+03,  1.5186e-06, -1.8159e-06],
        [ 1.5871e+03,  2.8832e+03, -1.0231e-06,  2.3511e-06],
        [ 1.5871e+03,  2.8832e+03,  5.6042e-08,  3.8328e-07]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493],
        [1587.0624, 2883.2493]], device='cuda:0')
[2025-01-13 12:55:03,066][train.train_model][ERROR] -   => pi=tensor([[0.3318, 0.3657, 0.3026],
        [0.3318, 0.3657, 0.3026],
        [0.3318, 0.3657, 0.3026],
        [0.3318, 0.3657, 0.3026],
        [0.3318, 0.3657, 0.3026],
        [0.3318, 0.3657, 0.3026],
        [0.3314, 0.3635, 0.3050],
        [0.3314, 0.3635, 0.3050],
        [0.3314, 0.3635, 0.3050],
        [0.3314, 0.3635, 0.3050],
        [0.3314, 0.3635, 0.3050],
        [0.3314, 0.3635, 0.3050]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0100, -0.0128],
         [ 0.0294, -0.0071],
         [ 0.0796,  0.0179]],

        [[-0.0100, -0.0128],
         [ 0.0294, -0.0071],
         [ 0.0796,  0.0179]],

        [[-0.0100, -0.0128],
         [ 0.0294, -0.0071],
         [ 0.0796,  0.0179]],

        [[-0.0100, -0.0128],
         [ 0.0294, -0.0071],
         [ 0.0796,  0.0179]],

        [[-0.0100, -0.0128],
         [ 0.0294, -0.0071],
         [ 0.0796,  0.0179]],

        [[-0.0100, -0.0128],
         [ 0.0294, -0.0071],
         [ 0.0796,  0.0179]],

        [[-0.0307,  0.0252],
         [ 0.0100, -0.0066],
         [ 0.0834,  0.0166]],

        [[-0.0307,  0.0252],
         [ 0.0100, -0.0066],
         [ 0.0834,  0.0166]],

        [[-0.0307,  0.0252],
         [ 0.0100, -0.0066],
         [ 0.0834,  0.0166]],

        [[-0.0307,  0.0252],
         [ 0.0100, -0.0066],
         [ 0.0834,  0.0166]],

        [[-0.0307,  0.0252],
         [ 0.0100, -0.0066],
         [ 0.0834,  0.0166]],

        [[-0.0307,  0.0252],
         [ 0.0100, -0.0066],
         [ 0.0834,  0.0166]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0293, -0.1390],
         [-0.0299, -0.2112],
         [ 0.0446,  0.0363]],

        [[ 0.0293, -0.1390],
         [-0.0299, -0.2112],
         [ 0.0446,  0.0363]],

        [[ 0.0293, -0.1390],
         [-0.0299, -0.2112],
         [ 0.0446,  0.0363]],

        [[ 0.0293, -0.1390],
         [-0.0299, -0.2112],
         [ 0.0446,  0.0363]],

        [[ 0.0293, -0.1390],
         [-0.0299, -0.2112],
         [ 0.0446,  0.0363]],

        [[ 0.0293, -0.1390],
         [-0.0299, -0.2112],
         [ 0.0446,  0.0363]],

        [[ 0.0665, -0.1414],
         [-0.0233, -0.2114],
         [ 0.0374,  0.0389]],

        [[ 0.0665, -0.1414],
         [-0.0233, -0.2114],
         [ 0.0374,  0.0389]],

        [[ 0.0665, -0.1414],
         [-0.0233, -0.2114],
         [ 0.0374,  0.0389]],

        [[ 0.0665, -0.1414],
         [-0.0233, -0.2114],
         [ 0.0374,  0.0389]],

        [[ 0.0665, -0.1414],
         [-0.0233, -0.2114],
         [ 0.0374,  0.0389]],

        [[ 0.0665, -0.1414],
         [-0.0233, -0.2114],
         [ 0.0374,  0.0389]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:03,067][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:03,074][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:03,076][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:03,106][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:03,107][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:03,107][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:03,109][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:03,141][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=5
[2025-01-13 12:55:03,143][train.train_model][ERROR] -   => agent_in=tensor([[408.2479, 838.1808,  -2.4096,   1.1021],
        [407.0435, 838.7317,  -2.6452,   1.4013],
        [405.7211, 839.4323,  -3.0053,   1.7839],
        [404.2189, 840.3239,  -3.2200,   2.1952],
        [402.6092, 841.4213,  -3.2835,   2.7481],
        [400.9661, 842.7965,  -3.0977,   3.2278]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[408.2479, 838.1808],
        [407.0435, 838.7317],
        [405.7211, 839.4323],
        [404.2189, 840.3239],
        [402.6092, 841.4213],
        [400.9661, 842.7965],
        [399.4176, 844.4100],
        [398.0185, 846.2785],
        [396.9244, 848.5444],
        [396.4222, 850.8190],
        [396.4570, 853.1442],
        [397.0158, 855.5320]], device='cuda:0')
[2025-01-13 12:55:03,147][train.train_model][ERROR] -   => pi=tensor([[0.3288, 0.3689, 0.3023],
        [0.3288, 0.3689, 0.3023],
        [0.3288, 0.3689, 0.3023],
        [0.3288, 0.3689, 0.3023],
        [0.3288, 0.3689, 0.3023],
        [0.3288, 0.3689, 0.3023],
        [0.3288, 0.3677, 0.3036],
        [0.3288, 0.3677, 0.3036],
        [0.3288, 0.3677, 0.3036],
        [0.3288, 0.3677, 0.3036],
        [0.3288, 0.3677, 0.3036],
        [0.3288, 0.3677, 0.3036]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0048, -0.0150],
         [ 0.0305, -0.0056],
         [ 0.0908,  0.0144]],

        [[ 0.0048, -0.0150],
         [ 0.0305, -0.0056],
         [ 0.0908,  0.0144]],

        [[ 0.0048, -0.0150],
         [ 0.0305, -0.0056],
         [ 0.0908,  0.0144]],

        [[ 0.0048, -0.0150],
         [ 0.0305, -0.0056],
         [ 0.0908,  0.0144]],

        [[ 0.0048, -0.0150],
         [ 0.0305, -0.0056],
         [ 0.0908,  0.0144]],

        [[ 0.0048, -0.0150],
         [ 0.0305, -0.0056],
         [ 0.0908,  0.0144]],

        [[-0.0209,  0.0204],
         [ 0.0110,  0.0002],
         [ 0.0895,  0.0098]],

        [[-0.0209,  0.0204],
         [ 0.0110,  0.0002],
         [ 0.0895,  0.0098]],

        [[-0.0209,  0.0204],
         [ 0.0110,  0.0002],
         [ 0.0895,  0.0098]],

        [[-0.0209,  0.0204],
         [ 0.0110,  0.0002],
         [ 0.0895,  0.0098]],

        [[-0.0209,  0.0204],
         [ 0.0110,  0.0002],
         [ 0.0895,  0.0098]],

        [[-0.0209,  0.0204],
         [ 0.0110,  0.0002],
         [ 0.0895,  0.0098]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0411, -0.1470],
         [-0.0349, -0.2155],
         [ 0.0500,  0.0352]],

        [[ 0.0411, -0.1470],
         [-0.0349, -0.2155],
         [ 0.0500,  0.0352]],

        [[ 0.0411, -0.1470],
         [-0.0349, -0.2155],
         [ 0.0500,  0.0352]],

        [[ 0.0411, -0.1470],
         [-0.0349, -0.2155],
         [ 0.0500,  0.0352]],

        [[ 0.0411, -0.1470],
         [-0.0349, -0.2155],
         [ 0.0500,  0.0352]],

        [[ 0.0411, -0.1470],
         [-0.0349, -0.2155],
         [ 0.0500,  0.0352]],

        [[ 0.0726, -0.1470],
         [-0.0286, -0.2211],
         [ 0.0421,  0.0402]],

        [[ 0.0726, -0.1470],
         [-0.0286, -0.2211],
         [ 0.0421,  0.0402]],

        [[ 0.0726, -0.1470],
         [-0.0286, -0.2211],
         [ 0.0421,  0.0402]],

        [[ 0.0726, -0.1470],
         [-0.0286, -0.2211],
         [ 0.0421,  0.0402]],

        [[ 0.0726, -0.1470],
         [-0.0286, -0.2211],
         [ 0.0421,  0.0402]],

        [[ 0.0726, -0.1470],
         [-0.0286, -0.2211],
         [ 0.0421,  0.0402]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:03,147][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:03,151][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:03,153][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:03,183][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:03,184][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:03,184][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:03,185][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:03,218][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=6
[2025-01-13 12:55:03,220][train.train_model][ERROR] -   => agent_in=tensor([[ 1.5935e+03,  8.6176e+02, -4.4342e+00, -1.5365e+00],
        [ 1.5908e+03,  8.6083e+02, -4.2642e+00, -1.5054e+00],
        [ 1.5887e+03,  8.6008e+02, -4.3252e+00, -1.6807e+00],
        [ 1.5866e+03,  8.5924e+02, -4.3608e+00, -1.9224e+00],
        [ 1.5848e+03,  8.5848e+02, -4.1269e+00, -2.1279e+00],
        [ 1.5828e+03,  8.5741e+02, -3.9357e+00, -2.3781e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1593.5101,  861.7562],
        [1590.8496,  860.8344],
        [1588.7180,  860.0818],
        [1586.5518,  859.2400],
        [1584.8175,  858.4755],
        [1582.7568,  857.4130],
        [1580.7894,  856.2242],
        [1579.0237,  854.9815],
        [1577.5020,  853.7347],
        [1576.1221,  852.4978],
        [1574.9585,  851.4092],
        [1573.6948,  850.1971]], device='cuda:0')
[2025-01-13 12:55:03,224][train.train_model][ERROR] -   => pi=tensor([[0.3310, 0.3670, 0.3020],
        [0.3310, 0.3670, 0.3020],
        [0.3310, 0.3670, 0.3020],
        [0.3310, 0.3670, 0.3020],
        [0.3310, 0.3670, 0.3020],
        [0.3310, 0.3670, 0.3020],
        [0.3303, 0.3664, 0.3033],
        [0.3303, 0.3664, 0.3033],
        [0.3303, 0.3664, 0.3033],
        [0.3303, 0.3664, 0.3033],
        [0.3303, 0.3664, 0.3033],
        [0.3303, 0.3664, 0.3033]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0327,  0.0012],
         [ 0.0301,  0.0007],
         [ 0.1149,  0.0442]],

        [[-0.0327,  0.0012],
         [ 0.0301,  0.0007],
         [ 0.1149,  0.0442]],

        [[-0.0327,  0.0012],
         [ 0.0301,  0.0007],
         [ 0.1149,  0.0442]],

        [[-0.0327,  0.0012],
         [ 0.0301,  0.0007],
         [ 0.1149,  0.0442]],

        [[-0.0327,  0.0012],
         [ 0.0301,  0.0007],
         [ 0.1149,  0.0442]],

        [[-0.0327,  0.0012],
         [ 0.0301,  0.0007],
         [ 0.1149,  0.0442]],

        [[-0.0435,  0.0185],
         [ 0.0262, -0.0028],
         [ 0.1122,  0.0498]],

        [[-0.0435,  0.0185],
         [ 0.0262, -0.0028],
         [ 0.1122,  0.0498]],

        [[-0.0435,  0.0185],
         [ 0.0262, -0.0028],
         [ 0.1122,  0.0498]],

        [[-0.0435,  0.0185],
         [ 0.0262, -0.0028],
         [ 0.1122,  0.0498]],

        [[-0.0435,  0.0185],
         [ 0.0262, -0.0028],
         [ 0.1122,  0.0498]],

        [[-0.0435,  0.0185],
         [ 0.0262, -0.0028],
         [ 0.1122,  0.0498]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[-3.8986e-03, -9.0576e-02],
         [-4.4785e-03, -2.7124e-01],
         [ 6.9336e-02,  3.6194e-02]],

        [[-3.8986e-03, -9.0576e-02],
         [-4.4785e-03, -2.7124e-01],
         [ 6.9336e-02,  3.6194e-02]],

        [[-3.8986e-03, -9.0576e-02],
         [-4.4785e-03, -2.7124e-01],
         [ 6.9336e-02,  3.6194e-02]],

        [[-3.8986e-03, -9.0576e-02],
         [-4.4785e-03, -2.7124e-01],
         [ 6.9336e-02,  3.6194e-02]],

        [[-3.8986e-03, -9.0576e-02],
         [-4.4785e-03, -2.7124e-01],
         [ 6.9336e-02,  3.6194e-02]],

        [[-3.8986e-03, -9.0576e-02],
         [-4.4785e-03, -2.7124e-01],
         [ 6.9336e-02,  3.6194e-02]],

        [[ 2.6337e-02, -9.7778e-02],
         [-1.6785e-04, -2.5879e-01],
         [ 5.5786e-02,  3.3386e-02]],

        [[ 2.6337e-02, -9.7778e-02],
         [-1.6785e-04, -2.5879e-01],
         [ 5.5786e-02,  3.3386e-02]],

        [[ 2.6337e-02, -9.7778e-02],
         [-1.6785e-04, -2.5879e-01],
         [ 5.5786e-02,  3.3386e-02]],

        [[ 2.6337e-02, -9.7778e-02],
         [-1.6785e-04, -2.5879e-01],
         [ 5.5786e-02,  3.3386e-02]],

        [[ 2.6337e-02, -9.7778e-02],
         [-1.6785e-04, -2.5879e-01],
         [ 5.5786e-02,  3.3386e-02]],

        [[ 2.6337e-02, -9.7778e-02],
         [-1.6785e-04, -2.5879e-01],
         [ 5.5786e-02,  3.3386e-02]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:03,224][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:03,228][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:03,230][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:03,261][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:03,261][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:03,262][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:03,263][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:03,295][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=7
[2025-01-13 12:55:03,297][train.train_model][ERROR] -   => agent_in=tensor([[ 1.1824e+03,  1.6510e+03,  4.4475e-05, -2.5251e-05],
        [ 1.1824e+03,  1.6510e+03,  3.8701e-05, -2.0717e-05],
        [ 1.1824e+03,  1.6510e+03,  3.3134e-05, -1.8654e-05],
        [ 1.1824e+03,  1.6510e+03,  3.0034e-05, -1.3836e-05],
        [ 1.1824e+03,  1.6510e+03,  2.5842e-05, -1.1208e-05],
        [ 1.1824e+03,  1.6510e+03,  2.0687e-05, -1.2330e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1182.4456, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.4457, 1650.9723],
        [1182.5280, 1651.1331]], device='cuda:0')
[2025-01-13 12:55:03,301][train.train_model][ERROR] -   => pi=tensor([[0.3322, 0.3648, 0.3030],
        [0.3322, 0.3648, 0.3030],
        [0.3322, 0.3648, 0.3030],
        [0.3322, 0.3648, 0.3030],
        [0.3322, 0.3648, 0.3030],
        [0.3322, 0.3648, 0.3030],
        [0.3320, 0.3627, 0.3054],
        [0.3320, 0.3627, 0.3054],
        [0.3320, 0.3627, 0.3054],
        [0.3320, 0.3627, 0.3054],
        [0.3320, 0.3627, 0.3054],
        [0.3320, 0.3627, 0.3054]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0098, -0.0135],
         [ 0.0279, -0.0030],
         [ 0.0784,  0.0111]],

        [[-0.0098, -0.0135],
         [ 0.0279, -0.0030],
         [ 0.0784,  0.0111]],

        [[-0.0098, -0.0135],
         [ 0.0279, -0.0030],
         [ 0.0784,  0.0111]],

        [[-0.0098, -0.0135],
         [ 0.0279, -0.0030],
         [ 0.0784,  0.0111]],

        [[-0.0098, -0.0135],
         [ 0.0279, -0.0030],
         [ 0.0784,  0.0111]],

        [[-0.0098, -0.0135],
         [ 0.0279, -0.0030],
         [ 0.0784,  0.0111]],

        [[-0.0339,  0.0248],
         [ 0.0094, -0.0019],
         [ 0.0796,  0.0129]],

        [[-0.0339,  0.0248],
         [ 0.0094, -0.0019],
         [ 0.0796,  0.0129]],

        [[-0.0339,  0.0248],
         [ 0.0094, -0.0019],
         [ 0.0796,  0.0129]],

        [[-0.0339,  0.0248],
         [ 0.0094, -0.0019],
         [ 0.0796,  0.0129]],

        [[-0.0339,  0.0248],
         [ 0.0094, -0.0019],
         [ 0.0796,  0.0129]],

        [[-0.0339,  0.0248],
         [ 0.0094, -0.0019],
         [ 0.0796,  0.0129]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0173, -0.1373],
         [-0.0304, -0.2334],
         [ 0.0532,  0.0392]],

        [[ 0.0173, -0.1373],
         [-0.0304, -0.2334],
         [ 0.0532,  0.0392]],

        [[ 0.0173, -0.1373],
         [-0.0304, -0.2334],
         [ 0.0532,  0.0392]],

        [[ 0.0173, -0.1373],
         [-0.0304, -0.2334],
         [ 0.0532,  0.0392]],

        [[ 0.0173, -0.1373],
         [-0.0304, -0.2334],
         [ 0.0532,  0.0392]],

        [[ 0.0173, -0.1373],
         [-0.0304, -0.2334],
         [ 0.0532,  0.0392]],

        [[ 0.0598, -0.1412],
         [-0.0234, -0.2311],
         [ 0.0443,  0.0419]],

        [[ 0.0598, -0.1412],
         [-0.0234, -0.2311],
         [ 0.0443,  0.0419]],

        [[ 0.0598, -0.1412],
         [-0.0234, -0.2311],
         [ 0.0443,  0.0419]],

        [[ 0.0598, -0.1412],
         [-0.0234, -0.2311],
         [ 0.0443,  0.0419]],

        [[ 0.0598, -0.1412],
         [-0.0234, -0.2311],
         [ 0.0443,  0.0419]],

        [[ 0.0598, -0.1412],
         [-0.0234, -0.2311],
         [ 0.0443,  0.0419]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:03,301][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:05,406][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:05,409][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:05,440][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:05,441][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:05,441][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:05,442][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:05,474][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=8
[2025-01-13 12:55:05,476][train.train_model][ERROR] -   => agent_in=tensor([[1243.7814, 1518.1726,   -6.8981,    4.4175],
        [1240.3331, 1520.3809,   -6.9563,    4.5529],
        [1236.8635, 1522.6517,   -6.8992,    4.6265],
        [1233.4149, 1524.9642,   -6.8935,    4.8210],
        [1229.9689, 1527.3743,   -6.7636,    4.7933],
        [1226.2477, 1530.0115,   -6.7874,    4.8186]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1243.7814, 1518.1726],
        [1240.3331, 1520.3809],
        [1236.8635, 1522.6517],
        [1233.4149, 1524.9642],
        [1229.9689, 1527.3743],
        [1226.2477, 1530.0115],
        [1222.8547, 1532.4202],
        [1219.3982, 1534.9644],
        [1216.0293, 1537.4366],
        [1212.7010, 1539.8037],
        [1209.7056, 1541.9250],
        [1206.4562, 1544.2430]], device='cuda:0')
[2025-01-13 12:55:05,480][train.train_model][ERROR] -   => pi=tensor([[0.3299, 0.3665, 0.3036],
        [0.3299, 0.3665, 0.3036],
        [0.3299, 0.3665, 0.3036],
        [0.3299, 0.3665, 0.3036],
        [0.3299, 0.3665, 0.3036],
        [0.3299, 0.3665, 0.3036],
        [0.3292, 0.3654, 0.3054],
        [0.3292, 0.3654, 0.3054],
        [0.3292, 0.3654, 0.3054],
        [0.3292, 0.3654, 0.3054],
        [0.3292, 0.3654, 0.3054],
        [0.3292, 0.3654, 0.3054]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0175, -0.0063],
         [ 0.0408, -0.0119],
         [ 0.0775,  0.0096]],

        [[-0.0175, -0.0063],
         [ 0.0408, -0.0119],
         [ 0.0775,  0.0096]],

        [[-0.0175, -0.0063],
         [ 0.0408, -0.0119],
         [ 0.0775,  0.0096]],

        [[-0.0175, -0.0063],
         [ 0.0408, -0.0119],
         [ 0.0775,  0.0096]],

        [[-0.0175, -0.0063],
         [ 0.0408, -0.0119],
         [ 0.0775,  0.0096]],

        [[-0.0175, -0.0063],
         [ 0.0408, -0.0119],
         [ 0.0775,  0.0096]],

        [[-0.0414,  0.0286],
         [ 0.0209, -0.0072],
         [ 0.0785,  0.0092]],

        [[-0.0414,  0.0286],
         [ 0.0209, -0.0072],
         [ 0.0785,  0.0092]],

        [[-0.0414,  0.0286],
         [ 0.0209, -0.0072],
         [ 0.0785,  0.0092]],

        [[-0.0414,  0.0286],
         [ 0.0209, -0.0072],
         [ 0.0785,  0.0092]],

        [[-0.0414,  0.0286],
         [ 0.0209, -0.0072],
         [ 0.0785,  0.0092]],

        [[-0.0414,  0.0286],
         [ 0.0209, -0.0072],
         [ 0.0785,  0.0092]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0210, -0.1318],
         [-0.0260, -0.2434],
         [ 0.0583,  0.0438]],

        [[ 0.0210, -0.1318],
         [-0.0260, -0.2434],
         [ 0.0583,  0.0438]],

        [[ 0.0210, -0.1318],
         [-0.0260, -0.2434],
         [ 0.0583,  0.0438]],

        [[ 0.0210, -0.1318],
         [-0.0260, -0.2434],
         [ 0.0583,  0.0438]],

        [[ 0.0210, -0.1318],
         [-0.0260, -0.2434],
         [ 0.0583,  0.0438]],

        [[ 0.0210, -0.1318],
         [-0.0260, -0.2434],
         [ 0.0583,  0.0438]],

        [[ 0.0642, -0.1335],
         [-0.0172, -0.2373],
         [ 0.0446,  0.0442]],

        [[ 0.0642, -0.1335],
         [-0.0172, -0.2373],
         [ 0.0446,  0.0442]],

        [[ 0.0642, -0.1335],
         [-0.0172, -0.2373],
         [ 0.0446,  0.0442]],

        [[ 0.0642, -0.1335],
         [-0.0172, -0.2373],
         [ 0.0446,  0.0442]],

        [[ 0.0642, -0.1335],
         [-0.0172, -0.2373],
         [ 0.0446,  0.0442]],

        [[ 0.0642, -0.1335],
         [-0.0172, -0.2373],
         [ 0.0446,  0.0442]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:05,481][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:05,486][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:05,488][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:05,519][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:05,519][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:05,520][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:05,521][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:05,553][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=9
[2025-01-13 12:55:05,555][train.train_model][ERROR] -   => agent_in=tensor([[ 7.6999e+02,  1.6651e+03, -3.9083e-01,  8.4917e+00],
        [ 7.6979e+02,  1.6694e+03, -3.7887e-01,  8.0110e+00],
        [ 7.6960e+02,  1.6734e+03, -3.6166e-01,  7.5402e+00],
        [ 7.6942e+02,  1.6771e+03, -3.1271e-01,  7.1809e+00],
        [ 7.6927e+02,  1.6807e+03, -3.1577e-01,  6.6952e+00],
        [ 7.6914e+02,  1.6834e+03, -2.5659e-01,  6.3347e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 769.9883, 1665.1052],
        [ 769.7928, 1669.3546],
        [ 769.6031, 1673.3636],
        [ 769.4224, 1677.1327],
        [ 769.2659, 1680.7263],
        [ 769.1395, 1683.4067],
        [ 768.9854, 1687.2108],
        [ 768.8563, 1690.2815],
        [ 768.7147, 1693.2266],
        [ 768.5850, 1695.9880],
        [ 768.4562, 1698.5826],
        [ 768.3441, 1700.9390]], device='cuda:0')
[2025-01-13 12:55:05,559][train.train_model][ERROR] -   => pi=tensor([[0.3294, 0.3682, 0.3024],
        [0.3294, 0.3682, 0.3024],
        [0.3294, 0.3682, 0.3024],
        [0.3294, 0.3682, 0.3024],
        [0.3294, 0.3682, 0.3024],
        [0.3294, 0.3682, 0.3024],
        [0.3299, 0.3671, 0.3030],
        [0.3299, 0.3671, 0.3030],
        [0.3299, 0.3671, 0.3030],
        [0.3299, 0.3671, 0.3030],
        [0.3299, 0.3671, 0.3030],
        [0.3299, 0.3671, 0.3030]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0171, -0.0175],
         [ 0.0309, -0.0062],
         [ 0.0941,  0.0121]],

        [[ 0.0171, -0.0175],
         [ 0.0309, -0.0062],
         [ 0.0941,  0.0121]],

        [[ 0.0171, -0.0175],
         [ 0.0309, -0.0062],
         [ 0.0941,  0.0121]],

        [[ 0.0171, -0.0175],
         [ 0.0309, -0.0062],
         [ 0.0941,  0.0121]],

        [[ 0.0171, -0.0175],
         [ 0.0309, -0.0062],
         [ 0.0941,  0.0121]],

        [[ 0.0171, -0.0175],
         [ 0.0309, -0.0062],
         [ 0.0941,  0.0121]],

        [[-0.0120,  0.0189],
         [ 0.0108,  0.0006],
         [ 0.0895,  0.0079]],

        [[-0.0120,  0.0189],
         [ 0.0108,  0.0006],
         [ 0.0895,  0.0079]],

        [[-0.0120,  0.0189],
         [ 0.0108,  0.0006],
         [ 0.0895,  0.0079]],

        [[-0.0120,  0.0189],
         [ 0.0108,  0.0006],
         [ 0.0895,  0.0079]],

        [[-0.0120,  0.0189],
         [ 0.0108,  0.0006],
         [ 0.0895,  0.0079]],

        [[-0.0120,  0.0189],
         [ 0.0108,  0.0006],
         [ 0.0895,  0.0079]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0529, -0.1521],
         [-0.0326, -0.2039],
         [ 0.0552,  0.0287]],

        [[ 0.0529, -0.1521],
         [-0.0326, -0.2039],
         [ 0.0552,  0.0287]],

        [[ 0.0529, -0.1521],
         [-0.0326, -0.2039],
         [ 0.0552,  0.0287]],

        [[ 0.0529, -0.1521],
         [-0.0326, -0.2039],
         [ 0.0552,  0.0287]],

        [[ 0.0529, -0.1521],
         [-0.0326, -0.2039],
         [ 0.0552,  0.0287]],

        [[ 0.0529, -0.1521],
         [-0.0326, -0.2039],
         [ 0.0552,  0.0287]],

        [[ 0.0809, -0.1522],
         [-0.0279, -0.2137],
         [ 0.0489,  0.0369]],

        [[ 0.0809, -0.1522],
         [-0.0279, -0.2137],
         [ 0.0489,  0.0369]],

        [[ 0.0809, -0.1522],
         [-0.0279, -0.2137],
         [ 0.0489,  0.0369]],

        [[ 0.0809, -0.1522],
         [-0.0279, -0.2137],
         [ 0.0489,  0.0369]],

        [[ 0.0809, -0.1522],
         [-0.0279, -0.2137],
         [ 0.0489,  0.0369]],

        [[ 0.0809, -0.1522],
         [-0.0279, -0.2137],
         [ 0.0489,  0.0369]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:05,559][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:05,564][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 12:55:05,568][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 12:55:05,601][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 12:55:05,602][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 12:55:05,602][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 12:55:05,603][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:55:05,620][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=10
[2025-01-13 12:55:05,622][train.train_model][ERROR] -   => agent_in=tensor([[ 1.5784e+03,  1.2005e+03,  7.6509e+00, -9.4134e-02],
        [ 1.5822e+03,  1.2005e+03,  7.5994e+00, -3.8534e-02],
        [ 1.5853e+03,  1.2004e+03,  7.3674e+00, -6.7346e-02],
        [ 1.5890e+03,  1.2004e+03,  7.1590e+00, -4.7056e-02],
        [ 1.5925e+03,  1.2004e+03,  6.7991e+00, -1.4286e-02],
        [ 1.5959e+03,  1.2004e+03,  6.5246e+00, -3.4483e-02]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1578.4028, 1200.5112],
        [1582.2274, 1200.4642],
        [1585.2655, 1200.4487],
        [1588.9524, 1200.4150],
        [1592.5312, 1200.3916],
        [1595.9335, 1200.3844],
        [1598.5420, 1200.3706],
        [1601.5554, 1200.3721],
        [1604.3190, 1200.3563],
        [1606.8081, 1200.3569],
        [1608.9818, 1200.3496],
        [1610.5851, 1200.3481]], device='cuda:0')
[2025-01-13 12:55:05,626][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0064, -0.0097],
         [ 0.0421, -0.0366],
         [ 0.0925,  0.0039]],

        [[ 0.0064, -0.0097],
         [ 0.0421, -0.0366],
         [ 0.0925,  0.0039]],

        [[ 0.0064, -0.0097],
         [ 0.0421, -0.0366],
         [ 0.0925,  0.0039]],

        [[ 0.0064, -0.0097],
         [ 0.0421, -0.0366],
         [ 0.0925,  0.0039]],

        [[ 0.0064, -0.0097],
         [ 0.0421, -0.0366],
         [ 0.0925,  0.0039]],

        [[ 0.0064, -0.0097],
         [ 0.0421, -0.0366],
         [ 0.0925,  0.0039]],

        [[-0.0203,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0886,  0.0048]],

        [[-0.0203,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0886,  0.0048]],

        [[-0.0203,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0886,  0.0048]],

        [[-0.0203,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0886,  0.0048]],

        [[-0.0203,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0886,  0.0048]],

        [[-0.0203,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0886,  0.0048]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0238, -0.1189],
         [-0.0168, -0.2502],
         [ 0.0613,  0.0294]],

        [[ 0.0238, -0.1189],
         [-0.0168, -0.2502],
         [ 0.0613,  0.0294]],

        [[ 0.0238, -0.1189],
         [-0.0168, -0.2502],
         [ 0.0613,  0.0294]],

        [[ 0.0238, -0.1189],
         [-0.0168, -0.2502],
         [ 0.0613,  0.0294]],

        [[ 0.0238, -0.1189],
         [-0.0168, -0.2502],
         [ 0.0613,  0.0294]],

        [[ 0.0238, -0.1189],
         [-0.0168, -0.2502],
         [ 0.0613,  0.0294]],

        [[ 0.0621, -0.1220],
         [-0.0123, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0123, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0123, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0123, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0123, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0123, -0.2502],
         [ 0.0483,  0.0321]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:05,627][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:08,924][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:08,930][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:08,974][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:08,975][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:08,975][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:08,976][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:09,000][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=0
[2025-01-13 12:55:09,003][train.train_model][ERROR] -   => agent_in=tensor([[ 873.2697, 1867.5603,   -5.7234,    3.5980],
        [ 870.4088, 1869.3589,   -5.6397,    3.5708],
        [ 867.5896, 1871.1438,   -5.4182,    3.4254],
        [ 864.8811, 1872.8562,   -5.2736,    3.3171],
        [ 862.2451, 1874.5143,   -5.0552,    3.1200],
        [ 859.4662, 1876.2294,   -4.8648,    2.9810]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 873.2697, 1867.5603],
        [ 870.4088, 1869.3589],
        [ 867.5896, 1871.1438],
        [ 864.8811, 1872.8562],
        [ 862.2451, 1874.5143],
        [ 859.4662, 1876.2294],
        [ 857.0346, 1877.7194],
        [ 854.7612, 1879.0966],
        [ 852.5053, 1880.4707],
        [ 850.4337, 1881.7307],
        [ 848.0394, 1883.2101],
        [ 845.4049, 1884.8805]], device='cuda:0')
[2025-01-13 12:55:09,007][train.train_model][ERROR] -   => pi=tensor([[0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031]], device='cuda:0') mu=tensor([[[ 0.0166, -0.0171],
         [ 0.0306, -0.0061],
         [ 0.0938,  0.0119]],

        [[ 0.0166, -0.0171],
         [ 0.0306, -0.0061],
         [ 0.0938,  0.0119]],

        [[ 0.0166, -0.0171],
         [ 0.0306, -0.0061],
         [ 0.0938,  0.0119]],

        [[ 0.0166, -0.0171],
         [ 0.0306, -0.0061],
         [ 0.0938,  0.0119]],

        [[ 0.0166, -0.0171],
         [ 0.0306, -0.0061],
         [ 0.0938,  0.0119]],

        [[ 0.0166, -0.0171],
         [ 0.0306, -0.0061],
         [ 0.0938,  0.0119]],

        [[-0.0124,  0.0191],
         [ 0.0104,  0.0008],
         [ 0.0892,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0104,  0.0008],
         [ 0.0892,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0104,  0.0008],
         [ 0.0892,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0104,  0.0008],
         [ 0.0892,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0104,  0.0008],
         [ 0.0892,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0104,  0.0008],
         [ 0.0892,  0.0075]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0524, -0.1523],
         [-0.0326, -0.2040],
         [ 0.0558,  0.0288]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2040],
         [ 0.0558,  0.0288]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2040],
         [ 0.0558,  0.0288]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2040],
         [ 0.0558,  0.0288]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2040],
         [ 0.0558,  0.0288]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2040],
         [ 0.0558,  0.0288]],

        [[ 0.0806, -0.1523],
         [-0.0278, -0.2139],
         [ 0.0493,  0.0368]],

        [[ 0.0806, -0.1523],
         [-0.0278, -0.2139],
         [ 0.0493,  0.0368]],

        [[ 0.0806, -0.1523],
         [-0.0278, -0.2139],
         [ 0.0493,  0.0368]],

        [[ 0.0806, -0.1523],
         [-0.0278, -0.2139],
         [ 0.0493,  0.0368]],

        [[ 0.0806, -0.1523],
         [-0.0278, -0.2139],
         [ 0.0493,  0.0368]],

        [[ 0.0806, -0.1523],
         [-0.0278, -0.2139],
         [ 0.0493,  0.0368]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:55:09,009][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:09,011][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:09,041][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:09,042][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:09,042][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:09,043][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:09,076][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=1
[2025-01-13 12:55:09,077][train.train_model][ERROR] -   => agent_in=tensor([[ 3.9609e+02,  1.1474e+03, -1.2863e-04,  8.5636e-05],
        [ 3.9609e+02,  1.1474e+03, -1.0998e-04,  7.4718e-05],
        [ 3.9609e+02,  1.1474e+03, -8.6321e-05,  8.2352e-05],
        [ 3.9609e+02,  1.1474e+03, -1.1263e-04, -1.2039e-05],
        [ 3.9609e+02,  1.1474e+03, -8.9997e-05,  4.4610e-06],
        [ 3.9609e+02,  1.1474e+03, -5.2940e-05,  5.6597e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 396.0914, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0910, 1147.3601],
        [ 396.0910, 1147.3601]], device='cuda:0')
[2025-01-13 12:55:09,081][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005]], device='cuda:0') mu=tensor([[[ 0.0027, -0.0326],
         [ 0.0211, -0.0117],
         [ 0.0984,  0.0163]],

        [[ 0.0027, -0.0326],
         [ 0.0211, -0.0117],
         [ 0.0984,  0.0163]],

        [[ 0.0027, -0.0326],
         [ 0.0211, -0.0117],
         [ 0.0984,  0.0163]],

        [[ 0.0027, -0.0326],
         [ 0.0211, -0.0117],
         [ 0.0984,  0.0163]],

        [[ 0.0027, -0.0326],
         [ 0.0211, -0.0117],
         [ 0.0984,  0.0163]],

        [[ 0.0027, -0.0326],
         [ 0.0211, -0.0117],
         [ 0.0984,  0.0163]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0054]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0054]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0419, -0.1583],
         [-0.0385, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0419, -0.1583],
         [-0.0385, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0419, -0.1583],
         [-0.0385, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0419, -0.1583],
         [-0.0385, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0419, -0.1583],
         [-0.0385, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0419, -0.1583],
         [-0.0385, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0648, -0.1561],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:55:09,083][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 12:55:09,085][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 12:55:09,111][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 12:55:09,111][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 12:55:09,111][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 12:55:09,113][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:55:09,137][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=2
[2025-01-13 12:55:09,139][train.train_model][ERROR] -   => agent_in=tensor([[ 1.2170e+03,  2.7927e+03, -8.0835e-01,  6.7101e-01],
        [ 1.2166e+03,  2.7931e+03, -5.6761e-01,  4.6959e-01],
        [ 1.2163e+03,  2.7933e+03, -1.6878e-01,  1.3934e-01],
        [ 1.2162e+03,  2.7934e+03,  3.6582e-02, -2.6921e-02],
        [ 1.2162e+03,  2.7934e+03,  7.5744e-03, -3.5029e-03],
        [ 1.2162e+03,  2.7934e+03,  1.0428e-03,  1.4729e-03]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1216.9841, 2792.7312],
        [1216.5796, 2793.0671],
        [1216.2955, 2793.3020],
        [1216.2112, 2793.3716],
        [1216.2294, 2793.3582],
        [1216.2332, 2793.3564],
        [1216.2338, 2793.3572],
        [1216.2341, 2793.3579],
        [1216.2346, 2793.3584],
        [1216.2350, 2793.3589],
        [1216.1223, 2793.4521],
        [1215.7076, 2793.7937]], device='cuda:0')
[2025-01-13 12:55:09,143][train.train_model][ERROR] -   => pi=tensor([[0.3308, 0.3680, 0.3013],
        [0.3308, 0.3680, 0.3013],
        [0.3308, 0.3680, 0.3013],
        [0.3308, 0.3680, 0.3013],
        [0.3308, 0.3680, 0.3013],
        [0.3308, 0.3680, 0.3013],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016]], device='cuda:0') mu=tensor([[[ 0.0155, -0.0188],
         [ 0.0282, -0.0099],
         [ 0.0916,  0.0155]],

        [[ 0.0155, -0.0188],
         [ 0.0282, -0.0099],
         [ 0.0916,  0.0155]],

        [[ 0.0155, -0.0188],
         [ 0.0282, -0.0099],
         [ 0.0916,  0.0155]],

        [[ 0.0155, -0.0188],
         [ 0.0282, -0.0099],
         [ 0.0916,  0.0155]],

        [[ 0.0155, -0.0188],
         [ 0.0282, -0.0099],
         [ 0.0916,  0.0155]],

        [[ 0.0155, -0.0188],
         [ 0.0282, -0.0099],
         [ 0.0916,  0.0155]],

        [[-0.0112,  0.0164],
         [ 0.0085, -0.0036],
         [ 0.0870,  0.0106]],

        [[-0.0112,  0.0164],
         [ 0.0085, -0.0036],
         [ 0.0870,  0.0106]],

        [[-0.0112,  0.0164],
         [ 0.0085, -0.0036],
         [ 0.0870,  0.0106]],

        [[-0.0112,  0.0164],
         [ 0.0085, -0.0036],
         [ 0.0870,  0.0106]],

        [[-0.0112,  0.0164],
         [ 0.0085, -0.0036],
         [ 0.0870,  0.0106]],

        [[-0.0112,  0.0164],
         [ 0.0085, -0.0036],
         [ 0.0870,  0.0106]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0593, -0.1493],
         [-0.0347, -0.1995],
         [ 0.0550,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1995],
         [ 0.0550,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1995],
         [ 0.0550,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1995],
         [ 0.0550,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1995],
         [ 0.0550,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1995],
         [ 0.0550,  0.0294]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2090],
         [ 0.0490,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2090],
         [ 0.0490,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2090],
         [ 0.0490,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2090],
         [ 0.0490,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2090],
         [ 0.0490,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2090],
         [ 0.0490,  0.0377]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:55:09,144][train.train_model][WARNING] - No valid samples found in validation.
[2025-01-13 12:55:39,134][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:39,141][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:39,188][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:39,189][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:39,189][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:39,191][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:39,214][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=0
[2025-01-13 12:55:39,216][train.train_model][ERROR] -   => agent_in=tensor([[ 347.5447, 1035.6626,   -2.8878,   -6.7530],
        [ 346.1012, 1032.2871,   -3.1309,   -7.4075],
        [ 344.5361, 1028.5842,   -3.3958,   -8.1402],
        [ 342.8368, 1024.5107,   -3.6568,   -8.7497],
        [ 341.0089, 1020.1370,   -3.7876,   -8.9540],
        [ 339.1155, 1015.6609,   -4.0491,   -9.5325]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 347.5447, 1035.6626],
        [ 346.1012, 1032.2871],
        [ 344.5361, 1028.5842],
        [ 342.8368, 1024.5107],
        [ 341.0089, 1020.1370],
        [ 339.1155, 1015.6609],
        [ 337.0892, 1010.8906],
        [ 334.5249, 1004.8762],
        [ 332.2867,  999.5982],
        [ 329.9869,  994.1826],
        [ 327.6602,  988.7181],
        [ 325.2449,  983.1297]], device='cuda:0')
[2025-01-13 12:55:39,220][train.train_model][ERROR] -   => pi=tensor([[0.3322, 0.3672, 0.3006],
        [0.3322, 0.3672, 0.3006],
        [0.3322, 0.3672, 0.3006],
        [0.3322, 0.3672, 0.3006],
        [0.3322, 0.3672, 0.3006],
        [0.3322, 0.3672, 0.3006],
        [0.3326, 0.3670, 0.3004],
        [0.3326, 0.3670, 0.3004],
        [0.3326, 0.3670, 0.3004],
        [0.3326, 0.3670, 0.3004],
        [0.3326, 0.3670, 0.3004],
        [0.3326, 0.3670, 0.3004]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0016, -0.0320],
         [ 0.0217, -0.0123],
         [ 0.0985,  0.0165]],

        [[ 0.0016, -0.0320],
         [ 0.0217, -0.0123],
         [ 0.0985,  0.0165]],

        [[ 0.0016, -0.0320],
         [ 0.0217, -0.0123],
         [ 0.0985,  0.0165]],

        [[ 0.0016, -0.0320],
         [ 0.0217, -0.0123],
         [ 0.0985,  0.0165]],

        [[ 0.0016, -0.0320],
         [ 0.0217, -0.0123],
         [ 0.0985,  0.0165]],

        [[ 0.0016, -0.0320],
         [ 0.0217, -0.0123],
         [ 0.0985,  0.0165]],

        [[-0.0234,  0.0057],
         [-0.0021, -0.0022],
         [ 0.0980,  0.0060]],

        [[-0.0234,  0.0057],
         [-0.0021, -0.0022],
         [ 0.0980,  0.0060]],

        [[-0.0234,  0.0057],
         [-0.0021, -0.0022],
         [ 0.0980,  0.0060]],

        [[-0.0234,  0.0057],
         [-0.0021, -0.0022],
         [ 0.0980,  0.0060]],

        [[-0.0234,  0.0057],
         [-0.0021, -0.0022],
         [ 0.0980,  0.0060]],

        [[-0.0234,  0.0057],
         [-0.0021, -0.0022],
         [ 0.0980,  0.0060]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0402, -0.1591],
         [-0.0378, -0.1887],
         [ 0.0296,  0.0222]],

        [[ 0.0402, -0.1591],
         [-0.0378, -0.1887],
         [ 0.0296,  0.0222]],

        [[ 0.0402, -0.1591],
         [-0.0378, -0.1887],
         [ 0.0296,  0.0222]],

        [[ 0.0402, -0.1591],
         [-0.0378, -0.1887],
         [ 0.0296,  0.0222]],

        [[ 0.0402, -0.1591],
         [-0.0378, -0.1887],
         [ 0.0296,  0.0222]],

        [[ 0.0402, -0.1591],
         [-0.0378, -0.1887],
         [ 0.0296,  0.0222]],

        [[ 0.0636, -0.1570],
         [-0.0325, -0.2012],
         [ 0.0295,  0.0328]],

        [[ 0.0636, -0.1570],
         [-0.0325, -0.2012],
         [ 0.0295,  0.0328]],

        [[ 0.0636, -0.1570],
         [-0.0325, -0.2012],
         [ 0.0295,  0.0328]],

        [[ 0.0636, -0.1570],
         [-0.0325, -0.2012],
         [ 0.0295,  0.0328]],

        [[ 0.0636, -0.1570],
         [-0.0325, -0.2012],
         [ 0.0295,  0.0328]],

        [[ 0.0636, -0.1570],
         [-0.0325, -0.2012],
         [ 0.0295,  0.0328]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:39,221][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:39,226][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:39,228][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:39,259][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:39,260][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:39,260][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:39,261][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:39,294][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=1
[2025-01-13 12:55:39,295][train.train_model][ERROR] -   => agent_in=tensor([[ 853.3978, 1311.7261,   -4.8847,   -4.4066],
        [ 850.9561, 1309.5233,   -4.3247,   -4.1047],
        [ 848.7943, 1307.4716,   -4.1567,   -4.3435],
        [ 846.7139, 1305.2976,   -3.1860,   -4.0214],
        [ 845.1197, 1303.2854,   -2.4716,   -4.0279],
        [ 843.8856, 1301.2740,   -1.7914,   -3.9610]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 853.3978, 1311.7261],
        [ 850.9561, 1309.5233],
        [ 848.7943, 1307.4716],
        [ 846.7139, 1305.2976],
        [ 845.1197, 1303.2854],
        [ 843.8856, 1301.2740],
        [ 842.9910, 1299.2963],
        [ 842.4048, 1297.4437],
        [ 842.0880, 1295.7667],
        [ 842.0160, 1294.2428],
        [ 842.0981, 1293.1112],
        [ 842.3857, 1291.6929]], device='cuda:0')
[2025-01-13 12:55:39,299][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3320, 0.3655, 0.3025],
        [0.3313, 0.3635, 0.3051],
        [0.3313, 0.3635, 0.3051],
        [0.3313, 0.3635, 0.3051],
        [0.3313, 0.3635, 0.3051],
        [0.3313, 0.3635, 0.3051],
        [0.3313, 0.3635, 0.3051]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0142, -0.0120],
         [ 0.0302, -0.0030],
         [ 0.0757,  0.0169]],

        [[-0.0142, -0.0120],
         [ 0.0302, -0.0030],
         [ 0.0757,  0.0169]],

        [[-0.0142, -0.0120],
         [ 0.0302, -0.0030],
         [ 0.0757,  0.0169]],

        [[-0.0142, -0.0120],
         [ 0.0302, -0.0030],
         [ 0.0757,  0.0169]],

        [[-0.0142, -0.0120],
         [ 0.0302, -0.0030],
         [ 0.0757,  0.0169]],

        [[-0.0142, -0.0120],
         [ 0.0302, -0.0030],
         [ 0.0757,  0.0169]],

        [[-0.0349,  0.0255],
         [ 0.0114, -0.0027],
         [ 0.0798,  0.0160]],

        [[-0.0349,  0.0255],
         [ 0.0114, -0.0027],
         [ 0.0798,  0.0160]],

        [[-0.0349,  0.0255],
         [ 0.0114, -0.0027],
         [ 0.0798,  0.0160]],

        [[-0.0349,  0.0255],
         [ 0.0114, -0.0027],
         [ 0.0798,  0.0160]],

        [[-0.0349,  0.0255],
         [ 0.0114, -0.0027],
         [ 0.0798,  0.0160]],

        [[-0.0349,  0.0255],
         [ 0.0114, -0.0027],
         [ 0.0798,  0.0160]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0212, -0.1349],
         [-0.0332, -0.2233],
         [ 0.0468,  0.0419]],

        [[ 0.0212, -0.1349],
         [-0.0332, -0.2233],
         [ 0.0468,  0.0419]],

        [[ 0.0212, -0.1349],
         [-0.0332, -0.2233],
         [ 0.0468,  0.0419]],

        [[ 0.0212, -0.1349],
         [-0.0332, -0.2233],
         [ 0.0468,  0.0419]],

        [[ 0.0212, -0.1349],
         [-0.0332, -0.2233],
         [ 0.0468,  0.0419]],

        [[ 0.0212, -0.1349],
         [-0.0332, -0.2233],
         [ 0.0468,  0.0419]],

        [[ 0.0615, -0.1378],
         [-0.0254, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1378],
         [-0.0254, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1378],
         [-0.0254, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1378],
         [-0.0254, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1378],
         [-0.0254, -0.2200],
         [ 0.0383,  0.0434]],

        [[ 0.0615, -0.1378],
         [-0.0254, -0.2200],
         [ 0.0383,  0.0434]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:39,300][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:39,305][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:39,307][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:39,338][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:39,339][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:39,339][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:39,340][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:39,373][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=2
[2025-01-13 12:55:39,375][train.train_model][ERROR] -   => agent_in=tensor([[ 1.4584e+03,  1.2827e+03, -3.8301e-07, -8.3947e-07],
        [ 1.4584e+03,  1.2827e+03,  2.0939e-07,  4.1706e-07],
        [ 1.4584e+03,  1.2827e+03,  5.2817e-07,  1.0406e-06],
        [ 1.4584e+03,  1.2827e+03, -7.9990e-07, -1.3812e-06],
        [ 1.4584e+03,  1.2827e+03, -2.8774e-07, -9.3672e-07],
        [ 1.4584e+03,  1.2827e+03,  2.4243e-07,  7.8014e-07]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947],
        [1458.4054, 1282.6947]], device='cuda:0')
[2025-01-13 12:55:39,379][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3700, 0.3062],
        [0.3238, 0.3700, 0.3062],
        [0.3238, 0.3700, 0.3062],
        [0.3238, 0.3700, 0.3062],
        [0.3238, 0.3700, 0.3062],
        [0.3238, 0.3700, 0.3062],
        [0.3234, 0.3680, 0.3086],
        [0.3234, 0.3680, 0.3086],
        [0.3234, 0.3680, 0.3086],
        [0.3234, 0.3680, 0.3086],
        [0.3234, 0.3680, 0.3086],
        [0.3234, 0.3680, 0.3086]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0020, -0.0091],
         [ 0.0431, -0.0317],
         [ 0.0895,  0.0068]],

        [[ 0.0020, -0.0091],
         [ 0.0431, -0.0317],
         [ 0.0895,  0.0068]],

        [[ 0.0020, -0.0091],
         [ 0.0431, -0.0317],
         [ 0.0895,  0.0068]],

        [[ 0.0020, -0.0091],
         [ 0.0431, -0.0317],
         [ 0.0895,  0.0068]],

        [[ 0.0020, -0.0091],
         [ 0.0431, -0.0317],
         [ 0.0895,  0.0068]],

        [[ 0.0020, -0.0091],
         [ 0.0431, -0.0317],
         [ 0.0895,  0.0068]],

        [[-0.0244,  0.0281],
         [ 0.0271, -0.0252],
         [ 0.0871,  0.0066]],

        [[-0.0244,  0.0281],
         [ 0.0271, -0.0252],
         [ 0.0871,  0.0066]],

        [[-0.0244,  0.0281],
         [ 0.0271, -0.0252],
         [ 0.0871,  0.0066]],

        [[-0.0244,  0.0281],
         [ 0.0271, -0.0252],
         [ 0.0871,  0.0066]],

        [[-0.0244,  0.0281],
         [ 0.0271, -0.0252],
         [ 0.0871,  0.0066]],

        [[-0.0244,  0.0281],
         [ 0.0271, -0.0252],
         [ 0.0871,  0.0066]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0275, -0.1157],
         [-0.0272, -0.2556],
         [ 0.0599,  0.0401]],

        [[ 0.0275, -0.1157],
         [-0.0272, -0.2556],
         [ 0.0599,  0.0401]],

        [[ 0.0275, -0.1157],
         [-0.0272, -0.2556],
         [ 0.0599,  0.0401]],

        [[ 0.0275, -0.1157],
         [-0.0272, -0.2556],
         [ 0.0599,  0.0401]],

        [[ 0.0275, -0.1157],
         [-0.0272, -0.2556],
         [ 0.0599,  0.0401]],

        [[ 0.0275, -0.1157],
         [-0.0272, -0.2556],
         [ 0.0599,  0.0401]],

        [[ 0.0667, -0.1182],
         [-0.0202, -0.2544],
         [ 0.0460,  0.0417]],

        [[ 0.0667, -0.1182],
         [-0.0202, -0.2544],
         [ 0.0460,  0.0417]],

        [[ 0.0667, -0.1182],
         [-0.0202, -0.2544],
         [ 0.0460,  0.0417]],

        [[ 0.0667, -0.1182],
         [-0.0202, -0.2544],
         [ 0.0460,  0.0417]],

        [[ 0.0667, -0.1182],
         [-0.0202, -0.2544],
         [ 0.0460,  0.0417]],

        [[ 0.0667, -0.1182],
         [-0.0202, -0.2544],
         [ 0.0460,  0.0417]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:39,379][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:39,383][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:39,385][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:39,416][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:39,416][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:39,417][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:39,418][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:39,450][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=3
[2025-01-13 12:55:39,452][train.train_model][ERROR] -   => agent_in=tensor([[1106.5254,  829.1998,    3.0899,    3.4115],
        [1108.0717,  830.9070,    2.5763,    3.0001],
        [1109.3607,  832.4081,    2.2013,    2.7123],
        [1110.2385,  833.4896,    1.9291,    2.4626],
        [1111.2028,  834.7206,    1.7697,    2.3141],
        [1112.0874,  835.8774,    1.7695,    2.3396]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1106.5254,  829.1998],
        [1108.0717,  830.9070],
        [1109.3607,  832.4081],
        [1110.2385,  833.4896],
        [1111.2028,  834.7206],
        [1112.0874,  835.8774],
        [1112.9709,  837.0455],
        [1114.1128,  838.5533],
        [1115.4939,  840.3716],
        [1117.0239,  842.3638],
        [1118.7217,  844.5534],
        [1120.6367,  847.0082]], device='cuda:0')
[2025-01-13 12:55:39,456][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0064, -0.0099],
         [ 0.0422, -0.0364],
         [ 0.0926,  0.0037]],

        [[ 0.0064, -0.0099],
         [ 0.0422, -0.0364],
         [ 0.0926,  0.0037]],

        [[ 0.0064, -0.0099],
         [ 0.0422, -0.0364],
         [ 0.0926,  0.0037]],

        [[ 0.0064, -0.0099],
         [ 0.0422, -0.0364],
         [ 0.0926,  0.0037]],

        [[ 0.0064, -0.0099],
         [ 0.0422, -0.0364],
         [ 0.0926,  0.0037]],

        [[ 0.0064, -0.0099],
         [ 0.0422, -0.0364],
         [ 0.0926,  0.0037]],

        [[-0.0204,  0.0280],
         [ 0.0276, -0.0303],
         [ 0.0887,  0.0046]],

        [[-0.0204,  0.0280],
         [ 0.0276, -0.0303],
         [ 0.0887,  0.0046]],

        [[-0.0204,  0.0280],
         [ 0.0276, -0.0303],
         [ 0.0887,  0.0046]],

        [[-0.0204,  0.0280],
         [ 0.0276, -0.0303],
         [ 0.0887,  0.0046]],

        [[-0.0204,  0.0280],
         [ 0.0276, -0.0303],
         [ 0.0887,  0.0046]],

        [[-0.0204,  0.0280],
         [ 0.0276, -0.0303],
         [ 0.0887,  0.0046]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0237, -0.1188],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0293]],

        [[ 0.0237, -0.1188],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0293]],

        [[ 0.0237, -0.1188],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0293]],

        [[ 0.0237, -0.1188],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0293]],

        [[ 0.0237, -0.1188],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0293]],

        [[ 0.0237, -0.1188],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0293]],

        [[ 0.0621, -0.1218],
         [-0.0123, -0.2502],
         [ 0.0484,  0.0320]],

        [[ 0.0621, -0.1218],
         [-0.0123, -0.2502],
         [ 0.0484,  0.0320]],

        [[ 0.0621, -0.1218],
         [-0.0123, -0.2502],
         [ 0.0484,  0.0320]],

        [[ 0.0621, -0.1218],
         [-0.0123, -0.2502],
         [ 0.0484,  0.0320]],

        [[ 0.0621, -0.1218],
         [-0.0123, -0.2502],
         [ 0.0484,  0.0320]],

        [[ 0.0621, -0.1218],
         [-0.0123, -0.2502],
         [ 0.0484,  0.0320]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:39,456][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:41,577][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:41,579][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:41,611][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:41,611][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:41,611][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:41,613][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:41,645][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=4
[2025-01-13 12:55:41,647][train.train_model][ERROR] -   => agent_in=tensor([[ 597.5447, 1602.8185,   -4.6484,    8.0893],
        [ 595.4575, 1606.4507,   -4.6530,    8.1223],
        [ 593.1316, 1610.5106,   -4.7750,    8.2005],
        [ 590.5044, 1615.0225,   -4.9880,    8.2922],
        [ 588.0054, 1619.1769,   -5.1640,    8.1888],
        [ 585.4241, 1623.2703,   -5.2007,    8.0534]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 597.5447, 1602.8185],
        [ 595.4575, 1606.4507],
        [ 593.1316, 1610.5106],
        [ 590.5044, 1615.0225],
        [ 588.0054, 1619.1769],
        [ 585.4241, 1623.2703],
        [ 582.8214, 1627.3005],
        [ 580.2190, 1631.2343],
        [ 577.5049, 1635.2966],
        [ 574.7446, 1639.3062],
        [ 572.0297, 1643.2300],
        [ 569.3866, 1647.0492]], device='cuda:0')
[2025-01-13 12:55:41,651][train.train_model][ERROR] -   => pi=tensor([[0.3316, 0.3669, 0.3015],
        [0.3316, 0.3669, 0.3015],
        [0.3316, 0.3669, 0.3015],
        [0.3316, 0.3669, 0.3015],
        [0.3316, 0.3669, 0.3015],
        [0.3316, 0.3669, 0.3015],
        [0.3320, 0.3670, 0.3010],
        [0.3320, 0.3670, 0.3010],
        [0.3320, 0.3670, 0.3010],
        [0.3320, 0.3670, 0.3010],
        [0.3320, 0.3670, 0.3010],
        [0.3320, 0.3670, 0.3010]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0053, -0.0331],
         [ 0.0201, -0.0098],
         [ 0.0978,  0.0157]],

        [[ 0.0053, -0.0331],
         [ 0.0201, -0.0098],
         [ 0.0978,  0.0157]],

        [[ 0.0053, -0.0331],
         [ 0.0201, -0.0098],
         [ 0.0978,  0.0157]],

        [[ 0.0053, -0.0331],
         [ 0.0201, -0.0098],
         [ 0.0978,  0.0157]],

        [[ 0.0053, -0.0331],
         [ 0.0201, -0.0098],
         [ 0.0978,  0.0157]],

        [[ 0.0053, -0.0331],
         [ 0.0201, -0.0098],
         [ 0.0978,  0.0157]],

        [[-0.0202,  0.0056],
         [-0.0049,  0.0018],
         [ 0.0975,  0.0039]],

        [[-0.0202,  0.0056],
         [-0.0049,  0.0018],
         [ 0.0975,  0.0039]],

        [[-0.0202,  0.0056],
         [-0.0049,  0.0018],
         [ 0.0975,  0.0039]],

        [[-0.0202,  0.0056],
         [-0.0049,  0.0018],
         [ 0.0975,  0.0039]],

        [[-0.0202,  0.0056],
         [-0.0049,  0.0018],
         [ 0.0975,  0.0039]],

        [[-0.0202,  0.0056],
         [-0.0049,  0.0018],
         [ 0.0975,  0.0039]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0457, -0.1565],
         [-0.0398, -0.1854],
         [ 0.0342,  0.0240]],

        [[ 0.0457, -0.1565],
         [-0.0398, -0.1854],
         [ 0.0342,  0.0240]],

        [[ 0.0457, -0.1565],
         [-0.0398, -0.1854],
         [ 0.0342,  0.0240]],

        [[ 0.0457, -0.1565],
         [-0.0398, -0.1854],
         [ 0.0342,  0.0240]],

        [[ 0.0457, -0.1565],
         [-0.0398, -0.1854],
         [ 0.0342,  0.0240]],

        [[ 0.0457, -0.1565],
         [-0.0398, -0.1854],
         [ 0.0342,  0.0240]],

        [[ 0.0680, -0.1544],
         [-0.0343, -0.1992],
         [ 0.0344,  0.0347]],

        [[ 0.0680, -0.1544],
         [-0.0343, -0.1992],
         [ 0.0344,  0.0347]],

        [[ 0.0680, -0.1544],
         [-0.0343, -0.1992],
         [ 0.0344,  0.0347]],

        [[ 0.0680, -0.1544],
         [-0.0343, -0.1992],
         [ 0.0344,  0.0347]],

        [[ 0.0680, -0.1544],
         [-0.0343, -0.1992],
         [ 0.0344,  0.0347]],

        [[ 0.0680, -0.1544],
         [-0.0343, -0.1992],
         [ 0.0344,  0.0347]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:41,651][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:41,655][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:41,657][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:41,687][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:41,688][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:41,688][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:41,690][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:41,722][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=5
[2025-01-13 12:55:41,724][train.train_model][ERROR] -   => agent_in=tensor([[1789.6860, 1135.1522,   -4.4293,   -3.9681],
        [1787.4744, 1133.1709,   -4.2188,   -4.1631],
        [1785.3632, 1131.0876,   -4.0990,   -4.4108],
        [1783.3096, 1128.8779,   -4.0683,   -4.7070],
        [1781.2737, 1126.5225,   -3.9254,   -4.8493],
        [1779.3093, 1124.0957,   -4.1548,   -5.4544]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1789.6860, 1135.1522],
        [1787.4744, 1133.1709],
        [1785.3632, 1131.0876],
        [1783.3096, 1128.8779],
        [1781.2737, 1126.5225],
        [1779.3093, 1124.0957],
        [1777.2322, 1121.3689],
        [1775.2379, 1118.6632],
        [1773.2834, 1115.9574],
        [1771.2474, 1113.0961],
        [1769.6803, 1110.8782],
        [1767.7559, 1108.1364]], device='cuda:0')
[2025-01-13 12:55:41,728][train.train_model][ERROR] -   => pi=tensor([[0.3285, 0.3694, 0.3021],
        [0.3285, 0.3694, 0.3021],
        [0.3285, 0.3694, 0.3021],
        [0.3285, 0.3694, 0.3021],
        [0.3285, 0.3694, 0.3021],
        [0.3285, 0.3694, 0.3021],
        [0.3280, 0.3686, 0.3034],
        [0.3280, 0.3686, 0.3034],
        [0.3280, 0.3686, 0.3034],
        [0.3280, 0.3686, 0.3034],
        [0.3280, 0.3686, 0.3034],
        [0.3280, 0.3686, 0.3034]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0168, -0.0159],
         [ 0.0408, -0.0264],
         [ 0.1050,  0.0370]],

        [[-0.0168, -0.0159],
         [ 0.0408, -0.0264],
         [ 0.1050,  0.0370]],

        [[-0.0168, -0.0159],
         [ 0.0408, -0.0264],
         [ 0.1050,  0.0370]],

        [[-0.0168, -0.0159],
         [ 0.0408, -0.0264],
         [ 0.1050,  0.0370]],

        [[-0.0168, -0.0159],
         [ 0.0408, -0.0264],
         [ 0.1050,  0.0370]],

        [[-0.0168, -0.0159],
         [ 0.0408, -0.0264],
         [ 0.1050,  0.0370]],

        [[-0.0356,  0.0132],
         [ 0.0271, -0.0243],
         [ 0.1016,  0.0393]],

        [[-0.0356,  0.0132],
         [ 0.0271, -0.0243],
         [ 0.1016,  0.0393]],

        [[-0.0356,  0.0132],
         [ 0.0271, -0.0243],
         [ 0.1016,  0.0393]],

        [[-0.0356,  0.0132],
         [ 0.0271, -0.0243],
         [ 0.1016,  0.0393]],

        [[-0.0356,  0.0132],
         [ 0.0271, -0.0243],
         [ 0.1016,  0.0393]],

        [[-0.0356,  0.0132],
         [ 0.0271, -0.0243],
         [ 0.1016,  0.0393]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0104, -0.0807],
         [-0.0136, -0.2534],
         [ 0.0569,  0.0387]],

        [[ 0.0104, -0.0807],
         [-0.0136, -0.2534],
         [ 0.0569,  0.0387]],

        [[ 0.0104, -0.0807],
         [-0.0136, -0.2534],
         [ 0.0569,  0.0387]],

        [[ 0.0104, -0.0807],
         [-0.0136, -0.2534],
         [ 0.0569,  0.0387]],

        [[ 0.0104, -0.0807],
         [-0.0136, -0.2534],
         [ 0.0569,  0.0387]],

        [[ 0.0104, -0.0807],
         [-0.0136, -0.2534],
         [ 0.0569,  0.0387]],

        [[ 0.0435, -0.0843],
         [-0.0095, -0.2479],
         [ 0.0435,  0.0383]],

        [[ 0.0435, -0.0843],
         [-0.0095, -0.2479],
         [ 0.0435,  0.0383]],

        [[ 0.0435, -0.0843],
         [-0.0095, -0.2479],
         [ 0.0435,  0.0383]],

        [[ 0.0435, -0.0843],
         [-0.0095, -0.2479],
         [ 0.0435,  0.0383]],

        [[ 0.0435, -0.0843],
         [-0.0095, -0.2479],
         [ 0.0435,  0.0383]],

        [[ 0.0435, -0.0843],
         [-0.0095, -0.2479],
         [ 0.0435,  0.0383]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:41,728][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:41,732][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:41,734][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:41,765][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:41,765][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:41,765][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:41,767][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:41,799][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=6
[2025-01-13 12:55:41,801][train.train_model][ERROR] -   => agent_in=tensor([[ 6.1327e+02,  1.4520e+03,  4.3943e-03, -1.2194e-03],
        [ 6.1327e+02,  1.4520e+03,  3.6888e-03, -1.0444e-03],
        [ 6.1327e+02,  1.4520e+03,  3.1170e-03, -8.8613e-04],
        [ 6.1327e+02,  1.4520e+03,  2.6477e-03, -7.4997e-04],
        [ 6.1327e+02,  1.4520e+03,  2.2577e-03, -6.3901e-04],
        [ 6.1327e+02,  1.4520e+03,  1.9240e-03, -5.5003e-04]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 613.2664, 1452.0096],
        [ 613.2686, 1452.0090],
        [ 613.2704, 1452.0085],
        [ 613.2720, 1452.0081],
        [ 613.2733, 1452.0077],
        [ 613.2745, 1452.0073],
        [ 613.2754, 1452.0071],
        [ 613.2859, 1452.0421],
        [ 613.3214, 1452.1688],
        [ 613.4037, 1452.4653],
        [ 613.5294, 1452.9031],
        [ 613.7063, 1453.5062]], device='cuda:0')
[2025-01-13 12:55:41,805][train.train_model][ERROR] -   => pi=tensor([[0.3309, 0.3694, 0.2997],
        [0.3309, 0.3694, 0.2997],
        [0.3309, 0.3694, 0.2997],
        [0.3309, 0.3694, 0.2997],
        [0.3309, 0.3694, 0.2997],
        [0.3309, 0.3694, 0.2997],
        [0.3312, 0.3684, 0.3004],
        [0.3312, 0.3684, 0.3004],
        [0.3312, 0.3684, 0.3004],
        [0.3312, 0.3684, 0.3004],
        [0.3312, 0.3684, 0.3004],
        [0.3312, 0.3684, 0.3004]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0133, -0.0232],
         [ 0.0264, -0.0145],
         [ 0.0918,  0.0126]],

        [[ 0.0133, -0.0232],
         [ 0.0264, -0.0145],
         [ 0.0918,  0.0126]],

        [[ 0.0133, -0.0232],
         [ 0.0264, -0.0145],
         [ 0.0918,  0.0126]],

        [[ 0.0133, -0.0232],
         [ 0.0264, -0.0145],
         [ 0.0918,  0.0126]],

        [[ 0.0133, -0.0232],
         [ 0.0264, -0.0145],
         [ 0.0918,  0.0126]],

        [[ 0.0133, -0.0232],
         [ 0.0264, -0.0145],
         [ 0.0918,  0.0126]],

        [[-0.0134,  0.0130],
         [ 0.0083, -0.0077],
         [ 0.0871,  0.0079]],

        [[-0.0134,  0.0130],
         [ 0.0083, -0.0077],
         [ 0.0871,  0.0079]],

        [[-0.0134,  0.0130],
         [ 0.0083, -0.0077],
         [ 0.0871,  0.0079]],

        [[-0.0134,  0.0130],
         [ 0.0083, -0.0077],
         [ 0.0871,  0.0079]],

        [[-0.0134,  0.0130],
         [ 0.0083, -0.0077],
         [ 0.0871,  0.0079]],

        [[-0.0134,  0.0130],
         [ 0.0083, -0.0077],
         [ 0.0871,  0.0079]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0537, -0.1550],
         [-0.0327, -0.1990],
         [ 0.0500,  0.0246]],

        [[ 0.0537, -0.1550],
         [-0.0327, -0.1990],
         [ 0.0500,  0.0246]],

        [[ 0.0537, -0.1550],
         [-0.0327, -0.1990],
         [ 0.0500,  0.0246]],

        [[ 0.0537, -0.1550],
         [-0.0327, -0.1990],
         [ 0.0500,  0.0246]],

        [[ 0.0537, -0.1550],
         [-0.0327, -0.1990],
         [ 0.0500,  0.0246]],

        [[ 0.0537, -0.1550],
         [-0.0327, -0.1990],
         [ 0.0500,  0.0246]],

        [[ 0.0817, -0.1543],
         [-0.0276, -0.2080],
         [ 0.0437,  0.0330]],

        [[ 0.0817, -0.1543],
         [-0.0276, -0.2080],
         [ 0.0437,  0.0330]],

        [[ 0.0817, -0.1543],
         [-0.0276, -0.2080],
         [ 0.0437,  0.0330]],

        [[ 0.0817, -0.1543],
         [-0.0276, -0.2080],
         [ 0.0437,  0.0330]],

        [[ 0.0817, -0.1543],
         [-0.0276, -0.2080],
         [ 0.0437,  0.0330]],

        [[ 0.0817, -0.1543],
         [-0.0276, -0.2080],
         [ 0.0437,  0.0330]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:41,805][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:41,809][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:41,812][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:41,842][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:41,843][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:41,843][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:41,844][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:41,877][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=7
[2025-01-13 12:55:41,879][train.train_model][ERROR] -   => agent_in=tensor([[ 2.6763e+02,  9.1233e+02, -6.3363e-01,  5.9856e-02],
        [ 2.6731e+02,  9.1236e+02, -2.7036e-01,  3.0884e-02],
        [ 2.6718e+02,  9.1238e+02, -1.7861e-01,  2.0198e-02],
        [ 2.6710e+02,  9.1239e+02, -3.3028e-01,  2.8394e-02],
        [ 2.6693e+02,  9.1240e+02, -6.7436e-01,  5.1660e-02],
        [ 2.6660e+02,  9.1243e+02, -1.1136e+00,  7.8153e-02]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[267.6306, 912.3341],
        [267.3138, 912.3640],
        [267.1787, 912.3795],
        [267.0982, 912.3885],
        [266.9331, 912.4027],
        [266.5956, 912.4286],
        [266.1511, 912.4598],
        [265.1493, 912.5190],
        [264.2171, 912.5745],
        [262.7971, 912.6556],
        [261.1916, 912.7554],
        [259.3793, 912.8797]], device='cuda:0')
[2025-01-13 12:55:41,883][train.train_model][ERROR] -   => pi=tensor([[0.3310, 0.3716, 0.2974],
        [0.3310, 0.3716, 0.2974],
        [0.3310, 0.3716, 0.2974],
        [0.3310, 0.3716, 0.2974],
        [0.3310, 0.3716, 0.2974],
        [0.3310, 0.3716, 0.2974],
        [0.3307, 0.3721, 0.2972],
        [0.3307, 0.3721, 0.2972],
        [0.3307, 0.3721, 0.2972],
        [0.3307, 0.3721, 0.2972],
        [0.3307, 0.3721, 0.2972],
        [0.3307, 0.3721, 0.2972]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0166, -0.0320],
         [ 0.0149, -0.0111],
         [ 0.0944,  0.0233]],

        [[-0.0166, -0.0320],
         [ 0.0149, -0.0111],
         [ 0.0944,  0.0233]],

        [[-0.0166, -0.0320],
         [ 0.0149, -0.0111],
         [ 0.0944,  0.0233]],

        [[-0.0166, -0.0320],
         [ 0.0149, -0.0111],
         [ 0.0944,  0.0233]],

        [[-0.0166, -0.0320],
         [ 0.0149, -0.0111],
         [ 0.0944,  0.0233]],

        [[-0.0166, -0.0320],
         [ 0.0149, -0.0111],
         [ 0.0944,  0.0233]],

        [[-0.0399, -0.0005],
         [-0.0070, -0.0001],
         [ 0.0904,  0.0139]],

        [[-0.0399, -0.0005],
         [-0.0070, -0.0001],
         [ 0.0904,  0.0139]],

        [[-0.0399, -0.0005],
         [-0.0070, -0.0001],
         [ 0.0904,  0.0139]],

        [[-0.0399, -0.0005],
         [-0.0070, -0.0001],
         [ 0.0904,  0.0139]],

        [[-0.0399, -0.0005],
         [-0.0070, -0.0001],
         [ 0.0904,  0.0139]],

        [[-0.0399, -0.0005],
         [-0.0070, -0.0001],
         [ 0.0904,  0.0139]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0218, -0.1665],
         [-0.0384, -0.2084],
         [ 0.0231,  0.0242]],

        [[ 0.0218, -0.1665],
         [-0.0384, -0.2084],
         [ 0.0231,  0.0242]],

        [[ 0.0218, -0.1665],
         [-0.0384, -0.2084],
         [ 0.0231,  0.0242]],

        [[ 0.0218, -0.1665],
         [-0.0384, -0.2084],
         [ 0.0231,  0.0242]],

        [[ 0.0218, -0.1665],
         [-0.0384, -0.2084],
         [ 0.0231,  0.0242]],

        [[ 0.0218, -0.1665],
         [-0.0384, -0.2084],
         [ 0.0231,  0.0242]],

        [[ 0.0467, -0.1656],
         [-0.0299, -0.2145],
         [ 0.0186,  0.0345]],

        [[ 0.0467, -0.1656],
         [-0.0299, -0.2145],
         [ 0.0186,  0.0345]],

        [[ 0.0467, -0.1656],
         [-0.0299, -0.2145],
         [ 0.0186,  0.0345]],

        [[ 0.0467, -0.1656],
         [-0.0299, -0.2145],
         [ 0.0186,  0.0345]],

        [[ 0.0467, -0.1656],
         [-0.0299, -0.2145],
         [ 0.0186,  0.0345]],

        [[ 0.0467, -0.1656],
         [-0.0299, -0.2145],
         [ 0.0186,  0.0345]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:41,883][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:44,000][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:44,002][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:44,034][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:44,035][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:44,035][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:44,036][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:44,069][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=8
[2025-01-13 12:55:44,071][train.train_model][ERROR] -   => agent_in=tensor([[ 485.1930, 1076.0155,    5.8948,   -2.0867],
        [ 488.1397, 1074.9724,    5.4593,   -1.5255],
        [ 490.8718, 1074.2090,    5.0036,   -1.3209],
        [ 492.8749, 1073.6802,    4.8726,   -1.4614],
        [ 495.3080, 1072.9504,    4.8090,   -1.6957],
        [ 497.7092, 1072.1038,    5.0083,   -1.9221]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 485.1930, 1076.0155],
        [ 488.1397, 1074.9724],
        [ 490.8718, 1074.2090],
        [ 492.8749, 1073.6802],
        [ 495.3080, 1072.9504],
        [ 497.7092, 1072.1038],
        [ 500.2158, 1071.1417],
        [ 502.8534, 1070.1080],
        [ 505.5870, 1069.0162],
        [ 508.5456, 1067.8031],
        [ 511.6079, 1066.5098],
        [ 514.7588, 1065.1344]], device='cuda:0')
[2025-01-13 12:55:44,075][train.train_model][ERROR] -   => pi=tensor([[0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3306, 0.3671, 0.3023],
        [0.3306, 0.3671, 0.3023],
        [0.3306, 0.3671, 0.3023],
        [0.3306, 0.3671, 0.3023],
        [0.3306, 0.3671, 0.3023],
        [0.3306, 0.3671, 0.3023]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0156, -0.0176],
         [ 0.0292, -0.0080],
         [ 0.0925,  0.0139]],

        [[ 0.0156, -0.0176],
         [ 0.0292, -0.0080],
         [ 0.0925,  0.0139]],

        [[ 0.0156, -0.0176],
         [ 0.0292, -0.0080],
         [ 0.0925,  0.0139]],

        [[ 0.0156, -0.0176],
         [ 0.0292, -0.0080],
         [ 0.0925,  0.0139]],

        [[ 0.0156, -0.0176],
         [ 0.0292, -0.0080],
         [ 0.0925,  0.0139]],

        [[ 0.0156, -0.0176],
         [ 0.0292, -0.0080],
         [ 0.0925,  0.0139]],

        [[-0.0121,  0.0180],
         [ 0.0094, -0.0014],
         [ 0.0878,  0.0092]],

        [[-0.0121,  0.0180],
         [ 0.0094, -0.0014],
         [ 0.0878,  0.0092]],

        [[-0.0121,  0.0180],
         [ 0.0094, -0.0014],
         [ 0.0878,  0.0092]],

        [[-0.0121,  0.0180],
         [ 0.0094, -0.0014],
         [ 0.0878,  0.0092]],

        [[-0.0121,  0.0180],
         [ 0.0094, -0.0014],
         [ 0.0878,  0.0092]],

        [[-0.0121,  0.0180],
         [ 0.0094, -0.0014],
         [ 0.0878,  0.0092]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0557, -0.1506],
         [-0.0341, -0.2019],
         [ 0.0558,  0.0292]],

        [[ 0.0557, -0.1506],
         [-0.0341, -0.2019],
         [ 0.0558,  0.0292]],

        [[ 0.0557, -0.1506],
         [-0.0341, -0.2019],
         [ 0.0558,  0.0292]],

        [[ 0.0557, -0.1506],
         [-0.0341, -0.2019],
         [ 0.0558,  0.0292]],

        [[ 0.0557, -0.1506],
         [-0.0341, -0.2019],
         [ 0.0558,  0.0292]],

        [[ 0.0557, -0.1506],
         [-0.0341, -0.2019],
         [ 0.0558,  0.0292]],

        [[ 0.0831, -0.1504],
         [-0.0291, -0.2114],
         [ 0.0496,  0.0373]],

        [[ 0.0831, -0.1504],
         [-0.0291, -0.2114],
         [ 0.0496,  0.0373]],

        [[ 0.0831, -0.1504],
         [-0.0291, -0.2114],
         [ 0.0496,  0.0373]],

        [[ 0.0831, -0.1504],
         [-0.0291, -0.2114],
         [ 0.0496,  0.0373]],

        [[ 0.0831, -0.1504],
         [-0.0291, -0.2114],
         [ 0.0496,  0.0373]],

        [[ 0.0831, -0.1504],
         [-0.0291, -0.2114],
         [ 0.0496,  0.0373]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:44,075][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:44,079][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:44,082][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:44,112][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:44,113][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:44,113][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:44,114][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:44,147][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=9
[2025-01-13 12:55:44,148][train.train_model][ERROR] -   => agent_in=tensor([[1.1851e+03, 1.1349e+03, 4.2399e-03, 9.9152e-04],
        [1.1851e+03, 1.1349e+03, 1.5948e-03, 2.2564e-03],
        [1.1851e+03, 1.1349e+03, 1.3472e-03, 1.9214e-03],
        [1.1851e+03, 1.1349e+03, 1.1391e-03, 1.5867e-03],
        [1.1851e+03, 1.1349e+03, 9.4737e-04, 1.3229e-03],
        [1.1851e+03, 1.1349e+03, 8.1094e-04, 1.1331e-03]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1185.1259, 1134.8899],
        [1185.1279, 1134.8904],
        [1185.1288, 1134.8916],
        [1185.1294, 1134.8925],
        [1185.1301, 1134.8936],
        [1185.1306, 1134.8942],
        [1185.1311, 1134.8948],
        [1185.1313, 1134.8953],
        [1185.1317, 1134.8956],
        [1185.1320, 1134.8960],
        [1185.1322, 1134.8964],
        [1185.1323, 1134.8966]], device='cuda:0')
[2025-01-13 12:55:44,152][train.train_model][ERROR] -   => pi=tensor([[0.3260, 0.3672, 0.3068],
        [0.3260, 0.3672, 0.3068],
        [0.3260, 0.3672, 0.3068],
        [0.3260, 0.3672, 0.3068],
        [0.3260, 0.3672, 0.3068],
        [0.3260, 0.3672, 0.3068],
        [0.3260, 0.3661, 0.3079],
        [0.3260, 0.3661, 0.3079],
        [0.3260, 0.3661, 0.3079],
        [0.3260, 0.3661, 0.3079],
        [0.3260, 0.3661, 0.3079],
        [0.3260, 0.3661, 0.3079]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0116,  0.0008],
         [ 0.0432, -0.0252],
         [ 0.0883,  0.0029]],

        [[-0.0116,  0.0008],
         [ 0.0432, -0.0252],
         [ 0.0883,  0.0029]],

        [[-0.0116,  0.0008],
         [ 0.0432, -0.0252],
         [ 0.0883,  0.0029]],

        [[-0.0116,  0.0008],
         [ 0.0432, -0.0252],
         [ 0.0883,  0.0029]],

        [[-0.0116,  0.0008],
         [ 0.0432, -0.0252],
         [ 0.0883,  0.0029]],

        [[-0.0116,  0.0008],
         [ 0.0432, -0.0252],
         [ 0.0883,  0.0029]],

        [[-0.0409,  0.0340],
         [ 0.0273, -0.0182],
         [ 0.0828,  0.0042]],

        [[-0.0409,  0.0340],
         [ 0.0273, -0.0182],
         [ 0.0828,  0.0042]],

        [[-0.0409,  0.0340],
         [ 0.0273, -0.0182],
         [ 0.0828,  0.0042]],

        [[-0.0409,  0.0340],
         [ 0.0273, -0.0182],
         [ 0.0828,  0.0042]],

        [[-0.0409,  0.0340],
         [ 0.0273, -0.0182],
         [ 0.0828,  0.0042]],

        [[-0.0409,  0.0340],
         [ 0.0273, -0.0182],
         [ 0.0828,  0.0042]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0250, -0.1075],
         [-0.0251, -0.2593],
         [ 0.0630,  0.0477]],

        [[ 0.0250, -0.1075],
         [-0.0251, -0.2593],
         [ 0.0630,  0.0477]],

        [[ 0.0250, -0.1075],
         [-0.0251, -0.2593],
         [ 0.0630,  0.0477]],

        [[ 0.0250, -0.1075],
         [-0.0251, -0.2593],
         [ 0.0630,  0.0477]],

        [[ 0.0250, -0.1075],
         [-0.0251, -0.2593],
         [ 0.0630,  0.0477]],

        [[ 0.0250, -0.1075],
         [-0.0251, -0.2593],
         [ 0.0630,  0.0477]],

        [[ 0.0641, -0.1108],
         [-0.0178, -0.2556],
         [ 0.0489,  0.0490]],

        [[ 0.0641, -0.1108],
         [-0.0178, -0.2556],
         [ 0.0489,  0.0490]],

        [[ 0.0641, -0.1108],
         [-0.0178, -0.2556],
         [ 0.0489,  0.0490]],

        [[ 0.0641, -0.1108],
         [-0.0178, -0.2556],
         [ 0.0489,  0.0490]],

        [[ 0.0641, -0.1108],
         [-0.0178, -0.2556],
         [ 0.0489,  0.0490]],

        [[ 0.0641, -0.1108],
         [-0.0178, -0.2556],
         [ 0.0489,  0.0490]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:44,153][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:44,156][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 12:55:44,158][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 12:55:44,189][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 12:55:44,189][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 12:55:44,190][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 12:55:44,191][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:55:44,211][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=10
[2025-01-13 12:55:44,212][train.train_model][ERROR] -   => agent_in=tensor([[ 5.9696e+02,  1.6484e+03,  9.0022e-01, -4.9717e-01],
        [ 5.9741e+02,  1.6481e+03,  1.3550e+00, -7.4499e-01],
        [ 5.9795e+02,  1.6478e+03,  1.5103e+00, -8.3371e-01],
        [ 5.9871e+02,  1.6474e+03,  1.9743e+00, -1.0786e+00],
        [ 5.9969e+02,  1.6469e+03,  2.3297e+00, -1.2694e+00],
        [ 6.0086e+02,  1.6462e+03,  2.7854e+00, -1.5319e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 596.9595, 1648.3661],
        [ 597.4093, 1648.1177],
        [ 597.9524, 1647.8191],
        [ 598.7058, 1647.4032],
        [ 599.6940, 1646.8634],
        [ 600.8597, 1646.2281],
        [ 602.2521, 1645.4624],
        [ 603.7343, 1644.6252],
        [ 605.2993, 1643.7142],
        [ 606.9810, 1642.7079],
        [ 608.8297, 1641.5717],
        [ 610.7695, 1640.3373]], device='cuda:0')
[2025-01-13 12:55:44,217][train.train_model][ERROR] -   => pi=tensor([[0.3317, 0.3669, 0.3014],
        [0.3317, 0.3669, 0.3014],
        [0.3317, 0.3669, 0.3014],
        [0.3317, 0.3669, 0.3014],
        [0.3317, 0.3669, 0.3014],
        [0.3317, 0.3669, 0.3014],
        [0.3321, 0.3670, 0.3009],
        [0.3321, 0.3670, 0.3009],
        [0.3321, 0.3670, 0.3009],
        [0.3321, 0.3670, 0.3009],
        [0.3321, 0.3670, 0.3009],
        [0.3321, 0.3670, 0.3009]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0046, -0.0331],
         [ 0.0203, -0.0102],
         [ 0.0981,  0.0159]],

        [[ 0.0046, -0.0331],
         [ 0.0203, -0.0102],
         [ 0.0981,  0.0159]],

        [[ 0.0046, -0.0331],
         [ 0.0203, -0.0102],
         [ 0.0981,  0.0159]],

        [[ 0.0046, -0.0331],
         [ 0.0203, -0.0102],
         [ 0.0981,  0.0159]],

        [[ 0.0046, -0.0331],
         [ 0.0203, -0.0102],
         [ 0.0981,  0.0159]],

        [[ 0.0046, -0.0331],
         [ 0.0203, -0.0102],
         [ 0.0981,  0.0159]],

        [[-0.0208,  0.0055],
         [-0.0045,  0.0011],
         [ 0.0977,  0.0043]],

        [[-0.0208,  0.0055],
         [-0.0045,  0.0011],
         [ 0.0977,  0.0043]],

        [[-0.0208,  0.0055],
         [-0.0045,  0.0011],
         [ 0.0977,  0.0043]],

        [[-0.0208,  0.0055],
         [-0.0045,  0.0011],
         [ 0.0977,  0.0043]],

        [[-0.0208,  0.0055],
         [-0.0045,  0.0011],
         [ 0.0977,  0.0043]],

        [[-0.0208,  0.0055],
         [-0.0045,  0.0011],
         [ 0.0977,  0.0043]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0451, -0.1569],
         [-0.0396, -0.1859],
         [ 0.0335,  0.0236]],

        [[ 0.0451, -0.1569],
         [-0.0396, -0.1859],
         [ 0.0335,  0.0236]],

        [[ 0.0451, -0.1569],
         [-0.0396, -0.1859],
         [ 0.0335,  0.0236]],

        [[ 0.0451, -0.1569],
         [-0.0396, -0.1859],
         [ 0.0335,  0.0236]],

        [[ 0.0451, -0.1569],
         [-0.0396, -0.1859],
         [ 0.0335,  0.0236]],

        [[ 0.0451, -0.1569],
         [-0.0396, -0.1859],
         [ 0.0335,  0.0236]],

        [[ 0.0674, -0.1548],
         [-0.0340, -0.1996],
         [ 0.0336,  0.0343]],

        [[ 0.0674, -0.1548],
         [-0.0340, -0.1996],
         [ 0.0336,  0.0343]],

        [[ 0.0674, -0.1548],
         [-0.0340, -0.1996],
         [ 0.0336,  0.0343]],

        [[ 0.0674, -0.1548],
         [-0.0340, -0.1996],
         [ 0.0336,  0.0343]],

        [[ 0.0674, -0.1548],
         [-0.0340, -0.1996],
         [ 0.0336,  0.0343]],

        [[ 0.0674, -0.1548],
         [-0.0340, -0.1996],
         [ 0.0336,  0.0343]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:55:44,217][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:55:47,493][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:47,499][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:47,542][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:47,542][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:47,543][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:47,544][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:47,569][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=0
[2025-01-13 12:55:47,571][train.train_model][ERROR] -   => agent_in=tensor([[ 873.2697, 1867.5603,   -5.7234,    3.5980],
        [ 870.4088, 1869.3589,   -5.6397,    3.5708],
        [ 867.5896, 1871.1438,   -5.4182,    3.4254],
        [ 864.8811, 1872.8562,   -5.2736,    3.3171],
        [ 862.2451, 1874.5143,   -5.0552,    3.1200],
        [ 859.4662, 1876.2294,   -4.8648,    2.9810]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 873.2697, 1867.5603],
        [ 870.4088, 1869.3589],
        [ 867.5896, 1871.1438],
        [ 864.8811, 1872.8562],
        [ 862.2451, 1874.5143],
        [ 859.4662, 1876.2294],
        [ 857.0346, 1877.7194],
        [ 854.7612, 1879.0966],
        [ 852.5053, 1880.4707],
        [ 850.4337, 1881.7307],
        [ 848.0394, 1883.2101],
        [ 845.4049, 1884.8805]], device='cuda:0')
[2025-01-13 12:55:47,576][train.train_model][ERROR] -   => pi=tensor([[0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031]], device='cuda:0') mu=tensor([[[ 0.0164, -0.0172],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0119]],

        [[ 0.0164, -0.0172],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0119]],

        [[ 0.0164, -0.0172],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0119]],

        [[ 0.0164, -0.0172],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0119]],

        [[ 0.0164, -0.0172],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0119]],

        [[ 0.0164, -0.0172],
         [ 0.0306, -0.0058],
         [ 0.0936,  0.0119]],

        [[-0.0126,  0.0191],
         [ 0.0104,  0.0009],
         [ 0.0892,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0104,  0.0009],
         [ 0.0892,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0104,  0.0009],
         [ 0.0892,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0104,  0.0009],
         [ 0.0892,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0104,  0.0009],
         [ 0.0892,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0104,  0.0009],
         [ 0.0892,  0.0075]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0289]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0289]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0289]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0289]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0289]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0289]],

        [[ 0.0804, -0.1523],
         [-0.0278, -0.2141],
         [ 0.0494,  0.0369]],

        [[ 0.0804, -0.1523],
         [-0.0278, -0.2141],
         [ 0.0494,  0.0369]],

        [[ 0.0804, -0.1523],
         [-0.0278, -0.2141],
         [ 0.0494,  0.0369]],

        [[ 0.0804, -0.1523],
         [-0.0278, -0.2141],
         [ 0.0494,  0.0369]],

        [[ 0.0804, -0.1523],
         [-0.0278, -0.2141],
         [ 0.0494,  0.0369]],

        [[ 0.0804, -0.1523],
         [-0.0278, -0.2141],
         [ 0.0494,  0.0369]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:55:47,578][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:55:47,580][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:55:47,610][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:55:47,611][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:55:47,611][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:55:47,612][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:55:47,645][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=1
[2025-01-13 12:55:47,646][train.train_model][ERROR] -   => agent_in=tensor([[ 3.9609e+02,  1.1474e+03, -1.2863e-04,  8.5636e-05],
        [ 3.9609e+02,  1.1474e+03, -1.0998e-04,  7.4718e-05],
        [ 3.9609e+02,  1.1474e+03, -8.6321e-05,  8.2352e-05],
        [ 3.9609e+02,  1.1474e+03, -1.1263e-04, -1.2039e-05],
        [ 3.9609e+02,  1.1474e+03, -8.9997e-05,  4.4610e-06],
        [ 3.9609e+02,  1.1474e+03, -5.2940e-05,  5.6597e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 396.0914, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0910, 1147.3601],
        [ 396.0910, 1147.3601]], device='cuda:0')
[2025-01-13 12:55:47,651][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3672, 0.3009],
        [0.3320, 0.3672, 0.3009],
        [0.3320, 0.3672, 0.3009],
        [0.3320, 0.3672, 0.3009],
        [0.3320, 0.3672, 0.3009],
        [0.3320, 0.3672, 0.3009],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005]], device='cuda:0') mu=tensor([[[ 0.0028, -0.0323],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0028, -0.0323],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0028, -0.0323],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0028, -0.0323],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0028, -0.0323],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0028, -0.0323],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0052]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0052]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0052]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0052]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0052]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0010],
         [ 0.0978,  0.0052]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0422, -0.1582],
         [-0.0385, -0.1876],
         [ 0.0312,  0.0228]],

        [[ 0.0422, -0.1582],
         [-0.0385, -0.1876],
         [ 0.0312,  0.0228]],

        [[ 0.0422, -0.1582],
         [-0.0385, -0.1876],
         [ 0.0312,  0.0228]],

        [[ 0.0422, -0.1582],
         [-0.0385, -0.1876],
         [ 0.0312,  0.0228]],

        [[ 0.0422, -0.1582],
         [-0.0385, -0.1876],
         [ 0.0312,  0.0228]],

        [[ 0.0422, -0.1582],
         [-0.0385, -0.1876],
         [ 0.0312,  0.0228]],

        [[ 0.0651, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0312,  0.0334]],

        [[ 0.0651, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0312,  0.0334]],

        [[ 0.0651, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0312,  0.0334]],

        [[ 0.0651, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0312,  0.0334]],

        [[ 0.0651, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0312,  0.0334]],

        [[ 0.0651, -0.1561],
         [-0.0331, -0.2007],
         [ 0.0312,  0.0334]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:55:47,652][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 12:55:47,654][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 12:55:47,682][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 12:55:47,682][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 12:55:47,683][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 12:55:47,684][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:55:47,707][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=2
[2025-01-13 12:55:47,709][train.train_model][ERROR] -   => agent_in=tensor([[ 1.2170e+03,  2.7927e+03, -8.0835e-01,  6.7101e-01],
        [ 1.2166e+03,  2.7931e+03, -5.6761e-01,  4.6959e-01],
        [ 1.2163e+03,  2.7933e+03, -1.6878e-01,  1.3934e-01],
        [ 1.2162e+03,  2.7934e+03,  3.6582e-02, -2.6921e-02],
        [ 1.2162e+03,  2.7934e+03,  7.5744e-03, -3.5029e-03],
        [ 1.2162e+03,  2.7934e+03,  1.0428e-03,  1.4729e-03]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1216.9841, 2792.7312],
        [1216.5796, 2793.0671],
        [1216.2955, 2793.3020],
        [1216.2112, 2793.3716],
        [1216.2294, 2793.3582],
        [1216.2332, 2793.3564],
        [1216.2338, 2793.3572],
        [1216.2341, 2793.3579],
        [1216.2346, 2793.3584],
        [1216.2350, 2793.3589],
        [1216.1223, 2793.4521],
        [1215.7076, 2793.7937]], device='cuda:0')
[2025-01-13 12:55:47,713][train.train_model][ERROR] -   => pi=tensor([[0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3312, 0.3671, 0.3016],
        [0.3312, 0.3671, 0.3016],
        [0.3312, 0.3671, 0.3016],
        [0.3312, 0.3671, 0.3016],
        [0.3312, 0.3671, 0.3016],
        [0.3312, 0.3671, 0.3016]], device='cuda:0') mu=tensor([[[ 0.0155, -0.0189],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0153]],

        [[ 0.0155, -0.0189],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0153]],

        [[ 0.0155, -0.0189],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0153]],

        [[ 0.0155, -0.0189],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0153]],

        [[ 0.0155, -0.0189],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0153]],

        [[ 0.0155, -0.0189],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0153]],

        [[-0.0112,  0.0165],
         [ 0.0084, -0.0037],
         [ 0.0868,  0.0105]],

        [[-0.0112,  0.0165],
         [ 0.0084, -0.0037],
         [ 0.0868,  0.0105]],

        [[-0.0112,  0.0165],
         [ 0.0084, -0.0037],
         [ 0.0868,  0.0105]],

        [[-0.0112,  0.0165],
         [ 0.0084, -0.0037],
         [ 0.0868,  0.0105]],

        [[-0.0112,  0.0165],
         [ 0.0084, -0.0037],
         [ 0.0868,  0.0105]],

        [[-0.0112,  0.0165],
         [ 0.0084, -0.0037],
         [ 0.0868,  0.0105]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0593, -0.1495],
         [-0.0347, -0.1993],
         [ 0.0549,  0.0294]],

        [[ 0.0593, -0.1495],
         [-0.0347, -0.1993],
         [ 0.0549,  0.0294]],

        [[ 0.0593, -0.1495],
         [-0.0347, -0.1993],
         [ 0.0549,  0.0294]],

        [[ 0.0593, -0.1495],
         [-0.0347, -0.1993],
         [ 0.0549,  0.0294]],

        [[ 0.0593, -0.1495],
         [-0.0347, -0.1993],
         [ 0.0549,  0.0294]],

        [[ 0.0593, -0.1495],
         [-0.0347, -0.1993],
         [ 0.0549,  0.0294]],

        [[ 0.0860, -0.1490],
         [-0.0296, -0.2089],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1490],
         [-0.0296, -0.2089],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1490],
         [-0.0296, -0.2089],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1490],
         [-0.0296, -0.2089],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1490],
         [-0.0296, -0.2089],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1490],
         [-0.0296, -0.2089],
         [ 0.0490,  0.0378]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:55:47,714][train.train_model][WARNING] - No valid samples found in validation.
[2025-01-13 12:56:18,632][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:18,640][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:18,684][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:18,685][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:18,685][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:18,687][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:18,713][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=0
[2025-01-13 12:56:18,716][train.train_model][ERROR] -   => agent_in=tensor([[1833.2274, 1154.0920,   -4.6126,    7.0700],
        [1830.9243, 1157.6222,   -4.5684,    6.8486],
        [1828.6385, 1161.0490,   -4.4839,    6.6708],
        [1826.3993, 1164.3804,   -4.4377,    6.5832],
        [1824.1809, 1167.6711,   -4.3107,    6.3762],
        [1822.0261, 1170.8584,   -4.0910,    6.0691]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1833.2274, 1154.0920],
        [1830.9243, 1157.6222],
        [1828.6385, 1161.0490],
        [1826.3993, 1164.3804],
        [1824.1809, 1167.6711],
        [1822.0261, 1170.8584],
        [1819.9789, 1173.8956],
        [1817.9901, 1176.8790],
        [1816.0591, 1179.7855],
        [1814.2874, 1182.4475],
        [1812.6616, 1184.8879],
        [1811.2124, 1187.0695]], device='cuda:0')
[2025-01-13 12:56:18,720][train.train_model][ERROR] -   => pi=tensor([[0.3282, 0.3690, 0.3027],
        [0.3282, 0.3690, 0.3027],
        [0.3282, 0.3690, 0.3027],
        [0.3282, 0.3690, 0.3027],
        [0.3282, 0.3690, 0.3027],
        [0.3282, 0.3690, 0.3027],
        [0.3279, 0.3681, 0.3040],
        [0.3279, 0.3681, 0.3040],
        [0.3279, 0.3681, 0.3040],
        [0.3279, 0.3681, 0.3040],
        [0.3279, 0.3681, 0.3040],
        [0.3279, 0.3681, 0.3040]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0121, -0.0154],
         [ 0.0411, -0.0257],
         [ 0.1073,  0.0356]],

        [[-0.0121, -0.0154],
         [ 0.0411, -0.0257],
         [ 0.1073,  0.0356]],

        [[-0.0121, -0.0154],
         [ 0.0411, -0.0257],
         [ 0.1073,  0.0356]],

        [[-0.0121, -0.0154],
         [ 0.0411, -0.0257],
         [ 0.1073,  0.0356]],

        [[-0.0121, -0.0154],
         [ 0.0411, -0.0257],
         [ 0.1073,  0.0356]],

        [[-0.0121, -0.0154],
         [ 0.0411, -0.0257],
         [ 0.1073,  0.0356]],

        [[-0.0315,  0.0138],
         [ 0.0274, -0.0231],
         [ 0.1028,  0.0381]],

        [[-0.0315,  0.0138],
         [ 0.0274, -0.0231],
         [ 0.1028,  0.0381]],

        [[-0.0315,  0.0138],
         [ 0.0274, -0.0231],
         [ 0.1028,  0.0381]],

        [[-0.0315,  0.0138],
         [ 0.0274, -0.0231],
         [ 0.1028,  0.0381]],

        [[-0.0315,  0.0138],
         [ 0.0274, -0.0231],
         [ 0.1028,  0.0381]],

        [[-0.0315,  0.0138],
         [ 0.0274, -0.0231],
         [ 0.1028,  0.0381]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0130, -0.0801],
         [-0.0138, -0.2507],
         [ 0.0562,  0.0406]],

        [[ 0.0130, -0.0801],
         [-0.0138, -0.2507],
         [ 0.0562,  0.0406]],

        [[ 0.0130, -0.0801],
         [-0.0138, -0.2507],
         [ 0.0562,  0.0406]],

        [[ 0.0130, -0.0801],
         [-0.0138, -0.2507],
         [ 0.0562,  0.0406]],

        [[ 0.0130, -0.0801],
         [-0.0138, -0.2507],
         [ 0.0562,  0.0406]],

        [[ 0.0130, -0.0801],
         [-0.0138, -0.2507],
         [ 0.0562,  0.0406]],

        [[ 0.0443, -0.0834],
         [-0.0101, -0.2474],
         [ 0.0438,  0.0415]],

        [[ 0.0443, -0.0834],
         [-0.0101, -0.2474],
         [ 0.0438,  0.0415]],

        [[ 0.0443, -0.0834],
         [-0.0101, -0.2474],
         [ 0.0438,  0.0415]],

        [[ 0.0443, -0.0834],
         [-0.0101, -0.2474],
         [ 0.0438,  0.0415]],

        [[ 0.0443, -0.0834],
         [-0.0101, -0.2474],
         [ 0.0438,  0.0415]],

        [[ 0.0443, -0.0834],
         [-0.0101, -0.2474],
         [ 0.0438,  0.0415]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:18,720][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:18,726][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:18,728][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:18,759][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:18,760][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:18,760][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:18,761][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:18,793][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=1
[2025-01-13 12:56:18,795][train.train_model][ERROR] -   => agent_in=tensor([[1.8312e+03, 1.1535e+03, 1.3772e-03, 2.0220e-03],
        [1.8312e+03, 1.1535e+03, 3.2931e-04, 2.0626e-03],
        [1.8312e+03, 1.1535e+03, 5.8932e-04, 1.6187e-03],
        [1.8312e+03, 1.1535e+03, 5.4702e-04, 1.3507e-03],
        [1.8312e+03, 1.1535e+03, 7.5112e-04, 1.0347e-03],
        [1.8312e+03, 1.1535e+03, 7.0778e-04, 8.5869e-04]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1831.2333, 1153.4955],
        [1831.2340, 1153.4966],
        [1831.2341, 1153.4976],
        [1831.2345, 1153.4984],
        [1831.2347, 1153.4991],
        [1831.2351, 1153.4996],
        [1831.2355, 1153.5001],
        [1831.2358, 1153.5005],
        [1831.2360, 1153.5009],
        [1831.2360, 1153.5011],
        [1831.2361, 1153.5015],
        [1831.2362, 1153.5017]], device='cuda:0')
[2025-01-13 12:56:18,799][train.train_model][ERROR] -   => pi=tensor([[0.3287, 0.3695, 0.3019],
        [0.3287, 0.3695, 0.3019],
        [0.3287, 0.3695, 0.3019],
        [0.3287, 0.3695, 0.3019],
        [0.3287, 0.3695, 0.3019],
        [0.3287, 0.3695, 0.3019],
        [0.3281, 0.3686, 0.3033],
        [0.3281, 0.3686, 0.3033],
        [0.3281, 0.3686, 0.3033],
        [0.3281, 0.3686, 0.3033],
        [0.3281, 0.3686, 0.3033],
        [0.3281, 0.3686, 0.3033]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0183, -0.0159],
         [ 0.0412, -0.0267],
         [ 0.1042,  0.0373]],

        [[-0.0183, -0.0159],
         [ 0.0412, -0.0267],
         [ 0.1042,  0.0373]],

        [[-0.0183, -0.0159],
         [ 0.0412, -0.0267],
         [ 0.1042,  0.0373]],

        [[-0.0183, -0.0159],
         [ 0.0412, -0.0267],
         [ 0.1042,  0.0373]],

        [[-0.0183, -0.0159],
         [ 0.0412, -0.0267],
         [ 0.1042,  0.0373]],

        [[-0.0183, -0.0159],
         [ 0.0412, -0.0267],
         [ 0.1042,  0.0373]],

        [[-0.0369,  0.0128],
         [ 0.0278, -0.0247],
         [ 0.1008,  0.0397]],

        [[-0.0369,  0.0128],
         [ 0.0278, -0.0247],
         [ 0.1008,  0.0397]],

        [[-0.0369,  0.0128],
         [ 0.0278, -0.0247],
         [ 0.1008,  0.0397]],

        [[-0.0369,  0.0128],
         [ 0.0278, -0.0247],
         [ 0.1008,  0.0397]],

        [[-0.0369,  0.0128],
         [ 0.0278, -0.0247],
         [ 0.1008,  0.0397]],

        [[-0.0369,  0.0128],
         [ 0.0278, -0.0247],
         [ 0.1008,  0.0397]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0100, -0.0816],
         [-0.0135, -0.2549],
         [ 0.0568,  0.0380]],

        [[ 0.0100, -0.0816],
         [-0.0135, -0.2549],
         [ 0.0568,  0.0380]],

        [[ 0.0100, -0.0816],
         [-0.0135, -0.2549],
         [ 0.0568,  0.0380]],

        [[ 0.0100, -0.0816],
         [-0.0135, -0.2549],
         [ 0.0568,  0.0380]],

        [[ 0.0100, -0.0816],
         [-0.0135, -0.2549],
         [ 0.0568,  0.0380]],

        [[ 0.0100, -0.0816],
         [-0.0135, -0.2549],
         [ 0.0568,  0.0380]],

        [[ 0.0436, -0.0852],
         [-0.0095, -0.2484],
         [ 0.0432,  0.0373]],

        [[ 0.0436, -0.0852],
         [-0.0095, -0.2484],
         [ 0.0432,  0.0373]],

        [[ 0.0436, -0.0852],
         [-0.0095, -0.2484],
         [ 0.0432,  0.0373]],

        [[ 0.0436, -0.0852],
         [-0.0095, -0.2484],
         [ 0.0432,  0.0373]],

        [[ 0.0436, -0.0852],
         [-0.0095, -0.2484],
         [ 0.0432,  0.0373]],

        [[ 0.0436, -0.0852],
         [-0.0095, -0.2484],
         [ 0.0432,  0.0373]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:18,800][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:18,804][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:18,806][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:18,836][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:18,837][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:18,837][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:18,838][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:18,870][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=2
[2025-01-13 12:56:18,872][train.train_model][ERROR] -   => agent_in=tensor([[ 4.4956e+02,  6.0358e+02, -4.3232e+00, -9.9416e-02],
        [ 4.4740e+02,  6.0354e+02, -4.8960e+00,  5.5799e-01],
        [ 4.4495e+02,  6.0381e+02, -5.2355e+00,  1.3684e+00],
        [ 4.4233e+02,  6.0450e+02, -5.3441e+00,  2.1680e+00],
        [ 4.3966e+02,  6.0558e+02, -5.5270e+00,  2.7334e+00],
        [ 4.3690e+02,  6.0695e+02, -5.6488e+00,  2.9958e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[449.5603, 603.5848],
        [447.3991, 603.5351],
        [444.9518, 603.8140],
        [442.3316, 604.4988],
        [439.6632, 605.5814],
        [436.9005, 606.9476],
        [434.0737, 608.4469],
        [431.1944, 610.1243],
        [428.4332, 611.8925],
        [425.8763, 613.7598],
        [423.4953, 615.7103],
        [420.8061, 618.0717]], device='cuda:0')
[2025-01-13 12:56:18,876][train.train_model][ERROR] -   => pi=tensor([[0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0156, -0.0113],
         [ 0.0316, -0.0048],
         [ 0.0781,  0.0125]],

        [[-0.0156, -0.0113],
         [ 0.0316, -0.0048],
         [ 0.0781,  0.0125]],

        [[-0.0156, -0.0113],
         [ 0.0316, -0.0048],
         [ 0.0781,  0.0125]],

        [[-0.0156, -0.0113],
         [ 0.0316, -0.0048],
         [ 0.0781,  0.0125]],

        [[-0.0156, -0.0113],
         [ 0.0316, -0.0048],
         [ 0.0781,  0.0125]],

        [[-0.0156, -0.0113],
         [ 0.0316, -0.0048],
         [ 0.0781,  0.0125]],

        [[-0.0385,  0.0249],
         [ 0.0132, -0.0032],
         [ 0.0794,  0.0136]],

        [[-0.0385,  0.0249],
         [ 0.0132, -0.0032],
         [ 0.0794,  0.0136]],

        [[-0.0385,  0.0249],
         [ 0.0132, -0.0032],
         [ 0.0794,  0.0136]],

        [[-0.0385,  0.0249],
         [ 0.0132, -0.0032],
         [ 0.0794,  0.0136]],

        [[-0.0385,  0.0249],
         [ 0.0132, -0.0032],
         [ 0.0794,  0.0136]],

        [[-0.0385,  0.0249],
         [ 0.0132, -0.0032],
         [ 0.0794,  0.0136]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0186, -0.1350],
         [-0.0293, -0.2374],
         [ 0.0535,  0.0415]],

        [[ 0.0186, -0.1350],
         [-0.0293, -0.2374],
         [ 0.0535,  0.0415]],

        [[ 0.0186, -0.1350],
         [-0.0293, -0.2374],
         [ 0.0535,  0.0415]],

        [[ 0.0186, -0.1350],
         [-0.0293, -0.2374],
         [ 0.0535,  0.0415]],

        [[ 0.0186, -0.1350],
         [-0.0293, -0.2374],
         [ 0.0535,  0.0415]],

        [[ 0.0186, -0.1350],
         [-0.0293, -0.2374],
         [ 0.0535,  0.0415]],

        [[ 0.0612, -0.1388],
         [-0.0219, -0.2330],
         [ 0.0429,  0.0434]],

        [[ 0.0612, -0.1388],
         [-0.0219, -0.2330],
         [ 0.0429,  0.0434]],

        [[ 0.0612, -0.1388],
         [-0.0219, -0.2330],
         [ 0.0429,  0.0434]],

        [[ 0.0612, -0.1388],
         [-0.0219, -0.2330],
         [ 0.0429,  0.0434]],

        [[ 0.0612, -0.1388],
         [-0.0219, -0.2330],
         [ 0.0429,  0.0434]],

        [[ 0.0612, -0.1388],
         [-0.0219, -0.2330],
         [ 0.0429,  0.0434]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:18,876][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:18,880][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:18,882][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:18,913][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:18,913][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:18,913][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:18,915][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:18,945][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=3
[2025-01-13 12:56:18,946][train.train_model][ERROR] -   => agent_in=tensor([[ 980.1749, 1278.6158,   -6.9141,    4.4937],
        [ 977.4108, 1280.4124,   -7.0464,    4.6463],
        [ 973.8885, 1282.7349,   -7.2566,    4.6476],
        [ 970.2650, 1285.0555,   -7.3037,    4.4909],
        [ 966.6101, 1287.3030,   -7.2044,    4.3708],
        [ 963.0008, 1289.4927,   -7.3505,    4.4134]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 980.1749, 1278.6158],
        [ 977.4108, 1280.4124],
        [ 973.8885, 1282.7349],
        [ 970.2650, 1285.0555],
        [ 966.6101, 1287.3030],
        [ 963.0008, 1289.4927],
        [ 959.6924, 1291.4791],
        [ 955.9436, 1293.7124],
        [ 952.1036, 1295.9858],
        [ 947.8379, 1298.5195],
        [ 943.9373, 1300.8763],
        [ 940.0862, 1303.2574]], device='cuda:0')
[2025-01-13 12:56:18,950][train.train_model][ERROR] -   => pi=tensor([[0.3317, 0.3656, 0.3027],
        [0.3317, 0.3656, 0.3027],
        [0.3317, 0.3656, 0.3027],
        [0.3317, 0.3656, 0.3027],
        [0.3317, 0.3656, 0.3027],
        [0.3317, 0.3656, 0.3027],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048],
        [0.3313, 0.3639, 0.3048]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0101, -0.0096],
         [ 0.0317, -0.0061],
         [ 0.0768,  0.0103]],

        [[-0.0101, -0.0096],
         [ 0.0317, -0.0061],
         [ 0.0768,  0.0103]],

        [[-0.0101, -0.0096],
         [ 0.0317, -0.0061],
         [ 0.0768,  0.0103]],

        [[-0.0101, -0.0096],
         [ 0.0317, -0.0061],
         [ 0.0768,  0.0103]],

        [[-0.0101, -0.0096],
         [ 0.0317, -0.0061],
         [ 0.0768,  0.0103]],

        [[-0.0101, -0.0096],
         [ 0.0317, -0.0061],
         [ 0.0768,  0.0103]],

        [[-0.0331,  0.0262],
         [ 0.0129, -0.0040],
         [ 0.0778,  0.0112]],

        [[-0.0331,  0.0262],
         [ 0.0129, -0.0040],
         [ 0.0778,  0.0112]],

        [[-0.0331,  0.0262],
         [ 0.0129, -0.0040],
         [ 0.0778,  0.0112]],

        [[-0.0331,  0.0262],
         [ 0.0129, -0.0040],
         [ 0.0778,  0.0112]],

        [[-0.0331,  0.0262],
         [ 0.0129, -0.0040],
         [ 0.0778,  0.0112]],

        [[-0.0331,  0.0262],
         [ 0.0129, -0.0040],
         [ 0.0778,  0.0112]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0228, -0.1340],
         [-0.0291, -0.2377],
         [ 0.0555,  0.0411]],

        [[ 0.0228, -0.1340],
         [-0.0291, -0.2377],
         [ 0.0555,  0.0411]],

        [[ 0.0228, -0.1340],
         [-0.0291, -0.2377],
         [ 0.0555,  0.0411]],

        [[ 0.0228, -0.1340],
         [-0.0291, -0.2377],
         [ 0.0555,  0.0411]],

        [[ 0.0228, -0.1340],
         [-0.0291, -0.2377],
         [ 0.0555,  0.0411]],

        [[ 0.0228, -0.1340],
         [-0.0291, -0.2377],
         [ 0.0555,  0.0411]],

        [[ 0.0643, -0.1376],
         [-0.0219, -0.2344],
         [ 0.0452,  0.0430]],

        [[ 0.0643, -0.1376],
         [-0.0219, -0.2344],
         [ 0.0452,  0.0430]],

        [[ 0.0643, -0.1376],
         [-0.0219, -0.2344],
         [ 0.0452,  0.0430]],

        [[ 0.0643, -0.1376],
         [-0.0219, -0.2344],
         [ 0.0452,  0.0430]],

        [[ 0.0643, -0.1376],
         [-0.0219, -0.2344],
         [ 0.0452,  0.0430]],

        [[ 0.0643, -0.1376],
         [-0.0219, -0.2344],
         [ 0.0452,  0.0430]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:18,951][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:21,056][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:21,060][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:21,103][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:21,104][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:21,104][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:21,105][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:21,129][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=4
[2025-01-13 12:56:21,131][train.train_model][ERROR] -   => agent_in=tensor([[ 1.6665e+03,  2.7403e+03,  2.3921e-03,  1.6472e-03],
        [ 1.6665e+03,  2.7403e+03, -8.6471e-02,  1.3335e-01],
        [ 1.6665e+03,  2.7403e+03, -2.6818e-01,  4.0745e-01],
        [ 1.6664e+03,  2.7405e+03, -6.3973e-01,  9.6442e-01],
        [ 1.6660e+03,  2.7410e+03, -1.0328e+00,  1.5301e+00],
        [ 1.6655e+03,  2.7418e+03, -1.4375e+00,  2.1644e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1666.5317, 2740.2659],
        [1666.5330, 2740.2666],
        [1666.4854, 2740.3401],
        [1666.3512, 2740.5439],
        [1666.0310, 2741.0266],
        [1665.5148, 2741.7915],
        [1664.7954, 2742.8745],
        [1663.9130, 2744.2068],
        [1662.9211, 2745.7124],
        [1661.8641, 2747.3074],
        [1660.5383, 2749.3010],
        [1659.0979, 2751.4495]], device='cuda:0')
[2025-01-13 12:56:21,135][train.train_model][ERROR] -   => pi=tensor([[0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3318, 0.3656, 0.3026],
        [0.3314, 0.3635, 0.3051],
        [0.3314, 0.3635, 0.3051],
        [0.3314, 0.3635, 0.3051],
        [0.3314, 0.3635, 0.3051],
        [0.3314, 0.3635, 0.3051],
        [0.3314, 0.3635, 0.3051]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0097, -0.0127],
         [ 0.0292, -0.0070],
         [ 0.0795,  0.0180]],

        [[-0.0097, -0.0127],
         [ 0.0292, -0.0070],
         [ 0.0795,  0.0180]],

        [[-0.0097, -0.0127],
         [ 0.0292, -0.0070],
         [ 0.0795,  0.0180]],

        [[-0.0097, -0.0127],
         [ 0.0292, -0.0070],
         [ 0.0795,  0.0180]],

        [[-0.0097, -0.0127],
         [ 0.0292, -0.0070],
         [ 0.0795,  0.0180]],

        [[-0.0097, -0.0127],
         [ 0.0292, -0.0070],
         [ 0.0795,  0.0180]],

        [[-0.0303,  0.0253],
         [ 0.0099, -0.0067],
         [ 0.0834,  0.0167]],

        [[-0.0303,  0.0253],
         [ 0.0099, -0.0067],
         [ 0.0834,  0.0167]],

        [[-0.0303,  0.0253],
         [ 0.0099, -0.0067],
         [ 0.0834,  0.0167]],

        [[-0.0303,  0.0253],
         [ 0.0099, -0.0067],
         [ 0.0834,  0.0167]],

        [[-0.0303,  0.0253],
         [ 0.0099, -0.0067],
         [ 0.0834,  0.0167]],

        [[-0.0303,  0.0253],
         [ 0.0099, -0.0067],
         [ 0.0834,  0.0167]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0295, -0.1392],
         [-0.0301, -0.2109],
         [ 0.0447,  0.0364]],

        [[ 0.0295, -0.1392],
         [-0.0301, -0.2109],
         [ 0.0447,  0.0364]],

        [[ 0.0295, -0.1392],
         [-0.0301, -0.2109],
         [ 0.0447,  0.0364]],

        [[ 0.0295, -0.1392],
         [-0.0301, -0.2109],
         [ 0.0447,  0.0364]],

        [[ 0.0295, -0.1392],
         [-0.0301, -0.2109],
         [ 0.0447,  0.0364]],

        [[ 0.0295, -0.1392],
         [-0.0301, -0.2109],
         [ 0.0447,  0.0364]],

        [[ 0.0666, -0.1415],
         [-0.0233, -0.2113],
         [ 0.0377,  0.0389]],

        [[ 0.0666, -0.1415],
         [-0.0233, -0.2113],
         [ 0.0377,  0.0389]],

        [[ 0.0666, -0.1415],
         [-0.0233, -0.2113],
         [ 0.0377,  0.0389]],

        [[ 0.0666, -0.1415],
         [-0.0233, -0.2113],
         [ 0.0377,  0.0389]],

        [[ 0.0666, -0.1415],
         [-0.0233, -0.2113],
         [ 0.0377,  0.0389]],

        [[ 0.0666, -0.1415],
         [-0.0233, -0.2113],
         [ 0.0377,  0.0389]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:21,135][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:21,140][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:21,142][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:21,173][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:21,174][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:21,174][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:21,175][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:21,207][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=5
[2025-01-13 12:56:21,209][train.train_model][ERROR] -   => agent_in=tensor([[ 363.4202, 1088.2972,    2.0449,    4.8240],
        [ 364.4425, 1090.7087,    2.0723,    4.8185],
        [ 365.4820, 1093.1257,    2.0544,    4.6496],
        [ 366.5076, 1095.4469,    2.1801,    4.5017],
        [ 367.7059, 1097.9213,    2.3101,    4.2571],
        [ 368.8607, 1100.0493,    2.4785,    4.0305]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 363.4202, 1088.2972],
        [ 364.4425, 1090.7087],
        [ 365.4820, 1093.1257],
        [ 366.5076, 1095.4469],
        [ 367.7059, 1097.9213],
        [ 368.8607, 1100.0493],
        [ 370.1010, 1102.0663],
        [ 371.4120, 1103.9277],
        [ 372.8455, 1105.6355],
        [ 374.2258, 1106.9937],
        [ 375.8971, 1108.3287],
        [ 377.2437, 1109.2266]], device='cuda:0')
[2025-01-13 12:56:21,213][train.train_model][ERROR] -   => pi=tensor([[0.3321, 0.3671, 0.3008],
        [0.3321, 0.3671, 0.3008],
        [0.3321, 0.3671, 0.3008],
        [0.3321, 0.3671, 0.3008],
        [0.3321, 0.3671, 0.3008],
        [0.3321, 0.3671, 0.3008],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0026, -0.0322],
         [ 0.0212, -0.0118],
         [ 0.0985,  0.0162]],

        [[ 0.0026, -0.0322],
         [ 0.0212, -0.0118],
         [ 0.0985,  0.0162]],

        [[ 0.0026, -0.0322],
         [ 0.0212, -0.0118],
         [ 0.0985,  0.0162]],

        [[ 0.0026, -0.0322],
         [ 0.0212, -0.0118],
         [ 0.0985,  0.0162]],

        [[ 0.0026, -0.0322],
         [ 0.0212, -0.0118],
         [ 0.0985,  0.0162]],

        [[ 0.0026, -0.0322],
         [ 0.0212, -0.0118],
         [ 0.0985,  0.0162]],

        [[-0.0224,  0.0057],
         [-0.0029, -0.0012],
         [ 0.0980,  0.0055]],

        [[-0.0224,  0.0057],
         [-0.0029, -0.0012],
         [ 0.0980,  0.0055]],

        [[-0.0224,  0.0057],
         [-0.0029, -0.0012],
         [ 0.0980,  0.0055]],

        [[-0.0224,  0.0057],
         [-0.0029, -0.0012],
         [ 0.0980,  0.0055]],

        [[-0.0224,  0.0057],
         [-0.0029, -0.0012],
         [ 0.0980,  0.0055]],

        [[-0.0224,  0.0057],
         [-0.0029, -0.0012],
         [ 0.0980,  0.0055]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0417, -0.1584],
         [-0.0384, -0.1877],
         [ 0.0307,  0.0227]],

        [[ 0.0417, -0.1584],
         [-0.0384, -0.1877],
         [ 0.0307,  0.0227]],

        [[ 0.0417, -0.1584],
         [-0.0384, -0.1877],
         [ 0.0307,  0.0227]],

        [[ 0.0417, -0.1584],
         [-0.0384, -0.1877],
         [ 0.0307,  0.0227]],

        [[ 0.0417, -0.1584],
         [-0.0384, -0.1877],
         [ 0.0307,  0.0227]],

        [[ 0.0417, -0.1584],
         [-0.0384, -0.1877],
         [ 0.0307,  0.0227]],

        [[ 0.0648, -0.1565],
         [-0.0330, -0.2006],
         [ 0.0307,  0.0333]],

        [[ 0.0648, -0.1565],
         [-0.0330, -0.2006],
         [ 0.0307,  0.0333]],

        [[ 0.0648, -0.1565],
         [-0.0330, -0.2006],
         [ 0.0307,  0.0333]],

        [[ 0.0648, -0.1565],
         [-0.0330, -0.2006],
         [ 0.0307,  0.0333]],

        [[ 0.0648, -0.1565],
         [-0.0330, -0.2006],
         [ 0.0307,  0.0333]],

        [[ 0.0648, -0.1565],
         [-0.0330, -0.2006],
         [ 0.0307,  0.0333]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:21,214][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:21,217][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:21,219][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:21,250][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:21,251][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:21,251][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:21,252][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:21,283][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=6
[2025-01-13 12:56:21,285][train.train_model][ERROR] -   => agent_in=tensor([[1.0324e+03, 8.4781e+02, 5.4377e-03, 2.1406e-03],
        [1.0325e+03, 8.4782e+02, 2.9770e-03, 3.2563e-03],
        [1.0325e+03, 8.4782e+02, 2.5860e-03, 2.7198e-03],
        [1.0325e+03, 8.4782e+02, 2.2498e-03, 2.3150e-03],
        [1.0325e+03, 8.4782e+02, 1.9162e-03, 1.9528e-03],
        [1.0325e+03, 8.4782e+02, 1.6170e-03, 1.6785e-03]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1032.4485,  847.8143],
        [1032.4512,  847.8154],
        [1032.4528,  847.8170],
        [1032.4537,  847.8181],
        [1032.4548,  847.8192],
        [1032.4558,  847.8202],
        [1032.4567,  847.8210],
        [1032.4573,  847.8218],
        [1032.4579,  847.8224],
        [1032.4584,  847.8229],
        [1032.3964,  847.8841],
        [1032.1582,  848.1197]], device='cuda:0')
[2025-01-13 12:56:21,291][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0062, -0.0099],
         [ 0.0422, -0.0366],
         [ 0.0925,  0.0040]],

        [[ 0.0062, -0.0099],
         [ 0.0422, -0.0366],
         [ 0.0925,  0.0040]],

        [[ 0.0062, -0.0099],
         [ 0.0422, -0.0366],
         [ 0.0925,  0.0040]],

        [[ 0.0062, -0.0099],
         [ 0.0422, -0.0366],
         [ 0.0925,  0.0040]],

        [[ 0.0062, -0.0099],
         [ 0.0422, -0.0366],
         [ 0.0925,  0.0040]],

        [[ 0.0062, -0.0099],
         [ 0.0422, -0.0366],
         [ 0.0925,  0.0040]],

        [[-0.0205,  0.0279],
         [ 0.0276, -0.0306],
         [ 0.0887,  0.0049]],

        [[-0.0205,  0.0279],
         [ 0.0276, -0.0306],
         [ 0.0887,  0.0049]],

        [[-0.0205,  0.0279],
         [ 0.0276, -0.0306],
         [ 0.0887,  0.0049]],

        [[-0.0205,  0.0279],
         [ 0.0276, -0.0306],
         [ 0.0887,  0.0049]],

        [[-0.0205,  0.0279],
         [ 0.0276, -0.0306],
         [ 0.0887,  0.0049]],

        [[-0.0205,  0.0279],
         [ 0.0276, -0.0306],
         [ 0.0887,  0.0049]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0240, -0.1188],
         [-0.0168, -0.2499],
         [ 0.0613,  0.0299]],

        [[ 0.0240, -0.1188],
         [-0.0168, -0.2499],
         [ 0.0613,  0.0299]],

        [[ 0.0240, -0.1188],
         [-0.0168, -0.2499],
         [ 0.0613,  0.0299]],

        [[ 0.0240, -0.1188],
         [-0.0168, -0.2499],
         [ 0.0613,  0.0299]],

        [[ 0.0240, -0.1188],
         [-0.0168, -0.2499],
         [ 0.0613,  0.0299]],

        [[ 0.0240, -0.1188],
         [-0.0168, -0.2499],
         [ 0.0613,  0.0299]],

        [[ 0.0623, -0.1218],
         [-0.0122, -0.2502],
         [ 0.0484,  0.0326]],

        [[ 0.0623, -0.1218],
         [-0.0122, -0.2502],
         [ 0.0484,  0.0326]],

        [[ 0.0623, -0.1218],
         [-0.0122, -0.2502],
         [ 0.0484,  0.0326]],

        [[ 0.0623, -0.1218],
         [-0.0122, -0.2502],
         [ 0.0484,  0.0326]],

        [[ 0.0623, -0.1218],
         [-0.0122, -0.2502],
         [ 0.0484,  0.0326]],

        [[ 0.0623, -0.1218],
         [-0.0122, -0.2502],
         [ 0.0484,  0.0326]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:21,291][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:21,295][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:21,297][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:21,329][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:21,329][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:21,329][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:21,331][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:21,360][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=7
[2025-01-13 12:56:21,362][train.train_model][ERROR] -   => agent_in=tensor([[ 4.1442e+02,  1.6693e+03, -1.8128e-01, -2.7301e+00],
        [ 4.1433e+02,  1.6679e+03,  1.8051e-01, -3.3568e+00],
        [ 4.1442e+02,  1.6662e+03,  7.1780e-01, -3.8176e+00],
        [ 4.1471e+02,  1.6647e+03,  1.5740e+00, -3.9684e+00],
        [ 4.1550e+02,  1.6627e+03,  2.6865e+00, -4.1256e+00],
        [ 4.1671e+02,  1.6608e+03,  3.7362e+00, -3.7214e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 414.4240, 1669.2535],
        [ 414.3335, 1667.8903],
        [ 414.4237, 1666.2123],
        [ 414.7107, 1664.6862],
        [ 415.4984, 1662.7002],
        [ 416.7076, 1660.8431],
        [ 418.7612, 1658.7979],
        [ 421.1250, 1657.0472],
        [ 423.8589, 1655.2795],
        [ 426.8183, 1653.4275],
        [ 429.9849, 1651.4343],
        [ 433.3726, 1649.2854]], device='cuda:0')
[2025-01-13 12:56:21,366][train.train_model][ERROR] -   => pi=tensor([[0.3310, 0.3717, 0.2973],
        [0.3310, 0.3717, 0.2973],
        [0.3310, 0.3717, 0.2973],
        [0.3310, 0.3717, 0.2973],
        [0.3310, 0.3717, 0.2973],
        [0.3310, 0.3717, 0.2973],
        [0.3306, 0.3722, 0.2971],
        [0.3306, 0.3722, 0.2971],
        [0.3306, 0.3722, 0.2971],
        [0.3306, 0.3722, 0.2971],
        [0.3306, 0.3722, 0.2971],
        [0.3306, 0.3722, 0.2971]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0161, -0.0314],
         [ 0.0152, -0.0105],
         [ 0.0947,  0.0227]],

        [[-0.0161, -0.0314],
         [ 0.0152, -0.0105],
         [ 0.0947,  0.0227]],

        [[-0.0161, -0.0314],
         [ 0.0152, -0.0105],
         [ 0.0947,  0.0227]],

        [[-0.0161, -0.0314],
         [ 0.0152, -0.0105],
         [ 0.0947,  0.0227]],

        [[-0.0161, -0.0314],
         [ 0.0152, -0.0105],
         [ 0.0947,  0.0227]],

        [[-0.0161, -0.0314],
         [ 0.0152, -0.0105],
         [ 0.0947,  0.0227]],

        [[-0.0392, -0.0002],
         [-0.0067,  0.0002],
         [ 0.0911,  0.0132]],

        [[-0.0392, -0.0002],
         [-0.0067,  0.0002],
         [ 0.0911,  0.0132]],

        [[-0.0392, -0.0002],
         [-0.0067,  0.0002],
         [ 0.0911,  0.0132]],

        [[-0.0392, -0.0002],
         [-0.0067,  0.0002],
         [ 0.0911,  0.0132]],

        [[-0.0392, -0.0002],
         [-0.0067,  0.0002],
         [ 0.0911,  0.0132]],

        [[-0.0392, -0.0002],
         [-0.0067,  0.0002],
         [ 0.0911,  0.0132]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0218, -0.1670],
         [-0.0381, -0.2084],
         [ 0.0231,  0.0243]],

        [[ 0.0218, -0.1670],
         [-0.0381, -0.2084],
         [ 0.0231,  0.0243]],

        [[ 0.0218, -0.1670],
         [-0.0381, -0.2084],
         [ 0.0231,  0.0243]],

        [[ 0.0218, -0.1670],
         [-0.0381, -0.2084],
         [ 0.0231,  0.0243]],

        [[ 0.0218, -0.1670],
         [-0.0381, -0.2084],
         [ 0.0231,  0.0243]],

        [[ 0.0218, -0.1670],
         [-0.0381, -0.2084],
         [ 0.0231,  0.0243]],

        [[ 0.0468, -0.1660],
         [-0.0295, -0.2145],
         [ 0.0187,  0.0343]],

        [[ 0.0468, -0.1660],
         [-0.0295, -0.2145],
         [ 0.0187,  0.0343]],

        [[ 0.0468, -0.1660],
         [-0.0295, -0.2145],
         [ 0.0187,  0.0343]],

        [[ 0.0468, -0.1660],
         [-0.0295, -0.2145],
         [ 0.0187,  0.0343]],

        [[ 0.0468, -0.1660],
         [-0.0295, -0.2145],
         [ 0.0187,  0.0343]],

        [[ 0.0468, -0.1660],
         [-0.0295, -0.2145],
         [ 0.0187,  0.0343]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:21,366][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:23,459][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:23,462][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:23,492][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:23,493][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:23,493][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:23,494][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:23,527][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=8
[2025-01-13 12:56:23,529][train.train_model][ERROR] -   => agent_in=tensor([[1602.3936, 1311.2023,    7.5059,   -4.1301],
        [1606.1454, 1309.1379,    7.7149,   -4.1615],
        [1609.9976, 1307.0599,    7.7061,   -4.2046],
        [1614.2289, 1304.7512,    8.0860,   -4.3487],
        [1618.2706, 1302.5775,    8.0872,   -4.3966],
        [1622.3134, 1300.3798,    8.2111,   -4.4261]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1602.3936, 1311.2023],
        [1606.1454, 1309.1379],
        [1609.9976, 1307.0599],
        [1614.2289, 1304.7512],
        [1618.2706, 1302.5775],
        [1622.3134, 1300.3798],
        [1626.4225, 1298.1648],
        [1630.1206, 1296.1642],
        [1634.5472, 1293.7529],
        [1638.4619, 1291.6199],
        [1642.2904, 1289.5419],
        [1645.8486, 1287.5708]], device='cuda:0')
[2025-01-13 12:56:23,533][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3238, 0.3694, 0.3068],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0062, -0.0098],
         [ 0.0422, -0.0367],
         [ 0.0927,  0.0040]],

        [[ 0.0062, -0.0098],
         [ 0.0422, -0.0367],
         [ 0.0927,  0.0040]],

        [[ 0.0062, -0.0098],
         [ 0.0422, -0.0367],
         [ 0.0927,  0.0040]],

        [[ 0.0062, -0.0098],
         [ 0.0422, -0.0367],
         [ 0.0927,  0.0040]],

        [[ 0.0062, -0.0098],
         [ 0.0422, -0.0367],
         [ 0.0927,  0.0040]],

        [[ 0.0062, -0.0098],
         [ 0.0422, -0.0367],
         [ 0.0927,  0.0040]],

        [[-0.0206,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0888,  0.0051]],

        [[-0.0206,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0888,  0.0051]],

        [[-0.0206,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0888,  0.0051]],

        [[-0.0206,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0888,  0.0051]],

        [[-0.0206,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0888,  0.0051]],

        [[-0.0206,  0.0280],
         [ 0.0276, -0.0305],
         [ 0.0888,  0.0051]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0240, -0.1184],
         [-0.0172, -0.2499],
         [ 0.0614,  0.0299]],

        [[ 0.0240, -0.1184],
         [-0.0172, -0.2499],
         [ 0.0614,  0.0299]],

        [[ 0.0240, -0.1184],
         [-0.0172, -0.2499],
         [ 0.0614,  0.0299]],

        [[ 0.0240, -0.1184],
         [-0.0172, -0.2499],
         [ 0.0614,  0.0299]],

        [[ 0.0240, -0.1184],
         [-0.0172, -0.2499],
         [ 0.0614,  0.0299]],

        [[ 0.0240, -0.1184],
         [-0.0172, -0.2499],
         [ 0.0614,  0.0299]],

        [[ 0.0622, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0483,  0.0326]],

        [[ 0.0622, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0483,  0.0326]],

        [[ 0.0622, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0483,  0.0326]],

        [[ 0.0622, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0483,  0.0326]],

        [[ 0.0622, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0483,  0.0326]],

        [[ 0.0622, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0483,  0.0326]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:23,533][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:23,538][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:23,541][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:23,571][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:23,572][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:23,572][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:23,573][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:23,606][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=9
[2025-01-13 12:56:23,608][train.train_model][ERROR] -   => agent_in=tensor([[ 7.7321e+02,  1.6712e+03,  3.0250e-01, -8.2495e+00],
        [ 7.7335e+02,  1.6674e+03,  2.7393e-01, -8.7557e+00],
        [ 7.7349e+02,  1.6631e+03,  2.7133e-01, -9.0237e+00],
        [ 7.7362e+02,  1.6586e+03,  3.1203e-01, -9.3675e+00],
        [ 7.7375e+02,  1.6548e+03,  3.3074e-01, -9.6059e+00],
        [ 7.7391e+02,  1.6500e+03,  3.9442e-01, -9.7695e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 773.2122, 1671.1616],
        [ 773.3483, 1667.4482],
        [ 773.4851, 1663.0763],
        [ 773.6206, 1658.5707],
        [ 773.7452, 1654.8308],
        [ 773.9103, 1650.0345],
        [ 774.1075, 1645.1509],
        [ 774.3242, 1640.1820],
        [ 774.5432, 1635.1294],
        [ 774.7752, 1630.1080],
        [ 774.9976, 1624.9612],
        [ 775.1833, 1619.7979]], device='cuda:0')
[2025-01-13 12:56:23,612][train.train_model][ERROR] -   => pi=tensor([[0.3295, 0.3678, 0.3026],
        [0.3295, 0.3678, 0.3026],
        [0.3295, 0.3678, 0.3026],
        [0.3295, 0.3678, 0.3026],
        [0.3295, 0.3678, 0.3026],
        [0.3295, 0.3678, 0.3026],
        [0.3299, 0.3668, 0.3034],
        [0.3299, 0.3668, 0.3034],
        [0.3299, 0.3668, 0.3034],
        [0.3299, 0.3668, 0.3034],
        [0.3299, 0.3668, 0.3034],
        [0.3299, 0.3668, 0.3034]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0136, -0.0156],
         [ 0.0298, -0.0050],
         [ 0.0925,  0.0110]],

        [[ 0.0136, -0.0156],
         [ 0.0298, -0.0050],
         [ 0.0925,  0.0110]],

        [[ 0.0136, -0.0156],
         [ 0.0298, -0.0050],
         [ 0.0925,  0.0110]],

        [[ 0.0136, -0.0156],
         [ 0.0298, -0.0050],
         [ 0.0925,  0.0110]],

        [[ 0.0136, -0.0156],
         [ 0.0298, -0.0050],
         [ 0.0925,  0.0110]],

        [[ 0.0136, -0.0156],
         [ 0.0298, -0.0050],
         [ 0.0925,  0.0110]],

        [[-0.0146,  0.0201],
         [ 0.0098,  0.0019],
         [ 0.0889,  0.0060]],

        [[-0.0146,  0.0201],
         [ 0.0098,  0.0019],
         [ 0.0889,  0.0060]],

        [[-0.0146,  0.0201],
         [ 0.0098,  0.0019],
         [ 0.0889,  0.0060]],

        [[-0.0146,  0.0201],
         [ 0.0098,  0.0019],
         [ 0.0889,  0.0060]],

        [[-0.0146,  0.0201],
         [ 0.0098,  0.0019],
         [ 0.0889,  0.0060]],

        [[-0.0146,  0.0201],
         [ 0.0098,  0.0019],
         [ 0.0889,  0.0060]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0498, -0.1532],
         [-0.0337, -0.2050],
         [ 0.0582,  0.0291]],

        [[ 0.0498, -0.1532],
         [-0.0337, -0.2050],
         [ 0.0582,  0.0291]],

        [[ 0.0498, -0.1532],
         [-0.0337, -0.2050],
         [ 0.0582,  0.0291]],

        [[ 0.0498, -0.1532],
         [-0.0337, -0.2050],
         [ 0.0582,  0.0291]],

        [[ 0.0498, -0.1532],
         [-0.0337, -0.2050],
         [ 0.0582,  0.0291]],

        [[ 0.0498, -0.1532],
         [-0.0337, -0.2050],
         [ 0.0582,  0.0291]],

        [[ 0.0781, -0.1530],
         [-0.0290, -0.2142],
         [ 0.0516,  0.0362]],

        [[ 0.0781, -0.1530],
         [-0.0290, -0.2142],
         [ 0.0516,  0.0362]],

        [[ 0.0781, -0.1530],
         [-0.0290, -0.2142],
         [ 0.0516,  0.0362]],

        [[ 0.0781, -0.1530],
         [-0.0290, -0.2142],
         [ 0.0516,  0.0362]],

        [[ 0.0781, -0.1530],
         [-0.0290, -0.2142],
         [ 0.0516,  0.0362]],

        [[ 0.0781, -0.1530],
         [-0.0290, -0.2142],
         [ 0.0516,  0.0362]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:23,612][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:23,616][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 12:56:23,618][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 12:56:23,648][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 12:56:23,648][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 12:56:23,649][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 12:56:23,650][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:56:23,670][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=10
[2025-01-13 12:56:23,672][train.train_model][ERROR] -   => agent_in=tensor([[ 3.8932e+02,  1.1333e+03, -1.9052e-05, -3.6171e-05],
        [ 3.8932e+02,  1.1333e+03, -1.8855e-05, -3.5833e-05],
        [ 3.8932e+02,  1.1333e+03, -3.8532e-02, -7.3904e-02],
        [ 3.8930e+02,  1.1332e+03, -3.5459e-01, -6.9716e-01],
        [ 3.8912e+02,  1.1329e+03, -6.7518e-01, -1.5594e+00],
        [ 3.8878e+02,  1.1321e+03, -9.0173e-01, -2.4067e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 389.3161, 1133.2850],
        [ 389.3161, 1133.2850],
        [ 389.3161, 1133.2850],
        [ 389.2969, 1133.2480],
        [ 389.1196, 1132.8995],
        [ 388.7817, 1132.1191],
        [ 388.3309, 1130.9160],
        [ 387.8039, 1129.4634],
        [ 387.2787, 1128.0520],
        [ 386.4971, 1125.9973],
        [ 385.5492, 1123.6102],
        [ 384.4668, 1120.9089]], device='cuda:0')
[2025-01-13 12:56:23,675][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0027, -0.0325],
         [ 0.0211, -0.0116],
         [ 0.0984,  0.0161]],

        [[ 0.0027, -0.0325],
         [ 0.0211, -0.0116],
         [ 0.0984,  0.0161]],

        [[ 0.0027, -0.0325],
         [ 0.0211, -0.0116],
         [ 0.0984,  0.0161]],

        [[ 0.0027, -0.0325],
         [ 0.0211, -0.0116],
         [ 0.0984,  0.0161]],

        [[ 0.0027, -0.0325],
         [ 0.0211, -0.0116],
         [ 0.0984,  0.0161]],

        [[ 0.0027, -0.0325],
         [ 0.0211, -0.0116],
         [ 0.0984,  0.0161]],

        [[-0.0224,  0.0054],
         [-0.0029, -0.0009],
         [ 0.0979,  0.0053]],

        [[-0.0224,  0.0054],
         [-0.0029, -0.0009],
         [ 0.0979,  0.0053]],

        [[-0.0224,  0.0054],
         [-0.0029, -0.0009],
         [ 0.0979,  0.0053]],

        [[-0.0224,  0.0054],
         [-0.0029, -0.0009],
         [ 0.0979,  0.0053]],

        [[-0.0224,  0.0054],
         [-0.0029, -0.0009],
         [ 0.0979,  0.0053]],

        [[-0.0224,  0.0054],
         [-0.0029, -0.0009],
         [ 0.0979,  0.0053]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0419, -0.1583],
         [-0.0383, -0.1877],
         [ 0.0310,  0.0227]],

        [[ 0.0419, -0.1583],
         [-0.0383, -0.1877],
         [ 0.0310,  0.0227]],

        [[ 0.0419, -0.1583],
         [-0.0383, -0.1877],
         [ 0.0310,  0.0227]],

        [[ 0.0419, -0.1583],
         [-0.0383, -0.1877],
         [ 0.0310,  0.0227]],

        [[ 0.0419, -0.1583],
         [-0.0383, -0.1877],
         [ 0.0310,  0.0227]],

        [[ 0.0419, -0.1583],
         [-0.0383, -0.1877],
         [ 0.0310,  0.0227]],

        [[ 0.0648, -0.1562],
         [-0.0329, -0.2007],
         [ 0.0310,  0.0333]],

        [[ 0.0648, -0.1562],
         [-0.0329, -0.2007],
         [ 0.0310,  0.0333]],

        [[ 0.0648, -0.1562],
         [-0.0329, -0.2007],
         [ 0.0310,  0.0333]],

        [[ 0.0648, -0.1562],
         [-0.0329, -0.2007],
         [ 0.0310,  0.0333]],

        [[ 0.0648, -0.1562],
         [-0.0329, -0.2007],
         [ 0.0310,  0.0333]],

        [[ 0.0648, -0.1562],
         [-0.0329, -0.2007],
         [ 0.0310,  0.0333]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:23,676][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:26,937][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:26,941][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:26,972][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:26,973][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:26,973][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:26,975][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:27,007][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=0
[2025-01-13 12:56:27,009][train.train_model][ERROR] -   => agent_in=tensor([[ 873.2697, 1867.5603,   -5.7234,    3.5980],
        [ 870.4088, 1869.3589,   -5.6397,    3.5708],
        [ 867.5896, 1871.1438,   -5.4182,    3.4254],
        [ 864.8811, 1872.8562,   -5.2736,    3.3171],
        [ 862.2451, 1874.5143,   -5.0552,    3.1200],
        [ 859.4662, 1876.2294,   -4.8648,    2.9810]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 873.2697, 1867.5603],
        [ 870.4088, 1869.3589],
        [ 867.5896, 1871.1438],
        [ 864.8811, 1872.8562],
        [ 862.2451, 1874.5143],
        [ 859.4662, 1876.2294],
        [ 857.0346, 1877.7194],
        [ 854.7612, 1879.0966],
        [ 852.5053, 1880.4707],
        [ 850.4337, 1881.7307],
        [ 848.0394, 1883.2101],
        [ 845.4049, 1884.8805]], device='cuda:0')
[2025-01-13 12:56:27,013][train.train_model][ERROR] -   => pi=tensor([[0.3295, 0.3681, 0.3025],
        [0.3295, 0.3681, 0.3025],
        [0.3295, 0.3681, 0.3025],
        [0.3295, 0.3681, 0.3025],
        [0.3295, 0.3681, 0.3025],
        [0.3295, 0.3681, 0.3025],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031]], device='cuda:0') mu=tensor([[[ 0.0163, -0.0170],
         [ 0.0305, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0163, -0.0170],
         [ 0.0305, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0163, -0.0170],
         [ 0.0305, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0163, -0.0170],
         [ 0.0305, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0163, -0.0170],
         [ 0.0305, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0163, -0.0170],
         [ 0.0305, -0.0058],
         [ 0.0938,  0.0119]],

        [[-0.0125,  0.0191],
         [ 0.0104,  0.0010],
         [ 0.0894,  0.0075]],

        [[-0.0125,  0.0191],
         [ 0.0104,  0.0010],
         [ 0.0894,  0.0075]],

        [[-0.0125,  0.0191],
         [ 0.0104,  0.0010],
         [ 0.0894,  0.0075]],

        [[-0.0125,  0.0191],
         [ 0.0104,  0.0010],
         [ 0.0894,  0.0075]],

        [[-0.0125,  0.0191],
         [ 0.0104,  0.0010],
         [ 0.0894,  0.0075]],

        [[-0.0125,  0.0191],
         [ 0.0104,  0.0010],
         [ 0.0894,  0.0075]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0524, -0.1523],
         [-0.0326, -0.2042],
         [ 0.0558,  0.0287]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2042],
         [ 0.0558,  0.0287]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2042],
         [ 0.0558,  0.0287]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2042],
         [ 0.0558,  0.0287]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2042],
         [ 0.0558,  0.0287]],

        [[ 0.0524, -0.1523],
         [-0.0326, -0.2042],
         [ 0.0558,  0.0287]],

        [[ 0.0805, -0.1523],
         [-0.0278, -0.2140],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0278, -0.2140],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0278, -0.2140],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0278, -0.2140],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0278, -0.2140],
         [ 0.0495,  0.0367]],

        [[ 0.0805, -0.1523],
         [-0.0278, -0.2140],
         [ 0.0495,  0.0367]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:56:27,016][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:27,018][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:27,048][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:27,049][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:27,049][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:27,050][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:27,081][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=1
[2025-01-13 12:56:27,083][train.train_model][ERROR] -   => agent_in=tensor([[ 3.9609e+02,  1.1474e+03, -1.2863e-04,  8.5636e-05],
        [ 3.9609e+02,  1.1474e+03, -1.0998e-04,  7.4718e-05],
        [ 3.9609e+02,  1.1474e+03, -8.6321e-05,  8.2352e-05],
        [ 3.9609e+02,  1.1474e+03, -1.1263e-04, -1.2039e-05],
        [ 3.9609e+02,  1.1474e+03, -8.9997e-05,  4.4610e-06],
        [ 3.9609e+02,  1.1474e+03, -5.2940e-05,  5.6597e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 396.0914, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0910, 1147.3601],
        [ 396.0910, 1147.3601]], device='cuda:0')
[2025-01-13 12:56:27,087][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005],
        [0.3324, 0.3670, 0.3005]], device='cuda:0') mu=tensor([[[ 0.0029, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0029, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0029, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0029, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0029, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[ 0.0029, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0983,  0.0162]],

        [[-0.0222,  0.0056],
         [-0.0029, -0.0009],
         [ 0.0977,  0.0053]],

        [[-0.0222,  0.0056],
         [-0.0029, -0.0009],
         [ 0.0977,  0.0053]],

        [[-0.0222,  0.0056],
         [-0.0029, -0.0009],
         [ 0.0977,  0.0053]],

        [[-0.0222,  0.0056],
         [-0.0029, -0.0009],
         [ 0.0977,  0.0053]],

        [[-0.0222,  0.0056],
         [-0.0029, -0.0009],
         [ 0.0977,  0.0053]],

        [[-0.0222,  0.0056],
         [-0.0029, -0.0009],
         [ 0.0977,  0.0053]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0421, -0.1581],
         [-0.0385, -0.1879],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1581],
         [-0.0385, -0.1879],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1581],
         [-0.0385, -0.1879],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1581],
         [-0.0385, -0.1879],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1581],
         [-0.0385, -0.1879],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1581],
         [-0.0385, -0.1879],
         [ 0.0311,  0.0228]],

        [[ 0.0651, -0.1560],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0651, -0.1560],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0651, -0.1560],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0651, -0.1560],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0651, -0.1560],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]],

        [[ 0.0651, -0.1560],
         [-0.0331, -0.2008],
         [ 0.0311,  0.0334]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:56:27,088][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 12:56:27,090][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 12:56:27,117][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 12:56:27,118][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 12:56:27,118][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 12:56:27,119][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:56:27,141][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=2
[2025-01-13 12:56:27,143][train.train_model][ERROR] -   => agent_in=tensor([[ 1.2170e+03,  2.7927e+03, -8.0835e-01,  6.7101e-01],
        [ 1.2166e+03,  2.7931e+03, -5.6761e-01,  4.6959e-01],
        [ 1.2163e+03,  2.7933e+03, -1.6878e-01,  1.3934e-01],
        [ 1.2162e+03,  2.7934e+03,  3.6582e-02, -2.6921e-02],
        [ 1.2162e+03,  2.7934e+03,  7.5744e-03, -3.5029e-03],
        [ 1.2162e+03,  2.7934e+03,  1.0428e-03,  1.4729e-03]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1216.9841, 2792.7312],
        [1216.5796, 2793.0671],
        [1216.2955, 2793.3020],
        [1216.2112, 2793.3716],
        [1216.2294, 2793.3582],
        [1216.2332, 2793.3564],
        [1216.2338, 2793.3572],
        [1216.2341, 2793.3579],
        [1216.2346, 2793.3584],
        [1216.2350, 2793.3589],
        [1216.1223, 2793.4521],
        [1215.7076, 2793.7937]], device='cuda:0')
[2025-01-13 12:56:27,147][train.train_model][ERROR] -   => pi=tensor([[0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3308, 0.3679, 0.3013],
        [0.3312, 0.3671, 0.3017],
        [0.3312, 0.3671, 0.3017],
        [0.3312, 0.3671, 0.3017],
        [0.3312, 0.3671, 0.3017],
        [0.3312, 0.3671, 0.3017],
        [0.3312, 0.3671, 0.3017]], device='cuda:0') mu=tensor([[[ 0.0154, -0.0188],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0188],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0188],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0188],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0188],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0188],
         [ 0.0280, -0.0100],
         [ 0.0916,  0.0154]],

        [[-0.0113,  0.0166],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0166],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0166],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0166],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0166],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0166],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0593, -0.1493],
         [-0.0345, -0.1995],
         [ 0.0551,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0345, -0.1995],
         [ 0.0551,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0345, -0.1995],
         [ 0.0551,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0345, -0.1995],
         [ 0.0551,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0345, -0.1995],
         [ 0.0551,  0.0294]],

        [[ 0.0593, -0.1493],
         [-0.0345, -0.1995],
         [ 0.0551,  0.0294]],

        [[ 0.0861, -0.1489],
         [-0.0296, -0.2089],
         [ 0.0493,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0296, -0.2089],
         [ 0.0493,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0296, -0.2089],
         [ 0.0493,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0296, -0.2089],
         [ 0.0493,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0296, -0.2089],
         [ 0.0493,  0.0377]],

        [[ 0.0861, -0.1489],
         [-0.0296, -0.2089],
         [ 0.0493,  0.0377]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:56:27,147][train.train_model][WARNING] - No valid samples found in validation.
[2025-01-13 12:56:58,081][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:58,088][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:58,136][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:58,137][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:58,137][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:58,138][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:58,162][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=0
[2025-01-13 12:56:58,164][train.train_model][ERROR] -   => agent_in=tensor([[2194.3940, 1118.6818,   -7.4056,    4.0599],
        [2190.6924, 1120.7112,   -7.3513,    4.0110],
        [2187.0176, 1122.7162,   -7.2102,    3.8962],
        [2183.4133, 1124.6638,   -6.8058,    3.6536],
        [2180.0071, 1126.4926,   -6.9814,    3.7805],
        [2176.5178, 1128.3820,   -6.9545,    3.7271]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[2194.3940, 1118.6818],
        [2190.6924, 1120.7112],
        [2187.0176, 1122.7162],
        [2183.4133, 1124.6638],
        [2180.0071, 1126.4926],
        [2176.5178, 1128.3820],
        [2173.0374, 1130.2472],
        [2169.6008, 1132.0778],
        [2166.2422, 1133.8632],
        [2162.7065, 1135.7604],
        [2158.7620, 1137.8987],
        [2155.1077, 1139.9015]], device='cuda:0')
[2025-01-13 12:56:58,169][train.train_model][ERROR] -   => pi=tensor([[0.3304, 0.3678, 0.3018],
        [0.3304, 0.3678, 0.3018],
        [0.3304, 0.3678, 0.3018],
        [0.3304, 0.3678, 0.3018],
        [0.3304, 0.3678, 0.3018],
        [0.3304, 0.3678, 0.3018],
        [0.3299, 0.3673, 0.3029],
        [0.3299, 0.3673, 0.3029],
        [0.3299, 0.3673, 0.3029],
        [0.3299, 0.3673, 0.3029],
        [0.3299, 0.3673, 0.3029],
        [0.3299, 0.3673, 0.3029]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0247,  0.0018],
         [ 0.0306, -0.0013],
         [ 0.1158,  0.0458]],

        [[-0.0247,  0.0018],
         [ 0.0306, -0.0013],
         [ 0.1158,  0.0458]],

        [[-0.0247,  0.0018],
         [ 0.0306, -0.0013],
         [ 0.1158,  0.0458]],

        [[-0.0247,  0.0018],
         [ 0.0306, -0.0013],
         [ 0.1158,  0.0458]],

        [[-0.0247,  0.0018],
         [ 0.0306, -0.0013],
         [ 0.1158,  0.0458]],

        [[-0.0247,  0.0018],
         [ 0.0306, -0.0013],
         [ 0.1158,  0.0458]],

        [[-0.0352,  0.0173],
         [ 0.0280, -0.0042],
         [ 0.1107,  0.0518]],

        [[-0.0352,  0.0173],
         [ 0.0280, -0.0042],
         [ 0.1107,  0.0518]],

        [[-0.0352,  0.0173],
         [ 0.0280, -0.0042],
         [ 0.1107,  0.0518]],

        [[-0.0352,  0.0173],
         [ 0.0280, -0.0042],
         [ 0.1107,  0.0518]],

        [[-0.0352,  0.0173],
         [ 0.0280, -0.0042],
         [ 0.1107,  0.0518]],

        [[-0.0352,  0.0173],
         [ 0.0280, -0.0042],
         [ 0.1107,  0.0518]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[-0.0077, -0.0820],
         [-0.0040, -0.2664],
         [ 0.0695,  0.0357]],

        [[-0.0077, -0.0820],
         [-0.0040, -0.2664],
         [ 0.0695,  0.0357]],

        [[-0.0077, -0.0820],
         [-0.0040, -0.2664],
         [ 0.0695,  0.0357]],

        [[-0.0077, -0.0820],
         [-0.0040, -0.2664],
         [ 0.0695,  0.0357]],

        [[-0.0077, -0.0820],
         [-0.0040, -0.2664],
         [ 0.0695,  0.0357]],

        [[-0.0077, -0.0820],
         [-0.0040, -0.2664],
         [ 0.0695,  0.0357]],

        [[ 0.0183, -0.0892],
         [-0.0010, -0.2559],
         [ 0.0565,  0.0343]],

        [[ 0.0183, -0.0892],
         [-0.0010, -0.2559],
         [ 0.0565,  0.0343]],

        [[ 0.0183, -0.0892],
         [-0.0010, -0.2559],
         [ 0.0565,  0.0343]],

        [[ 0.0183, -0.0892],
         [-0.0010, -0.2559],
         [ 0.0565,  0.0343]],

        [[ 0.0183, -0.0892],
         [-0.0010, -0.2559],
         [ 0.0565,  0.0343]],

        [[ 0.0183, -0.0892],
         [-0.0010, -0.2559],
         [ 0.0565,  0.0343]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:58,169][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:58,175][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:58,177][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:58,208][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:58,209][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:58,209][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:58,210][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:58,242][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=1
[2025-01-13 12:56:58,244][train.train_model][ERROR] -   => agent_in=tensor([[617.0668, 807.9842,  -9.3035,   6.2567],
        [612.4163, 811.1118,  -9.3659,   6.2560],
        [607.7292, 814.2424,  -9.1494,   6.1052],
        [603.1506, 817.2977,  -9.1250,   6.0384],
        [598.1294, 820.6204,  -9.0453,   5.9250],
        [593.6086, 823.5817,  -8.9881,   5.8721]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[617.0668, 807.9842],
        [612.4163, 811.1118],
        [607.7292, 814.2424],
        [603.1506, 817.2977],
        [598.1294, 820.6204],
        [593.6086, 823.5817],
        [589.1157, 826.5170],
        [584.6099, 829.4460],
        [580.0276, 832.4100],
        [575.3870, 835.3757],
        [570.6722, 838.3528],
        [565.9038, 841.3533]], device='cuda:0')
[2025-01-13 12:56:58,249][train.train_model][ERROR] -   => pi=tensor([[0.3316, 0.3659, 0.3026],
        [0.3316, 0.3659, 0.3026],
        [0.3316, 0.3659, 0.3026],
        [0.3316, 0.3659, 0.3026],
        [0.3316, 0.3659, 0.3026],
        [0.3316, 0.3659, 0.3026],
        [0.3311, 0.3643, 0.3046],
        [0.3311, 0.3643, 0.3046],
        [0.3311, 0.3643, 0.3046],
        [0.3311, 0.3643, 0.3046],
        [0.3311, 0.3643, 0.3046],
        [0.3311, 0.3643, 0.3046]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0148, -0.0097],
         [ 0.0332, -0.0062],
         [ 0.0775,  0.0122]],

        [[-0.0148, -0.0097],
         [ 0.0332, -0.0062],
         [ 0.0775,  0.0122]],

        [[-0.0148, -0.0097],
         [ 0.0332, -0.0062],
         [ 0.0775,  0.0122]],

        [[-0.0148, -0.0097],
         [ 0.0332, -0.0062],
         [ 0.0775,  0.0122]],

        [[-0.0148, -0.0097],
         [ 0.0332, -0.0062],
         [ 0.0775,  0.0122]],

        [[-0.0148, -0.0097],
         [ 0.0332, -0.0062],
         [ 0.0775,  0.0122]],

        [[-0.0374,  0.0255],
         [ 0.0145, -0.0040],
         [ 0.0786,  0.0128]],

        [[-0.0374,  0.0255],
         [ 0.0145, -0.0040],
         [ 0.0786,  0.0128]],

        [[-0.0374,  0.0255],
         [ 0.0145, -0.0040],
         [ 0.0786,  0.0128]],

        [[-0.0374,  0.0255],
         [ 0.0145, -0.0040],
         [ 0.0786,  0.0128]],

        [[-0.0374,  0.0255],
         [ 0.0145, -0.0040],
         [ 0.0786,  0.0128]],

        [[-0.0374,  0.0255],
         [ 0.0145, -0.0040],
         [ 0.0786,  0.0128]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0211, -0.1337],
         [-0.0288, -0.2389],
         [ 0.0544,  0.0422]],

        [[ 0.0211, -0.1337],
         [-0.0288, -0.2389],
         [ 0.0544,  0.0422]],

        [[ 0.0211, -0.1337],
         [-0.0288, -0.2389],
         [ 0.0544,  0.0422]],

        [[ 0.0211, -0.1337],
         [-0.0288, -0.2389],
         [ 0.0544,  0.0422]],

        [[ 0.0211, -0.1337],
         [-0.0288, -0.2389],
         [ 0.0544,  0.0422]],

        [[ 0.0211, -0.1337],
         [-0.0288, -0.2389],
         [ 0.0544,  0.0422]],

        [[ 0.0632, -0.1371],
         [-0.0212, -0.2344],
         [ 0.0433,  0.0439]],

        [[ 0.0632, -0.1371],
         [-0.0212, -0.2344],
         [ 0.0433,  0.0439]],

        [[ 0.0632, -0.1371],
         [-0.0212, -0.2344],
         [ 0.0433,  0.0439]],

        [[ 0.0632, -0.1371],
         [-0.0212, -0.2344],
         [ 0.0433,  0.0439]],

        [[ 0.0632, -0.1371],
         [-0.0212, -0.2344],
         [ 0.0433,  0.0439]],

        [[ 0.0632, -0.1371],
         [-0.0212, -0.2344],
         [ 0.0433,  0.0439]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:58,249][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:58,255][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:58,257][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:58,290][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:58,291][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:58,291][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:58,292][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:58,320][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=2
[2025-01-13 12:56:58,322][train.train_model][ERROR] -   => agent_in=tensor([[ 3.0919e+02,  6.6867e+02, -1.5779e-06,  9.7228e-07],
        [ 3.0919e+02,  6.6867e+02, -2.6637e-05,  1.3158e-05],
        [ 3.0919e+02,  6.6867e+02,  1.7907e-05, -8.9719e-06],
        [ 3.0919e+02,  6.6867e+02,  9.8062e-05, -4.8997e-05],
        [ 3.0919e+02,  6.6867e+02, -5.3726e-06,  2.6886e-06],
        [ 3.0919e+02,  6.6867e+02,  9.3919e-05, -4.6943e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[309.1879, 668.6680],
        [309.1879, 668.6680],
        [309.1879, 668.6680],
        [309.1879, 668.6680],
        [309.1879, 668.6680],
        [309.1879, 668.6680],
        [309.1880, 668.6680],
        [309.1880, 668.6679],
        [309.1880, 668.6679],
        [309.1880, 668.6680],
        [309.1880, 668.6680],
        [309.1879, 668.6680]], device='cuda:0')
[2025-01-13 12:56:58,326][train.train_model][ERROR] -   => pi=tensor([[0.3296, 0.3677, 0.3027],
        [0.3296, 0.3677, 0.3027],
        [0.3296, 0.3677, 0.3027],
        [0.3296, 0.3677, 0.3027],
        [0.3296, 0.3677, 0.3027],
        [0.3296, 0.3677, 0.3027],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0129, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0918,  0.0121]],

        [[ 0.0129, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0918,  0.0121]],

        [[ 0.0129, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0918,  0.0121]],

        [[ 0.0129, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0918,  0.0121]],

        [[ 0.0129, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0918,  0.0121]],

        [[ 0.0129, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0918,  0.0121]],

        [[-0.0147,  0.0202],
         [ 0.0100,  0.0009],
         [ 0.0883,  0.0077]],

        [[-0.0147,  0.0202],
         [ 0.0100,  0.0009],
         [ 0.0883,  0.0077]],

        [[-0.0147,  0.0202],
         [ 0.0100,  0.0009],
         [ 0.0883,  0.0077]],

        [[-0.0147,  0.0202],
         [ 0.0100,  0.0009],
         [ 0.0883,  0.0077]],

        [[-0.0147,  0.0202],
         [ 0.0100,  0.0009],
         [ 0.0883,  0.0077]],

        [[-0.0147,  0.0202],
         [ 0.0100,  0.0009],
         [ 0.0883,  0.0077]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0492, -0.1506],
         [-0.0342, -0.2058],
         [ 0.0588,  0.0299]],

        [[ 0.0492, -0.1506],
         [-0.0342, -0.2058],
         [ 0.0588,  0.0299]],

        [[ 0.0492, -0.1506],
         [-0.0342, -0.2058],
         [ 0.0588,  0.0299]],

        [[ 0.0492, -0.1506],
         [-0.0342, -0.2058],
         [ 0.0588,  0.0299]],

        [[ 0.0492, -0.1506],
         [-0.0342, -0.2058],
         [ 0.0588,  0.0299]],

        [[ 0.0492, -0.1506],
         [-0.0342, -0.2058],
         [ 0.0588,  0.0299]],

        [[ 0.0775, -0.1505],
         [-0.0296, -0.2145],
         [ 0.0522,  0.0371]],

        [[ 0.0775, -0.1505],
         [-0.0296, -0.2145],
         [ 0.0522,  0.0371]],

        [[ 0.0775, -0.1505],
         [-0.0296, -0.2145],
         [ 0.0522,  0.0371]],

        [[ 0.0775, -0.1505],
         [-0.0296, -0.2145],
         [ 0.0522,  0.0371]],

        [[ 0.0775, -0.1505],
         [-0.0296, -0.2145],
         [ 0.0522,  0.0371]],

        [[ 0.0775, -0.1505],
         [-0.0296, -0.2145],
         [ 0.0522,  0.0371]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:58,326][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:56:58,332][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:56:58,334][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:56:58,367][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:56:58,368][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:56:58,368][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:56:58,369][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:56:58,397][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=3
[2025-01-13 12:56:58,399][train.train_model][ERROR] -   => agent_in=tensor([[1300.6910, 1069.6023,   -3.9253,   -4.4408],
        [1298.7266, 1067.3800,   -3.9480,   -4.4823],
        [1296.3573, 1064.6901,   -4.1734,   -4.8169],
        [1294.6873, 1062.7625,   -4.3131,   -4.9777],
        [1292.5288, 1060.2715,   -4.6897,   -5.4013],
        [1290.1846, 1057.5714,   -4.7596,   -5.5081]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1300.6910, 1069.6023],
        [1298.7266, 1067.3800],
        [1296.3573, 1064.6901],
        [1294.6873, 1062.7625],
        [1292.5288, 1060.2715],
        [1290.1846, 1057.5714],
        [1287.8026, 1054.8151],
        [1285.3120, 1051.9121],
        [1282.2971, 1048.3301],
        [1279.7113, 1045.2753],
        [1277.0841, 1042.2600],
        [1274.3601, 1039.2183]], device='cuda:0')
[2025-01-13 12:56:58,403][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0060, -0.0100],
         [ 0.0422, -0.0368],
         [ 0.0925,  0.0041]],

        [[ 0.0060, -0.0100],
         [ 0.0422, -0.0368],
         [ 0.0925,  0.0041]],

        [[ 0.0060, -0.0100],
         [ 0.0422, -0.0368],
         [ 0.0925,  0.0041]],

        [[ 0.0060, -0.0100],
         [ 0.0422, -0.0368],
         [ 0.0925,  0.0041]],

        [[ 0.0060, -0.0100],
         [ 0.0422, -0.0368],
         [ 0.0925,  0.0041]],

        [[ 0.0060, -0.0100],
         [ 0.0422, -0.0368],
         [ 0.0925,  0.0041]],

        [[-0.0208,  0.0277],
         [ 0.0275, -0.0305],
         [ 0.0887,  0.0050]],

        [[-0.0208,  0.0277],
         [ 0.0275, -0.0305],
         [ 0.0887,  0.0050]],

        [[-0.0208,  0.0277],
         [ 0.0275, -0.0305],
         [ 0.0887,  0.0050]],

        [[-0.0208,  0.0277],
         [ 0.0275, -0.0305],
         [ 0.0887,  0.0050]],

        [[-0.0208,  0.0277],
         [ 0.0275, -0.0305],
         [ 0.0887,  0.0050]],

        [[-0.0208,  0.0277],
         [ 0.0275, -0.0305],
         [ 0.0887,  0.0050]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0240, -0.1183],
         [-0.0171, -0.2494],
         [ 0.0615,  0.0301]],

        [[ 0.0240, -0.1183],
         [-0.0171, -0.2494],
         [ 0.0615,  0.0301]],

        [[ 0.0240, -0.1183],
         [-0.0171, -0.2494],
         [ 0.0615,  0.0301]],

        [[ 0.0240, -0.1183],
         [-0.0171, -0.2494],
         [ 0.0615,  0.0301]],

        [[ 0.0240, -0.1183],
         [-0.0171, -0.2494],
         [ 0.0615,  0.0301]],

        [[ 0.0240, -0.1183],
         [-0.0171, -0.2494],
         [ 0.0615,  0.0301]],

        [[ 0.0621, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0486,  0.0329]],

        [[ 0.0621, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0486,  0.0329]],

        [[ 0.0621, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0486,  0.0329]],

        [[ 0.0621, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0486,  0.0329]],

        [[ 0.0621, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0486,  0.0329]],

        [[ 0.0621, -0.1215],
         [-0.0126, -0.2499],
         [ 0.0486,  0.0329]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:56:58,403][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:00,540][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:00,543][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:00,575][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:00,576][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:00,576][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:00,577][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:00,610][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=4
[2025-01-13 12:57:00,612][train.train_model][ERROR] -   => agent_in=tensor([[1799.2393, 1205.5963,    4.6483,    2.9897],
        [1801.5630, 1207.0908,    4.6927,    2.9173],
        [1803.9086, 1208.5491,    4.7354,    2.7695],
        [1806.2758, 1209.9335,    4.6627,    2.5537],
        [1808.6039, 1211.2086,    4.8333,    2.5959],
        [1811.0173, 1212.5049,    4.9664,    2.6948]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1799.2393, 1205.5963],
        [1801.5630, 1207.0908],
        [1803.9086, 1208.5491],
        [1806.2758, 1209.9335],
        [1808.6039, 1211.2086],
        [1811.0173, 1212.5049],
        [1813.4972, 1213.8503],
        [1816.0100, 1215.2681],
        [1818.4102, 1216.7455],
        [1820.6190, 1218.3096],
        [1822.3184, 1219.7288],
        [1824.3093, 1221.7653]], device='cuda:0')
[2025-01-13 12:57:00,616][train.train_model][ERROR] -   => pi=tensor([[0.3250, 0.3699, 0.3051],
        [0.3250, 0.3699, 0.3051],
        [0.3250, 0.3699, 0.3051],
        [0.3250, 0.3699, 0.3051],
        [0.3250, 0.3699, 0.3051],
        [0.3250, 0.3699, 0.3051],
        [0.3249, 0.3691, 0.3060],
        [0.3249, 0.3691, 0.3060],
        [0.3249, 0.3691, 0.3060],
        [0.3249, 0.3691, 0.3060],
        [0.3249, 0.3691, 0.3060],
        [0.3249, 0.3691, 0.3060]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0090, -0.0194],
         [ 0.0497, -0.0149],
         [ 0.1106,  0.0370]],

        [[-0.0090, -0.0194],
         [ 0.0497, -0.0149],
         [ 0.1106,  0.0370]],

        [[-0.0090, -0.0194],
         [ 0.0497, -0.0149],
         [ 0.1106,  0.0370]],

        [[-0.0090, -0.0194],
         [ 0.0497, -0.0149],
         [ 0.1106,  0.0370]],

        [[-0.0090, -0.0194],
         [ 0.0497, -0.0149],
         [ 0.1106,  0.0370]],

        [[-0.0090, -0.0194],
         [ 0.0497, -0.0149],
         [ 0.1106,  0.0370]],

        [[-0.0315,  0.0116],
         [ 0.0330, -0.0110],
         [ 0.1047,  0.0384]],

        [[-0.0315,  0.0116],
         [ 0.0330, -0.0110],
         [ 0.1047,  0.0384]],

        [[-0.0315,  0.0116],
         [ 0.0330, -0.0110],
         [ 0.1047,  0.0384]],

        [[-0.0315,  0.0116],
         [ 0.0330, -0.0110],
         [ 0.1047,  0.0384]],

        [[-0.0315,  0.0116],
         [ 0.0330, -0.0110],
         [ 0.1047,  0.0384]],

        [[-0.0315,  0.0116],
         [ 0.0330, -0.0110],
         [ 0.1047,  0.0384]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0086, -0.0873],
         [-0.0172, -0.2463],
         [ 0.0547,  0.0421]],

        [[ 0.0086, -0.0873],
         [-0.0172, -0.2463],
         [ 0.0547,  0.0421]],

        [[ 0.0086, -0.0873],
         [-0.0172, -0.2463],
         [ 0.0547,  0.0421]],

        [[ 0.0086, -0.0873],
         [-0.0172, -0.2463],
         [ 0.0547,  0.0421]],

        [[ 0.0086, -0.0873],
         [-0.0172, -0.2463],
         [ 0.0547,  0.0421]],

        [[ 0.0086, -0.0873],
         [-0.0172, -0.2463],
         [ 0.0547,  0.0421]],

        [[ 0.0399, -0.0911],
         [-0.0117, -0.2450],
         [ 0.0416,  0.0455]],

        [[ 0.0399, -0.0911],
         [-0.0117, -0.2450],
         [ 0.0416,  0.0455]],

        [[ 0.0399, -0.0911],
         [-0.0117, -0.2450],
         [ 0.0416,  0.0455]],

        [[ 0.0399, -0.0911],
         [-0.0117, -0.2450],
         [ 0.0416,  0.0455]],

        [[ 0.0399, -0.0911],
         [-0.0117, -0.2450],
         [ 0.0416,  0.0455]],

        [[ 0.0399, -0.0911],
         [-0.0117, -0.2450],
         [ 0.0416,  0.0455]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:00,616][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:00,621][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:00,623][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:00,657][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:00,657][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:00,658][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:00,659][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:00,690][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=5
[2025-01-13 12:57:00,692][train.train_model][ERROR] -   => agent_in=tensor([[ 7.5942e+02,  1.5156e+03,  1.0210e+00, -9.0132e-01],
        [ 7.5983e+02,  1.5153e+03,  1.2654e+00, -1.1373e+00],
        [ 7.6046e+02,  1.5147e+03,  1.5584e+00, -1.4113e+00],
        [ 7.6124e+02,  1.5140e+03,  1.8570e+00, -1.6856e+00],
        [ 7.6208e+02,  1.5132e+03,  2.0264e+00, -1.8851e+00],
        [ 7.6319e+02,  1.5122e+03,  2.2957e+00, -2.1642e+00]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 759.4195, 1515.6305],
        [ 759.8276, 1515.2703],
        [ 760.4601, 1514.7017],
        [ 761.2400, 1513.9954],
        [ 762.0768, 1513.2358],
        [ 763.1906, 1512.1996],
        [ 764.3382, 1511.1178],
        [ 765.5182, 1509.9696],
        [ 766.7373, 1508.7709],
        [ 768.0188, 1507.4822],
        [ 769.3177, 1506.1688],
        [ 770.6310, 1504.8439]], device='cuda:0')
[2025-01-13 12:57:00,696][train.train_model][ERROR] -   => pi=tensor([[0.3286, 0.3698, 0.3016],
        [0.3286, 0.3698, 0.3016],
        [0.3286, 0.3698, 0.3016],
        [0.3286, 0.3698, 0.3016],
        [0.3286, 0.3698, 0.3016],
        [0.3286, 0.3698, 0.3016],
        [0.3283, 0.3687, 0.3030],
        [0.3283, 0.3687, 0.3030],
        [0.3283, 0.3687, 0.3030],
        [0.3283, 0.3687, 0.3030],
        [0.3283, 0.3687, 0.3030],
        [0.3283, 0.3687, 0.3030]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0023, -0.0164],
         [ 0.0309, -0.0068],
         [ 0.0898,  0.0175]],

        [[-0.0023, -0.0164],
         [ 0.0309, -0.0068],
         [ 0.0898,  0.0175]],

        [[-0.0023, -0.0164],
         [ 0.0309, -0.0068],
         [ 0.0898,  0.0175]],

        [[-0.0023, -0.0164],
         [ 0.0309, -0.0068],
         [ 0.0898,  0.0175]],

        [[-0.0023, -0.0164],
         [ 0.0309, -0.0068],
         [ 0.0898,  0.0175]],

        [[-0.0023, -0.0164],
         [ 0.0309, -0.0068],
         [ 0.0898,  0.0175]],

        [[-0.0261,  0.0190],
         [ 0.0113, -0.0015],
         [ 0.0905,  0.0126]],

        [[-0.0261,  0.0190],
         [ 0.0113, -0.0015],
         [ 0.0905,  0.0126]],

        [[-0.0261,  0.0190],
         [ 0.0113, -0.0015],
         [ 0.0905,  0.0126]],

        [[-0.0261,  0.0190],
         [ 0.0113, -0.0015],
         [ 0.0905,  0.0126]],

        [[-0.0261,  0.0190],
         [ 0.0113, -0.0015],
         [ 0.0905,  0.0126]],

        [[-0.0261,  0.0190],
         [ 0.0113, -0.0015],
         [ 0.0905,  0.0126]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0366, -0.1455],
         [-0.0347, -0.2219],
         [ 0.0397,  0.0384]],

        [[ 0.0366, -0.1455],
         [-0.0347, -0.2219],
         [ 0.0397,  0.0384]],

        [[ 0.0366, -0.1455],
         [-0.0347, -0.2219],
         [ 0.0397,  0.0384]],

        [[ 0.0366, -0.1455],
         [-0.0347, -0.2219],
         [ 0.0397,  0.0384]],

        [[ 0.0366, -0.1455],
         [-0.0347, -0.2219],
         [ 0.0397,  0.0384]],

        [[ 0.0366, -0.1455],
         [-0.0347, -0.2219],
         [ 0.0397,  0.0384]],

        [[ 0.0704, -0.1451],
         [-0.0269, -0.2245],
         [ 0.0303,  0.0419]],

        [[ 0.0704, -0.1451],
         [-0.0269, -0.2245],
         [ 0.0303,  0.0419]],

        [[ 0.0704, -0.1451],
         [-0.0269, -0.2245],
         [ 0.0303,  0.0419]],

        [[ 0.0704, -0.1451],
         [-0.0269, -0.2245],
         [ 0.0303,  0.0419]],

        [[ 0.0704, -0.1451],
         [-0.0269, -0.2245],
         [ 0.0303,  0.0419]],

        [[ 0.0704, -0.1451],
         [-0.0269, -0.2245],
         [ 0.0303,  0.0419]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:00,697][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:00,703][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:00,705][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:00,736][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:00,736][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:00,736][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:00,738][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:00,770][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=6
[2025-01-13 12:57:00,772][train.train_model][ERROR] -   => agent_in=tensor([[ 2.2507e+03,  8.5890e+02,  7.8259e-07,  1.5168e-08],
        [ 2.2507e+03,  8.5890e+02, -5.4167e-07, -1.3085e-08],
        [ 2.2507e+03,  8.5890e+02,  1.8664e-06,  4.0302e-08],
        [ 2.2507e+03,  8.5890e+02,  1.6281e-06,  4.2042e-08],
        [ 2.2507e+03,  8.5890e+02,  4.3441e-06,  9.1424e-08],
        [ 2.2507e+03,  8.5890e+02,  3.1393e-06,  6.9536e-08]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986],
        [2250.7454,  858.8986]], device='cuda:0')
[2025-01-13 12:57:00,776][train.train_model][ERROR] -   => pi=tensor([[0.3267, 0.3668, 0.3064],
        [0.3267, 0.3668, 0.3064],
        [0.3267, 0.3668, 0.3064],
        [0.3267, 0.3668, 0.3064],
        [0.3267, 0.3668, 0.3064],
        [0.3267, 0.3668, 0.3064],
        [0.3258, 0.3664, 0.3078],
        [0.3258, 0.3664, 0.3078],
        [0.3258, 0.3664, 0.3078],
        [0.3258, 0.3664, 0.3078],
        [0.3258, 0.3664, 0.3078],
        [0.3258, 0.3664, 0.3078]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0249, -0.0030],
         [ 0.0238, -0.0019],
         [ 0.1114,  0.0527]],

        [[-0.0249, -0.0030],
         [ 0.0238, -0.0019],
         [ 0.1114,  0.0527]],

        [[-0.0249, -0.0030],
         [ 0.0238, -0.0019],
         [ 0.1114,  0.0527]],

        [[-0.0249, -0.0030],
         [ 0.0238, -0.0019],
         [ 0.1114,  0.0527]],

        [[-0.0249, -0.0030],
         [ 0.0238, -0.0019],
         [ 0.1114,  0.0527]],

        [[-0.0249, -0.0030],
         [ 0.0238, -0.0019],
         [ 0.1114,  0.0527]],

        [[-0.0358,  0.0093],
         [ 0.0246, -0.0049],
         [ 0.1005,  0.0634]],

        [[-0.0358,  0.0093],
         [ 0.0246, -0.0049],
         [ 0.1005,  0.0634]],

        [[-0.0358,  0.0093],
         [ 0.0246, -0.0049],
         [ 0.1005,  0.0634]],

        [[-0.0358,  0.0093],
         [ 0.0246, -0.0049],
         [ 0.1005,  0.0634]],

        [[-0.0358,  0.0093],
         [ 0.0246, -0.0049],
         [ 0.1005,  0.0634]],

        [[-0.0358,  0.0093],
         [ 0.0246, -0.0049],
         [ 0.1005,  0.0634]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[-0.0053, -0.0722],
         [-0.0211, -0.2632],
         [ 0.0803,  0.0476]],

        [[-0.0053, -0.0722],
         [-0.0211, -0.2632],
         [ 0.0803,  0.0476]],

        [[-0.0053, -0.0722],
         [-0.0211, -0.2632],
         [ 0.0803,  0.0476]],

        [[-0.0053, -0.0722],
         [-0.0211, -0.2632],
         [ 0.0803,  0.0476]],

        [[-0.0053, -0.0722],
         [-0.0211, -0.2632],
         [ 0.0803,  0.0476]],

        [[-0.0053, -0.0722],
         [-0.0211, -0.2632],
         [ 0.0803,  0.0476]],

        [[ 0.0222, -0.0829],
         [-0.0179, -0.2499],
         [ 0.0630,  0.0474]],

        [[ 0.0222, -0.0829],
         [-0.0179, -0.2499],
         [ 0.0630,  0.0474]],

        [[ 0.0222, -0.0829],
         [-0.0179, -0.2499],
         [ 0.0630,  0.0474]],

        [[ 0.0222, -0.0829],
         [-0.0179, -0.2499],
         [ 0.0630,  0.0474]],

        [[ 0.0222, -0.0829],
         [-0.0179, -0.2499],
         [ 0.0630,  0.0474]],

        [[ 0.0222, -0.0829],
         [-0.0179, -0.2499],
         [ 0.0630,  0.0474]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:00,776][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:00,781][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:00,783][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:00,814][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:00,814][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:00,814][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:00,816][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:00,848][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=7
[2025-01-13 12:57:00,850][train.train_model][ERROR] -   => agent_in=tensor([[2023.5283, 1400.0636,   -7.5471,    4.7289],
        [2019.7517, 1402.4299,   -7.2067,    5.1746],
        [2016.8663, 1404.5017,   -6.8139,    5.5475],
        [2013.8030, 1406.9957,   -6.6342,    6.0151],
        [2010.4868, 1410.0024,   -6.5262,    6.3021],
        [2007.2283, 1413.1490,   -6.3399,    6.4762]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[2023.5283, 1400.0636],
        [2019.7517, 1402.4299],
        [2016.8663, 1404.5017],
        [2013.8030, 1406.9957],
        [2010.4868, 1410.0024],
        [2007.2283, 1413.1490],
        [2004.0555, 1416.3899],
        [2000.8253, 1419.7415],
        [1997.6212, 1423.0750],
        [1993.9969, 1426.8608],
        [1990.6018, 1430.3116],
        [1987.1636, 1433.7568]], device='cuda:0')
[2025-01-13 12:57:00,854][train.train_model][ERROR] -   => pi=tensor([[0.3237, 0.3693, 0.3070],
        [0.3237, 0.3693, 0.3070],
        [0.3237, 0.3693, 0.3070],
        [0.3237, 0.3693, 0.3070],
        [0.3237, 0.3693, 0.3070],
        [0.3237, 0.3693, 0.3070],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0146, -0.0179],
         [ 0.0528, -0.0416],
         [ 0.0975,  0.0215]],

        [[ 0.0146, -0.0179],
         [ 0.0528, -0.0416],
         [ 0.0975,  0.0215]],

        [[ 0.0146, -0.0179],
         [ 0.0528, -0.0416],
         [ 0.0975,  0.0215]],

        [[ 0.0146, -0.0179],
         [ 0.0528, -0.0416],
         [ 0.0975,  0.0215]],

        [[ 0.0146, -0.0179],
         [ 0.0528, -0.0416],
         [ 0.0975,  0.0215]],

        [[ 0.0146, -0.0179],
         [ 0.0528, -0.0416],
         [ 0.0975,  0.0215]],

        [[-0.0133,  0.0163],
         [ 0.0396, -0.0348],
         [ 0.0870,  0.0242]],

        [[-0.0133,  0.0163],
         [ 0.0396, -0.0348],
         [ 0.0870,  0.0242]],

        [[-0.0133,  0.0163],
         [ 0.0396, -0.0348],
         [ 0.0870,  0.0242]],

        [[-0.0133,  0.0163],
         [ 0.0396, -0.0348],
         [ 0.0870,  0.0242]],

        [[-0.0133,  0.0163],
         [ 0.0396, -0.0348],
         [ 0.0870,  0.0242]],

        [[-0.0133,  0.0163],
         [ 0.0396, -0.0348],
         [ 0.0870,  0.0242]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0309, -0.0887],
         [-0.0094, -0.2426],
         [ 0.0611,  0.0375]],

        [[ 0.0309, -0.0887],
         [-0.0094, -0.2426],
         [ 0.0611,  0.0375]],

        [[ 0.0309, -0.0887],
         [-0.0094, -0.2426],
         [ 0.0611,  0.0375]],

        [[ 0.0309, -0.0887],
         [-0.0094, -0.2426],
         [ 0.0611,  0.0375]],

        [[ 0.0309, -0.0887],
         [-0.0094, -0.2426],
         [ 0.0611,  0.0375]],

        [[ 0.0309, -0.0887],
         [-0.0094, -0.2426],
         [ 0.0611,  0.0375]],

        [[ 0.0595, -0.0930],
         [-0.0043, -0.2487],
         [ 0.0487,  0.0450]],

        [[ 0.0595, -0.0930],
         [-0.0043, -0.2487],
         [ 0.0487,  0.0450]],

        [[ 0.0595, -0.0930],
         [-0.0043, -0.2487],
         [ 0.0487,  0.0450]],

        [[ 0.0595, -0.0930],
         [-0.0043, -0.2487],
         [ 0.0487,  0.0450]],

        [[ 0.0595, -0.0930],
         [-0.0043, -0.2487],
         [ 0.0487,  0.0450]],

        [[ 0.0595, -0.0930],
         [-0.0043, -0.2487],
         [ 0.0487,  0.0450]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:00,854][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:02,992][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:02,994][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:03,025][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:03,026][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:03,026][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:03,027][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:03,060][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=8
[2025-01-13 12:57:03,061][train.train_model][ERROR] -   => agent_in=tensor([[ 852.7884, 1652.2937,   -5.6899,    4.4223],
        [ 849.9440, 1654.5044,   -5.6968,    4.4271],
        [ 847.0930, 1656.7198,   -5.7709,    4.4794],
        [ 844.2086, 1658.9589,   -5.7910,    4.4114],
        [ 841.3137, 1661.1641,   -5.8081,    4.4416],
        [ 838.4103, 1663.3843,   -5.8668,    4.5398]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 852.7884, 1652.2937],
        [ 849.9440, 1654.5044],
        [ 847.0930, 1656.7198],
        [ 844.2086, 1658.9589],
        [ 841.3137, 1661.1641],
        [ 838.4103, 1663.3843],
        [ 835.4776, 1665.6537],
        [ 832.8263, 1667.7103],
        [ 829.5416, 1670.2820],
        [ 826.5795, 1672.6100],
        [ 823.8355, 1674.7770],
        [ 820.5023, 1677.4105]], device='cuda:0')
[2025-01-13 12:57:03,065][train.train_model][ERROR] -   => pi=tensor([[0.3284, 0.3698, 0.3018],
        [0.3284, 0.3698, 0.3018],
        [0.3284, 0.3698, 0.3018],
        [0.3284, 0.3698, 0.3018],
        [0.3284, 0.3698, 0.3018],
        [0.3284, 0.3698, 0.3018],
        [0.3282, 0.3686, 0.3033],
        [0.3282, 0.3686, 0.3033],
        [0.3282, 0.3686, 0.3033],
        [0.3282, 0.3686, 0.3033],
        [0.3282, 0.3686, 0.3033],
        [0.3282, 0.3686, 0.3033]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0022, -0.0160],
         [ 0.0309, -0.0065],
         [ 0.0897,  0.0178]],

        [[-0.0022, -0.0160],
         [ 0.0309, -0.0065],
         [ 0.0897,  0.0178]],

        [[-0.0022, -0.0160],
         [ 0.0309, -0.0065],
         [ 0.0897,  0.0178]],

        [[-0.0022, -0.0160],
         [ 0.0309, -0.0065],
         [ 0.0897,  0.0178]],

        [[-0.0022, -0.0160],
         [ 0.0309, -0.0065],
         [ 0.0897,  0.0178]],

        [[-0.0022, -0.0160],
         [ 0.0309, -0.0065],
         [ 0.0897,  0.0178]],

        [[-0.0260,  0.0192],
         [ 0.0116, -0.0015],
         [ 0.0903,  0.0131]],

        [[-0.0260,  0.0192],
         [ 0.0116, -0.0015],
         [ 0.0903,  0.0131]],

        [[-0.0260,  0.0192],
         [ 0.0116, -0.0015],
         [ 0.0903,  0.0131]],

        [[-0.0260,  0.0192],
         [ 0.0116, -0.0015],
         [ 0.0903,  0.0131]],

        [[-0.0260,  0.0192],
         [ 0.0116, -0.0015],
         [ 0.0903,  0.0131]],

        [[-0.0260,  0.0192],
         [ 0.0116, -0.0015],
         [ 0.0903,  0.0131]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0357, -0.1439],
         [-0.0348, -0.2227],
         [ 0.0403,  0.0389]],

        [[ 0.0357, -0.1439],
         [-0.0348, -0.2227],
         [ 0.0403,  0.0389]],

        [[ 0.0357, -0.1439],
         [-0.0348, -0.2227],
         [ 0.0403,  0.0389]],

        [[ 0.0357, -0.1439],
         [-0.0348, -0.2227],
         [ 0.0403,  0.0389]],

        [[ 0.0357, -0.1439],
         [-0.0348, -0.2227],
         [ 0.0403,  0.0389]],

        [[ 0.0357, -0.1439],
         [-0.0348, -0.2227],
         [ 0.0403,  0.0389]],

        [[ 0.0695, -0.1440],
         [-0.0272, -0.2252],
         [ 0.0310,  0.0423]],

        [[ 0.0695, -0.1440],
         [-0.0272, -0.2252],
         [ 0.0310,  0.0423]],

        [[ 0.0695, -0.1440],
         [-0.0272, -0.2252],
         [ 0.0310,  0.0423]],

        [[ 0.0695, -0.1440],
         [-0.0272, -0.2252],
         [ 0.0310,  0.0423]],

        [[ 0.0695, -0.1440],
         [-0.0272, -0.2252],
         [ 0.0310,  0.0423]],

        [[ 0.0695, -0.1440],
         [-0.0272, -0.2252],
         [ 0.0310,  0.0423]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:03,066][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:03,070][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:03,072][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:03,103][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:03,104][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:03,104][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:03,105][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:03,138][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=9
[2025-01-13 12:57:03,139][train.train_model][ERROR] -   => agent_in=tensor([[1177.3607,  910.5037,    3.7525,    4.0609],
        [1179.2344,  912.5314,    3.7696,    4.0989],
        [1181.1167,  914.5781,    3.7013,    4.0559],
        [1182.9689,  916.6077,    3.4883,    3.8374],
        [1184.7126,  918.5260,    3.2268,    3.5236],
        [1186.4862,  920.4626,    2.9865,    3.2978]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1177.3607,  910.5037],
        [1179.2344,  912.5314],
        [1181.1167,  914.5781],
        [1182.9689,  916.6077],
        [1184.7126,  918.5260],
        [1186.4862,  920.4626],
        [1187.9824,  922.1147],
        [1189.4154,  923.7063],
        [1190.8518,  925.3228],
        [1192.2365,  926.8858],
        [1193.7778,  928.6453],
        [1194.9324,  929.9729]], device='cuda:0')
[2025-01-13 12:57:03,144][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091],
        [0.3236, 0.3673, 0.3091]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0063, -0.0098],
         [ 0.0421, -0.0364],
         [ 0.0925,  0.0037]],

        [[ 0.0063, -0.0098],
         [ 0.0421, -0.0364],
         [ 0.0925,  0.0037]],

        [[ 0.0063, -0.0098],
         [ 0.0421, -0.0364],
         [ 0.0925,  0.0037]],

        [[ 0.0063, -0.0098],
         [ 0.0421, -0.0364],
         [ 0.0925,  0.0037]],

        [[ 0.0063, -0.0098],
         [ 0.0421, -0.0364],
         [ 0.0925,  0.0037]],

        [[ 0.0063, -0.0098],
         [ 0.0421, -0.0364],
         [ 0.0925,  0.0037]],

        [[-0.0203,  0.0281],
         [ 0.0276, -0.0303],
         [ 0.0886,  0.0047]],

        [[-0.0203,  0.0281],
         [ 0.0276, -0.0303],
         [ 0.0886,  0.0047]],

        [[-0.0203,  0.0281],
         [ 0.0276, -0.0303],
         [ 0.0886,  0.0047]],

        [[-0.0203,  0.0281],
         [ 0.0276, -0.0303],
         [ 0.0886,  0.0047]],

        [[-0.0203,  0.0281],
         [ 0.0276, -0.0303],
         [ 0.0886,  0.0047]],

        [[-0.0203,  0.0281],
         [ 0.0276, -0.0303],
         [ 0.0886,  0.0047]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0237, -0.1190],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0295]],

        [[ 0.0237, -0.1190],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0295]],

        [[ 0.0237, -0.1190],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0295]],

        [[ 0.0237, -0.1190],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0295]],

        [[ 0.0237, -0.1190],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0295]],

        [[ 0.0237, -0.1190],
         [-0.0169, -0.2502],
         [ 0.0615,  0.0295]],

        [[ 0.0622, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0322]],

        [[ 0.0622, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0322]],

        [[ 0.0622, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0322]],

        [[ 0.0622, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0322]],

        [[ 0.0622, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0322]],

        [[ 0.0622, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0322]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:03,144][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:03,147][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 12:57:03,149][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 12:57:03,179][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 12:57:03,179][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 12:57:03,179][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 12:57:03,181][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:57:03,202][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=10
[2025-01-13 12:57:03,204][train.train_model][ERROR] -   => agent_in=tensor([[ 3.0919e+02,  6.6867e+02, -2.9403e-05,  8.4989e-05],
        [ 3.0919e+02,  6.6867e+02,  3.9590e-05,  3.9900e-05],
        [ 3.0919e+02,  6.6867e+02, -2.1256e-05,  6.2144e-05],
        [ 3.0919e+02,  6.6867e+02,  4.5327e-05,  2.1697e-05],
        [ 3.0919e+02,  6.6867e+02,  4.3696e-05,  1.6305e-05],
        [ 3.0919e+02,  6.6867e+02, -2.6942e-05,  4.6199e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[309.1879, 668.6677],
        [309.1878, 668.6678],
        [309.1879, 668.6678],
        [309.1879, 668.6678],
        [309.1879, 668.6678],
        [309.1879, 668.6678],
        [309.1879, 668.6679],
        [309.1879, 668.6679],
        [309.1879, 668.6679],
        [309.1878, 668.6680],
        [309.1879, 668.6679],
        [309.1879, 668.6679]], device='cuda:0')
[2025-01-13 12:57:03,208][train.train_model][ERROR] -   => pi=tensor([[0.3297, 0.3677, 0.3026],
        [0.3297, 0.3677, 0.3026],
        [0.3297, 0.3677, 0.3026],
        [0.3297, 0.3677, 0.3026],
        [0.3297, 0.3677, 0.3026],
        [0.3297, 0.3677, 0.3026],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034],
        [0.3300, 0.3666, 0.3034]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0128, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0917,  0.0120]],

        [[ 0.0128, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0917,  0.0120]],

        [[ 0.0128, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0917,  0.0120]],

        [[ 0.0128, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0917,  0.0120]],

        [[ 0.0128, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0917,  0.0120]],

        [[ 0.0128, -0.0150],
         [ 0.0294, -0.0056],
         [ 0.0917,  0.0120]],

        [[-0.0148,  0.0202],
         [ 0.0101,  0.0009],
         [ 0.0882,  0.0075]],

        [[-0.0148,  0.0202],
         [ 0.0101,  0.0009],
         [ 0.0882,  0.0075]],

        [[-0.0148,  0.0202],
         [ 0.0101,  0.0009],
         [ 0.0882,  0.0075]],

        [[-0.0148,  0.0202],
         [ 0.0101,  0.0009],
         [ 0.0882,  0.0075]],

        [[-0.0148,  0.0202],
         [ 0.0101,  0.0009],
         [ 0.0882,  0.0075]],

        [[-0.0148,  0.0202],
         [ 0.0101,  0.0009],
         [ 0.0882,  0.0075]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0493, -0.1508],
         [-0.0342, -0.2057],
         [ 0.0588,  0.0301]],

        [[ 0.0493, -0.1508],
         [-0.0342, -0.2057],
         [ 0.0588,  0.0301]],

        [[ 0.0493, -0.1508],
         [-0.0342, -0.2057],
         [ 0.0588,  0.0301]],

        [[ 0.0493, -0.1508],
         [-0.0342, -0.2057],
         [ 0.0588,  0.0301]],

        [[ 0.0493, -0.1508],
         [-0.0342, -0.2057],
         [ 0.0588,  0.0301]],

        [[ 0.0493, -0.1508],
         [-0.0342, -0.2057],
         [ 0.0588,  0.0301]],

        [[ 0.0776, -0.1506],
         [-0.0296, -0.2144],
         [ 0.0523,  0.0372]],

        [[ 0.0776, -0.1506],
         [-0.0296, -0.2144],
         [ 0.0523,  0.0372]],

        [[ 0.0776, -0.1506],
         [-0.0296, -0.2144],
         [ 0.0523,  0.0372]],

        [[ 0.0776, -0.1506],
         [-0.0296, -0.2144],
         [ 0.0523,  0.0372]],

        [[ 0.0776, -0.1506],
         [-0.0296, -0.2144],
         [ 0.0523,  0.0372]],

        [[ 0.0776, -0.1506],
         [-0.0296, -0.2144],
         [ 0.0523,  0.0372]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:03,208][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:06,453][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:06,459][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:06,502][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:06,502][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:06,503][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:06,504][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:06,530][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=0
[2025-01-13 12:57:06,532][train.train_model][ERROR] -   => agent_in=tensor([[ 873.2697, 1867.5603,   -5.7234,    3.5980],
        [ 870.4088, 1869.3589,   -5.6397,    3.5708],
        [ 867.5896, 1871.1438,   -5.4182,    3.4254],
        [ 864.8811, 1872.8562,   -5.2736,    3.3171],
        [ 862.2451, 1874.5143,   -5.0552,    3.1200],
        [ 859.4662, 1876.2294,   -4.8648,    2.9810]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 873.2697, 1867.5603],
        [ 870.4088, 1869.3589],
        [ 867.5896, 1871.1438],
        [ 864.8811, 1872.8562],
        [ 862.2451, 1874.5143],
        [ 859.4662, 1876.2294],
        [ 857.0346, 1877.7194],
        [ 854.7612, 1879.0966],
        [ 852.5053, 1880.4707],
        [ 850.4337, 1881.7307],
        [ 848.0394, 1883.2101],
        [ 845.4049, 1884.8805]], device='cuda:0')
[2025-01-13 12:57:06,537][train.train_model][ERROR] -   => pi=tensor([[0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3294, 0.3681, 0.3025],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031]], device='cuda:0') mu=tensor([[[ 0.0164, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0164, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0164, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0164, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0164, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0938,  0.0119]],

        [[ 0.0164, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0938,  0.0119]],

        [[-0.0124,  0.0191],
         [ 0.0107,  0.0009],
         [ 0.0893,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0107,  0.0009],
         [ 0.0893,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0107,  0.0009],
         [ 0.0893,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0107,  0.0009],
         [ 0.0893,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0107,  0.0009],
         [ 0.0893,  0.0075]],

        [[-0.0124,  0.0191],
         [ 0.0107,  0.0009],
         [ 0.0893,  0.0075]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0288]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0288]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0288]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0288]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0288]],

        [[ 0.0522, -0.1523],
         [-0.0326, -0.2043],
         [ 0.0559,  0.0288]],

        [[ 0.0803, -0.1525],
         [-0.0278, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0803, -0.1525],
         [-0.0278, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0803, -0.1525],
         [-0.0278, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0803, -0.1525],
         [-0.0278, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0803, -0.1525],
         [-0.0278, -0.2142],
         [ 0.0495,  0.0367]],

        [[ 0.0803, -0.1525],
         [-0.0278, -0.2142],
         [ 0.0495,  0.0367]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:57:06,570][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:06,572][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:06,602][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:06,603][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:06,603][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:06,604][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:06,637][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=1
[2025-01-13 12:57:06,639][train.train_model][ERROR] -   => agent_in=tensor([[ 3.9609e+02,  1.1474e+03, -1.2863e-04,  8.5636e-05],
        [ 3.9609e+02,  1.1474e+03, -1.0998e-04,  7.4718e-05],
        [ 3.9609e+02,  1.1474e+03, -8.6321e-05,  8.2352e-05],
        [ 3.9609e+02,  1.1474e+03, -1.1263e-04, -1.2039e-05],
        [ 3.9609e+02,  1.1474e+03, -8.9997e-05,  4.4610e-06],
        [ 3.9609e+02,  1.1474e+03, -5.2940e-05,  5.6597e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 396.0914, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0910, 1147.3601],
        [ 396.0910, 1147.3601]], device='cuda:0')
[2025-01-13 12:57:06,643][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3320, 0.3671, 0.3009],
        [0.3324, 0.3670, 0.3006],
        [0.3324, 0.3670, 0.3006],
        [0.3324, 0.3670, 0.3006],
        [0.3324, 0.3670, 0.3006],
        [0.3324, 0.3670, 0.3006],
        [0.3324, 0.3670, 0.3006]], device='cuda:0') mu=tensor([[[ 0.0028, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0985,  0.0162]],

        [[ 0.0028, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0985,  0.0162]],

        [[ 0.0028, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0985,  0.0162]],

        [[ 0.0028, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0985,  0.0162]],

        [[ 0.0028, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0985,  0.0162]],

        [[ 0.0028, -0.0325],
         [ 0.0212, -0.0116],
         [ 0.0985,  0.0162]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0978,  0.0053]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0978,  0.0053]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0978,  0.0053]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0978,  0.0053]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0978,  0.0053]],

        [[-0.0223,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0978,  0.0053]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0421, -0.1582],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1582],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1582],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1582],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1582],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0421, -0.1582],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0228]],

        [[ 0.0651, -0.1561],
         [-0.0332, -0.2006],
         [ 0.0309,  0.0335]],

        [[ 0.0651, -0.1561],
         [-0.0332, -0.2006],
         [ 0.0309,  0.0335]],

        [[ 0.0651, -0.1561],
         [-0.0332, -0.2006],
         [ 0.0309,  0.0335]],

        [[ 0.0651, -0.1561],
         [-0.0332, -0.2006],
         [ 0.0309,  0.0335]],

        [[ 0.0651, -0.1561],
         [-0.0332, -0.2006],
         [ 0.0309,  0.0335]],

        [[ 0.0651, -0.1561],
         [-0.0332, -0.2006],
         [ 0.0309,  0.0335]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:57:06,644][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 12:57:06,646][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 12:57:06,673][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 12:57:06,673][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 12:57:06,673][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 12:57:06,675][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:57:06,696][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=2
[2025-01-13 12:57:06,698][train.train_model][ERROR] -   => agent_in=tensor([[ 1.2170e+03,  2.7927e+03, -8.0835e-01,  6.7101e-01],
        [ 1.2166e+03,  2.7931e+03, -5.6761e-01,  4.6959e-01],
        [ 1.2163e+03,  2.7933e+03, -1.6878e-01,  1.3934e-01],
        [ 1.2162e+03,  2.7934e+03,  3.6582e-02, -2.6921e-02],
        [ 1.2162e+03,  2.7934e+03,  7.5744e-03, -3.5029e-03],
        [ 1.2162e+03,  2.7934e+03,  1.0428e-03,  1.4729e-03]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1216.9841, 2792.7312],
        [1216.5796, 2793.0671],
        [1216.2955, 2793.3020],
        [1216.2112, 2793.3716],
        [1216.2294, 2793.3582],
        [1216.2332, 2793.3564],
        [1216.2338, 2793.3572],
        [1216.2341, 2793.3579],
        [1216.2346, 2793.3584],
        [1216.2350, 2793.3589],
        [1216.1223, 2793.4521],
        [1215.7076, 2793.7937]], device='cuda:0')
[2025-01-13 12:57:06,702][train.train_model][ERROR] -   => pi=tensor([[0.3308, 0.3680, 0.3012],
        [0.3308, 0.3680, 0.3012],
        [0.3308, 0.3680, 0.3012],
        [0.3308, 0.3680, 0.3012],
        [0.3308, 0.3680, 0.3012],
        [0.3308, 0.3680, 0.3012],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016],
        [0.3312, 0.3672, 0.3016]], device='cuda:0') mu=tensor([[[ 0.0153, -0.0190],
         [ 0.0281, -0.0100],
         [ 0.0914,  0.0155]],

        [[ 0.0153, -0.0190],
         [ 0.0281, -0.0100],
         [ 0.0914,  0.0155]],

        [[ 0.0153, -0.0190],
         [ 0.0281, -0.0100],
         [ 0.0914,  0.0155]],

        [[ 0.0153, -0.0190],
         [ 0.0281, -0.0100],
         [ 0.0914,  0.0155]],

        [[ 0.0153, -0.0190],
         [ 0.0281, -0.0100],
         [ 0.0914,  0.0155]],

        [[ 0.0153, -0.0190],
         [ 0.0281, -0.0100],
         [ 0.0914,  0.0155]],

        [[-0.0113,  0.0163],
         [ 0.0084, -0.0037],
         [ 0.0867,  0.0107]],

        [[-0.0113,  0.0163],
         [ 0.0084, -0.0037],
         [ 0.0867,  0.0107]],

        [[-0.0113,  0.0163],
         [ 0.0084, -0.0037],
         [ 0.0867,  0.0107]],

        [[-0.0113,  0.0163],
         [ 0.0084, -0.0037],
         [ 0.0867,  0.0107]],

        [[-0.0113,  0.0163],
         [ 0.0084, -0.0037],
         [ 0.0867,  0.0107]],

        [[-0.0113,  0.0163],
         [ 0.0084, -0.0037],
         [ 0.0867,  0.0107]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0594, -0.1492],
         [-0.0347, -0.1992],
         [ 0.0549,  0.0294]],

        [[ 0.0594, -0.1492],
         [-0.0347, -0.1992],
         [ 0.0549,  0.0294]],

        [[ 0.0594, -0.1492],
         [-0.0347, -0.1992],
         [ 0.0549,  0.0294]],

        [[ 0.0594, -0.1492],
         [-0.0347, -0.1992],
         [ 0.0549,  0.0294]],

        [[ 0.0594, -0.1492],
         [-0.0347, -0.1992],
         [ 0.0549,  0.0294]],

        [[ 0.0594, -0.1492],
         [-0.0347, -0.1992],
         [ 0.0549,  0.0294]],

        [[ 0.0860, -0.1488],
         [-0.0297, -0.2087],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1488],
         [-0.0297, -0.2087],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1488],
         [-0.0297, -0.2087],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1488],
         [-0.0297, -0.2087],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1488],
         [-0.0297, -0.2087],
         [ 0.0490,  0.0378]],

        [[ 0.0860, -0.1488],
         [-0.0297, -0.2087],
         [ 0.0490,  0.0378]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:57:06,703][train.train_model][WARNING] - No valid samples found in validation.
[2025-01-13 12:57:37,729][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:37,734][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:37,773][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:37,773][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:37,773][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:37,775][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:37,801][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=0
[2025-01-13 12:57:37,803][train.train_model][ERROR] -   => agent_in=tensor([[5.2875e+02, 1.3636e+03, 3.8520e+00, 2.7976e-01],
        [5.3068e+02, 1.3637e+03, 3.4273e+00, 3.4835e-01],
        [5.3239e+02, 1.3639e+03, 2.9641e+00, 3.3644e-01],
        [5.3387e+02, 1.3641e+03, 2.2625e+00, 2.5839e-01],
        [5.3500e+02, 1.3642e+03, 1.8567e+00, 2.1021e-01],
        [5.3593e+02, 1.3643e+03, 1.5762e+00, 1.5302e-01]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 528.7495, 1363.5841],
        [ 530.6771, 1363.7241],
        [ 532.3865, 1363.8979],
        [ 533.8682, 1364.0660],
        [ 534.9992, 1364.1952],
        [ 535.9252, 1364.3000],
        [ 536.7131, 1364.3766],
        [ 537.5663, 1364.4443],
        [ 538.5032, 1364.4990],
        [ 539.4069, 1364.5471],
        [ 540.6355, 1364.6106],
        [ 542.0834, 1364.6919]], device='cuda:0')
[2025-01-13 12:57:37,808][train.train_model][ERROR] -   => pi=tensor([[0.3315, 0.3669, 0.3015],
        [0.3315, 0.3669, 0.3015],
        [0.3315, 0.3669, 0.3015],
        [0.3315, 0.3669, 0.3015],
        [0.3315, 0.3669, 0.3015],
        [0.3315, 0.3669, 0.3015],
        [0.3319, 0.3670, 0.3010],
        [0.3319, 0.3670, 0.3010],
        [0.3319, 0.3670, 0.3010],
        [0.3319, 0.3670, 0.3010],
        [0.3319, 0.3670, 0.3010],
        [0.3319, 0.3670, 0.3010]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0055, -0.0331],
         [ 0.0203, -0.0096],
         [ 0.0981,  0.0159]],

        [[ 0.0055, -0.0331],
         [ 0.0203, -0.0096],
         [ 0.0981,  0.0159]],

        [[ 0.0055, -0.0331],
         [ 0.0203, -0.0096],
         [ 0.0981,  0.0159]],

        [[ 0.0055, -0.0331],
         [ 0.0203, -0.0096],
         [ 0.0981,  0.0159]],

        [[ 0.0055, -0.0331],
         [ 0.0203, -0.0096],
         [ 0.0981,  0.0159]],

        [[ 0.0055, -0.0331],
         [ 0.0203, -0.0096],
         [ 0.0981,  0.0159]],

        [[-0.0201,  0.0057],
         [-0.0048,  0.0021],
         [ 0.0977,  0.0041]],

        [[-0.0201,  0.0057],
         [-0.0048,  0.0021],
         [ 0.0977,  0.0041]],

        [[-0.0201,  0.0057],
         [-0.0048,  0.0021],
         [ 0.0977,  0.0041]],

        [[-0.0201,  0.0057],
         [-0.0048,  0.0021],
         [ 0.0977,  0.0041]],

        [[-0.0201,  0.0057],
         [-0.0048,  0.0021],
         [ 0.0977,  0.0041]],

        [[-0.0201,  0.0057],
         [-0.0048,  0.0021],
         [ 0.0977,  0.0041]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0467, -0.1559],
         [-0.0398, -0.1848],
         [ 0.0350,  0.0242]],

        [[ 0.0467, -0.1559],
         [-0.0398, -0.1848],
         [ 0.0350,  0.0242]],

        [[ 0.0467, -0.1559],
         [-0.0398, -0.1848],
         [ 0.0350,  0.0242]],

        [[ 0.0467, -0.1559],
         [-0.0398, -0.1848],
         [ 0.0350,  0.0242]],

        [[ 0.0467, -0.1559],
         [-0.0398, -0.1848],
         [ 0.0350,  0.0242]],

        [[ 0.0467, -0.1559],
         [-0.0398, -0.1848],
         [ 0.0350,  0.0242]],

        [[ 0.0689, -0.1539],
         [-0.0344, -0.1989],
         [ 0.0350,  0.0350]],

        [[ 0.0689, -0.1539],
         [-0.0344, -0.1989],
         [ 0.0350,  0.0350]],

        [[ 0.0689, -0.1539],
         [-0.0344, -0.1989],
         [ 0.0350,  0.0350]],

        [[ 0.0689, -0.1539],
         [-0.0344, -0.1989],
         [ 0.0350,  0.0350]],

        [[ 0.0689, -0.1539],
         [-0.0344, -0.1989],
         [ 0.0350,  0.0350]],

        [[ 0.0689, -0.1539],
         [-0.0344, -0.1989],
         [ 0.0350,  0.0350]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:37,808][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:37,817][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:37,820][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:37,851][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:37,851][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:37,851][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:37,853][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:37,885][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=1
[2025-01-13 12:57:37,887][train.train_model][ERROR] -   => agent_in=tensor([[1071.5089,  533.2625,   -4.4084,   -3.4697],
        [1069.3053,  531.5281,   -4.5225,   -3.3833],
        [1067.0447,  529.8369,   -4.6072,   -3.4324],
        [1064.7389,  528.1190,   -4.5918,   -3.6486],
        [1062.4436,  526.2952,   -4.3399,   -3.9183],
        [1060.2743,  524.3367,   -4.2095,   -4.2035]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1071.5089,  533.2625],
        [1069.3053,  531.5281],
        [1067.0447,  529.8369],
        [1064.7389,  528.1190],
        [1062.4436,  526.2952],
        [1060.2743,  524.3367],
        [1058.1677,  522.2330],
        [1056.1638,  520.1035],
        [1054.1946,  517.8483],
        [1052.2355,  515.5287],
        [1050.3741,  513.3215],
        [1048.4783,  511.0923]], device='cuda:0')
[2025-01-13 12:57:37,891][train.train_model][ERROR] -   => pi=tensor([[0.3308, 0.3676, 0.3017],
        [0.3308, 0.3676, 0.3017],
        [0.3308, 0.3676, 0.3017],
        [0.3308, 0.3676, 0.3017],
        [0.3308, 0.3676, 0.3017],
        [0.3308, 0.3676, 0.3017],
        [0.3303, 0.3668, 0.3028],
        [0.3303, 0.3668, 0.3028],
        [0.3303, 0.3668, 0.3028],
        [0.3303, 0.3668, 0.3028],
        [0.3303, 0.3668, 0.3028],
        [0.3303, 0.3668, 0.3028]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0147,  0.0020],
         [ 0.0282, -0.0023],
         [ 0.1126,  0.0381]],

        [[-0.0147,  0.0020],
         [ 0.0282, -0.0023],
         [ 0.1126,  0.0381]],

        [[-0.0147,  0.0020],
         [ 0.0282, -0.0023],
         [ 0.1126,  0.0381]],

        [[-0.0147,  0.0020],
         [ 0.0282, -0.0023],
         [ 0.1126,  0.0381]],

        [[-0.0147,  0.0020],
         [ 0.0282, -0.0023],
         [ 0.1126,  0.0381]],

        [[-0.0147,  0.0020],
         [ 0.0282, -0.0023],
         [ 0.1126,  0.0381]],

        [[-0.0239,  0.0173],
         [ 0.0275, -0.0054],
         [ 0.1064,  0.0453]],

        [[-0.0239,  0.0173],
         [ 0.0275, -0.0054],
         [ 0.1064,  0.0453]],

        [[-0.0239,  0.0173],
         [ 0.0275, -0.0054],
         [ 0.1064,  0.0453]],

        [[-0.0239,  0.0173],
         [ 0.0275, -0.0054],
         [ 0.1064,  0.0453]],

        [[-0.0239,  0.0173],
         [ 0.0275, -0.0054],
         [ 0.1064,  0.0453]],

        [[-0.0239,  0.0173],
         [ 0.0275, -0.0054],
         [ 0.1064,  0.0453]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0005, -0.0838],
         [-0.0013, -0.2656],
         [ 0.0753,  0.0336]],

        [[ 0.0005, -0.0838],
         [-0.0013, -0.2656],
         [ 0.0753,  0.0336]],

        [[ 0.0005, -0.0838],
         [-0.0013, -0.2656],
         [ 0.0753,  0.0336]],

        [[ 0.0005, -0.0838],
         [-0.0013, -0.2656],
         [ 0.0753,  0.0336]],

        [[ 0.0005, -0.0838],
         [-0.0013, -0.2656],
         [ 0.0753,  0.0336]],

        [[ 0.0005, -0.0838],
         [-0.0013, -0.2656],
         [ 0.0753,  0.0336]],

        [[ 0.0252, -0.0914],
         [ 0.0005, -0.2576],
         [ 0.0638,  0.0329]],

        [[ 0.0252, -0.0914],
         [ 0.0005, -0.2576],
         [ 0.0638,  0.0329]],

        [[ 0.0252, -0.0914],
         [ 0.0005, -0.2576],
         [ 0.0638,  0.0329]],

        [[ 0.0252, -0.0914],
         [ 0.0005, -0.2576],
         [ 0.0638,  0.0329]],

        [[ 0.0252, -0.0914],
         [ 0.0005, -0.2576],
         [ 0.0638,  0.0329]],

        [[ 0.0252, -0.0914],
         [ 0.0005, -0.2576],
         [ 0.0638,  0.0329]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:37,891][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:37,895][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:37,897][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:37,927][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:37,928][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:37,928][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:37,930][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:37,962][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=2
[2025-01-13 12:57:37,964][train.train_model][ERROR] -   => agent_in=tensor([[ 934.7488, 1306.4696,   -7.9166,    4.8941],
        [ 930.3888, 1309.1650,   -8.0957,    5.1332],
        [ 926.3418, 1311.7311,   -7.9722,    5.1748],
        [ 922.3570, 1314.3176,   -8.2406,    5.4883],
        [ 918.2376, 1317.0613,   -8.2196,    5.4880],
        [ 913.3153, 1320.3477,   -8.4027,    5.5129]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 934.7488, 1306.4696],
        [ 930.3888, 1309.1650],
        [ 926.3418, 1311.7311],
        [ 922.3570, 1314.3176],
        [ 918.2376, 1317.0613],
        [ 913.3153, 1320.3477],
        [ 909.1193, 1323.1006],
        [ 904.8003, 1325.8367],
        [ 901.3168, 1327.9562],
        [ 897.2951, 1330.3247],
        [ 892.8971, 1332.8590],
        [ 888.6092, 1335.2966]], device='cuda:0')
[2025-01-13 12:57:37,968][train.train_model][ERROR] -   => pi=tensor([[0.3321, 0.3650, 0.3029],
        [0.3321, 0.3650, 0.3029],
        [0.3321, 0.3650, 0.3029],
        [0.3321, 0.3650, 0.3029],
        [0.3321, 0.3650, 0.3029],
        [0.3321, 0.3650, 0.3029],
        [0.3318, 0.3629, 0.3053],
        [0.3318, 0.3629, 0.3053],
        [0.3318, 0.3629, 0.3053],
        [0.3318, 0.3629, 0.3053],
        [0.3318, 0.3629, 0.3053],
        [0.3318, 0.3629, 0.3053]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0111, -0.0132],
         [ 0.0288, -0.0034],
         [ 0.0785,  0.0115]],

        [[-0.0111, -0.0132],
         [ 0.0288, -0.0034],
         [ 0.0785,  0.0115]],

        [[-0.0111, -0.0132],
         [ 0.0288, -0.0034],
         [ 0.0785,  0.0115]],

        [[-0.0111, -0.0132],
         [ 0.0288, -0.0034],
         [ 0.0785,  0.0115]],

        [[-0.0111, -0.0132],
         [ 0.0288, -0.0034],
         [ 0.0785,  0.0115]],

        [[-0.0111, -0.0132],
         [ 0.0288, -0.0034],
         [ 0.0785,  0.0115]],

        [[-0.0349,  0.0247],
         [ 0.0103, -0.0023],
         [ 0.0798,  0.0132]],

        [[-0.0349,  0.0247],
         [ 0.0103, -0.0023],
         [ 0.0798,  0.0132]],

        [[-0.0349,  0.0247],
         [ 0.0103, -0.0023],
         [ 0.0798,  0.0132]],

        [[-0.0349,  0.0247],
         [ 0.0103, -0.0023],
         [ 0.0798,  0.0132]],

        [[-0.0349,  0.0247],
         [ 0.0103, -0.0023],
         [ 0.0798,  0.0132]],

        [[-0.0349,  0.0247],
         [ 0.0103, -0.0023],
         [ 0.0798,  0.0132]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0173, -0.1368],
         [-0.0302, -0.2340],
         [ 0.0530,  0.0398]],

        [[ 0.0173, -0.1368],
         [-0.0302, -0.2340],
         [ 0.0530,  0.0398]],

        [[ 0.0173, -0.1368],
         [-0.0302, -0.2340],
         [ 0.0530,  0.0398]],

        [[ 0.0173, -0.1368],
         [-0.0302, -0.2340],
         [ 0.0530,  0.0398]],

        [[ 0.0173, -0.1368],
         [-0.0302, -0.2340],
         [ 0.0530,  0.0398]],

        [[ 0.0173, -0.1368],
         [-0.0302, -0.2340],
         [ 0.0530,  0.0398]],

        [[ 0.0599, -0.1407],
         [-0.0232, -0.2312],
         [ 0.0438,  0.0422]],

        [[ 0.0599, -0.1407],
         [-0.0232, -0.2312],
         [ 0.0438,  0.0422]],

        [[ 0.0599, -0.1407],
         [-0.0232, -0.2312],
         [ 0.0438,  0.0422]],

        [[ 0.0599, -0.1407],
         [-0.0232, -0.2312],
         [ 0.0438,  0.0422]],

        [[ 0.0599, -0.1407],
         [-0.0232, -0.2312],
         [ 0.0438,  0.0422]],

        [[ 0.0599, -0.1407],
         [-0.0232, -0.2312],
         [ 0.0438,  0.0422]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:37,968][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:37,972][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:37,974][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:38,004][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:38,005][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:38,005][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:38,008][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:38,039][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=3
[2025-01-13 12:57:38,040][train.train_model][ERROR] -   => agent_in=tensor([[ 1.1271e+03,  1.3907e+03,  4.7388e+00,  4.5401e-01],
        [ 1.1295e+03,  1.3909e+03,  4.9522e+00,  4.1308e-01],
        [ 1.1315e+03,  1.3911e+03,  5.2232e+00,  3.1508e-01],
        [ 1.1346e+03,  1.3913e+03,  5.4217e+00,  9.5129e-02],
        [ 1.1373e+03,  1.3913e+03,  5.7858e+00, -4.7664e-02],
        [ 1.1402e+03,  1.3913e+03,  6.0125e+00, -2.1473e-01]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1127.1038, 1390.6785],
        [1129.4752, 1390.9056],
        [1131.4524, 1391.0706],
        [1134.5833, 1391.2594],
        [1137.2935, 1391.3070],
        [1140.1855, 1391.2832],
        [1143.1877, 1391.1759],
        [1146.3531, 1390.9718],
        [1148.9496, 1390.7405],
        [1152.2247, 1390.3534],
        [1156.4083, 1389.7136],
        [1160.0200, 1389.0574]], device='cuda:0')
[2025-01-13 12:57:38,044][train.train_model][ERROR] -   => pi=tensor([[0.3301, 0.3663, 0.3037],
        [0.3301, 0.3663, 0.3037],
        [0.3301, 0.3663, 0.3037],
        [0.3301, 0.3663, 0.3037],
        [0.3301, 0.3663, 0.3037],
        [0.3301, 0.3663, 0.3037],
        [0.3294, 0.3649, 0.3057],
        [0.3294, 0.3649, 0.3057],
        [0.3294, 0.3649, 0.3057],
        [0.3294, 0.3649, 0.3057],
        [0.3294, 0.3649, 0.3057],
        [0.3294, 0.3649, 0.3057]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0136, -0.0074],
         [ 0.0389, -0.0111],
         [ 0.0773,  0.0084]],

        [[-0.0136, -0.0074],
         [ 0.0389, -0.0111],
         [ 0.0773,  0.0084]],

        [[-0.0136, -0.0074],
         [ 0.0389, -0.0111],
         [ 0.0773,  0.0084]],

        [[-0.0136, -0.0074],
         [ 0.0389, -0.0111],
         [ 0.0773,  0.0084]],

        [[-0.0136, -0.0074],
         [ 0.0389, -0.0111],
         [ 0.0773,  0.0084]],

        [[-0.0136, -0.0074],
         [ 0.0389, -0.0111],
         [ 0.0773,  0.0084]],

        [[-0.0380,  0.0285],
         [ 0.0191, -0.0066],
         [ 0.0782,  0.0085]],

        [[-0.0380,  0.0285],
         [ 0.0191, -0.0066],
         [ 0.0782,  0.0085]],

        [[-0.0380,  0.0285],
         [ 0.0191, -0.0066],
         [ 0.0782,  0.0085]],

        [[-0.0380,  0.0285],
         [ 0.0191, -0.0066],
         [ 0.0782,  0.0085]],

        [[-0.0380,  0.0285],
         [ 0.0191, -0.0066],
         [ 0.0782,  0.0085]],

        [[-0.0380,  0.0285],
         [ 0.0191, -0.0066],
         [ 0.0782,  0.0085]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0211, -0.1332],
         [-0.0264, -0.2418],
         [ 0.0588,  0.0426]],

        [[ 0.0211, -0.1332],
         [-0.0264, -0.2418],
         [ 0.0588,  0.0426]],

        [[ 0.0211, -0.1332],
         [-0.0264, -0.2418],
         [ 0.0588,  0.0426]],

        [[ 0.0211, -0.1332],
         [-0.0264, -0.2418],
         [ 0.0588,  0.0426]],

        [[ 0.0211, -0.1332],
         [-0.0264, -0.2418],
         [ 0.0588,  0.0426]],

        [[ 0.0211, -0.1332],
         [-0.0264, -0.2418],
         [ 0.0588,  0.0426]],

        [[ 0.0640, -0.1348],
         [-0.0179, -0.2371],
         [ 0.0460,  0.0434]],

        [[ 0.0640, -0.1348],
         [-0.0179, -0.2371],
         [ 0.0460,  0.0434]],

        [[ 0.0640, -0.1348],
         [-0.0179, -0.2371],
         [ 0.0460,  0.0434]],

        [[ 0.0640, -0.1348],
         [-0.0179, -0.2371],
         [ 0.0460,  0.0434]],

        [[ 0.0640, -0.1348],
         [-0.0179, -0.2371],
         [ 0.0460,  0.0434]],

        [[ 0.0640, -0.1348],
         [-0.0179, -0.2371],
         [ 0.0460,  0.0434]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:38,045][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:40,169][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:40,171][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:40,205][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:40,205][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:40,205][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:40,206][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:40,237][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=4
[2025-01-13 12:57:40,239][train.train_model][ERROR] -   => agent_in=tensor([[ 5.5090e+02,  1.3620e+03, -8.2414e-05,  1.6179e-03],
        [ 5.5090e+02,  1.3620e+03, -7.2438e-05,  1.4198e-03],
        [ 5.5090e+02,  1.3620e+03, -6.2459e-05,  1.2205e-03],
        [ 5.5090e+02,  1.3620e+03, -5.0780e-05,  1.0347e-03],
        [ 5.5090e+02,  1.3620e+03, -4.3502e-05,  8.7849e-04],
        [ 5.5090e+02,  1.3620e+03, -3.7994e-05,  7.5752e-04]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 550.8964, 1361.9803],
        [ 550.8964, 1361.9811],
        [ 550.8964, 1361.9817],
        [ 550.8963, 1361.9823],
        [ 550.8963, 1361.9829],
        [ 550.8962, 1361.9833],
        [ 550.8962, 1361.9836],
        [ 550.8962, 1361.9840],
        [ 550.8962, 1361.9843],
        [ 550.8962, 1361.9845],
        [ 550.8962, 1361.9847],
        [ 550.8962, 1361.9849]], device='cuda:0')
[2025-01-13 12:57:40,243][train.train_model][ERROR] -   => pi=tensor([[0.3315, 0.3673, 0.3012],
        [0.3315, 0.3673, 0.3012],
        [0.3315, 0.3673, 0.3012],
        [0.3315, 0.3673, 0.3012],
        [0.3315, 0.3673, 0.3012],
        [0.3315, 0.3673, 0.3012],
        [0.3320, 0.3673, 0.3007],
        [0.3320, 0.3673, 0.3007],
        [0.3320, 0.3673, 0.3007],
        [0.3320, 0.3673, 0.3007],
        [0.3320, 0.3673, 0.3007],
        [0.3320, 0.3673, 0.3007]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0046, -0.0266],
         [ 0.0234, -0.0107],
         [ 0.0999,  0.0169]],

        [[ 0.0046, -0.0266],
         [ 0.0234, -0.0107],
         [ 0.0999,  0.0169]],

        [[ 0.0046, -0.0266],
         [ 0.0234, -0.0107],
         [ 0.0999,  0.0169]],

        [[ 0.0046, -0.0266],
         [ 0.0234, -0.0107],
         [ 0.0999,  0.0169]],

        [[ 0.0046, -0.0266],
         [ 0.0234, -0.0107],
         [ 0.0999,  0.0169]],

        [[ 0.0046, -0.0266],
         [ 0.0234, -0.0107],
         [ 0.0999,  0.0169]],

        [[-0.0211,  0.0120],
         [-0.0011,  0.0006],
         [ 0.0988,  0.0058]],

        [[-0.0211,  0.0120],
         [-0.0011,  0.0006],
         [ 0.0988,  0.0058]],

        [[-0.0211,  0.0120],
         [-0.0011,  0.0006],
         [ 0.0988,  0.0058]],

        [[-0.0211,  0.0120],
         [-0.0011,  0.0006],
         [ 0.0988,  0.0058]],

        [[-0.0211,  0.0120],
         [-0.0011,  0.0006],
         [ 0.0988,  0.0058]],

        [[-0.0211,  0.0120],
         [-0.0011,  0.0006],
         [ 0.0988,  0.0058]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0529, -0.1541],
         [-0.0370, -0.1797],
         [ 0.0405,  0.0241]],

        [[ 0.0529, -0.1541],
         [-0.0370, -0.1797],
         [ 0.0405,  0.0241]],

        [[ 0.0529, -0.1541],
         [-0.0370, -0.1797],
         [ 0.0405,  0.0241]],

        [[ 0.0529, -0.1541],
         [-0.0370, -0.1797],
         [ 0.0405,  0.0241]],

        [[ 0.0529, -0.1541],
         [-0.0370, -0.1797],
         [ 0.0405,  0.0241]],

        [[ 0.0529, -0.1541],
         [-0.0370, -0.1797],
         [ 0.0405,  0.0241]],

        [[ 0.0750, -0.1516],
         [-0.0326, -0.1940],
         [ 0.0395,  0.0348]],

        [[ 0.0750, -0.1516],
         [-0.0326, -0.1940],
         [ 0.0395,  0.0348]],

        [[ 0.0750, -0.1516],
         [-0.0326, -0.1940],
         [ 0.0395,  0.0348]],

        [[ 0.0750, -0.1516],
         [-0.0326, -0.1940],
         [ 0.0395,  0.0348]],

        [[ 0.0750, -0.1516],
         [-0.0326, -0.1940],
         [ 0.0395,  0.0348]],

        [[ 0.0750, -0.1516],
         [-0.0326, -0.1940],
         [ 0.0395,  0.0348]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:40,244][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:40,249][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:40,252][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:40,283][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:40,283][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:40,284][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:40,285][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:40,317][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=5
[2025-01-13 12:57:40,319][train.train_model][ERROR] -   => agent_in=tensor([[1545.4620, 1345.3821,   -3.1012,    2.5830],
        [1543.9100, 1346.6747,   -3.5089,    2.4644],
        [1542.1560, 1347.9066,   -3.6937,    2.3877],
        [1540.6772, 1348.8625,   -3.8641,    2.3815],
        [1538.7435, 1350.0543,   -4.0171,    2.4196],
        [1536.7354, 1351.2639,   -4.0531,    2.3762]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1545.4620, 1345.3821],
        [1543.9100, 1346.6747],
        [1542.1560, 1347.9066],
        [1540.6772, 1348.8625],
        [1538.7435, 1350.0543],
        [1536.7354, 1351.2639],
        [1534.7072, 1352.4530],
        [1532.8124, 1353.5265],
        [1530.9729, 1354.5306],
        [1529.4449, 1355.3490],
        [1528.1439, 1356.0410],
        [1527.1042, 1356.6101]], device='cuda:0')
[2025-01-13 12:57:40,323][train.train_model][ERROR] -   => pi=tensor([[0.3237, 0.3701, 0.3062],
        [0.3237, 0.3701, 0.3062],
        [0.3237, 0.3701, 0.3062],
        [0.3237, 0.3701, 0.3062],
        [0.3237, 0.3701, 0.3062],
        [0.3237, 0.3701, 0.3062],
        [0.3233, 0.3680, 0.3087],
        [0.3233, 0.3680, 0.3087],
        [0.3233, 0.3680, 0.3087],
        [0.3233, 0.3680, 0.3087],
        [0.3233, 0.3680, 0.3087],
        [0.3233, 0.3680, 0.3087]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0027, -0.0085],
         [ 0.0433, -0.0315],
         [ 0.0893,  0.0058]],

        [[ 0.0027, -0.0085],
         [ 0.0433, -0.0315],
         [ 0.0893,  0.0058]],

        [[ 0.0027, -0.0085],
         [ 0.0433, -0.0315],
         [ 0.0893,  0.0058]],

        [[ 0.0027, -0.0085],
         [ 0.0433, -0.0315],
         [ 0.0893,  0.0058]],

        [[ 0.0027, -0.0085],
         [ 0.0433, -0.0315],
         [ 0.0893,  0.0058]],

        [[ 0.0027, -0.0085],
         [ 0.0433, -0.0315],
         [ 0.0893,  0.0058]],

        [[-0.0238,  0.0286],
         [ 0.0276, -0.0251],
         [ 0.0869,  0.0059]],

        [[-0.0238,  0.0286],
         [ 0.0276, -0.0251],
         [ 0.0869,  0.0059]],

        [[-0.0238,  0.0286],
         [ 0.0276, -0.0251],
         [ 0.0869,  0.0059]],

        [[-0.0238,  0.0286],
         [ 0.0276, -0.0251],
         [ 0.0869,  0.0059]],

        [[-0.0238,  0.0286],
         [ 0.0276, -0.0251],
         [ 0.0869,  0.0059]],

        [[-0.0238,  0.0286],
         [ 0.0276, -0.0251],
         [ 0.0869,  0.0059]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0271, -0.1172],
         [-0.0265, -0.2566],
         [ 0.0598,  0.0385]],

        [[ 0.0271, -0.1172],
         [-0.0265, -0.2566],
         [ 0.0598,  0.0385]],

        [[ 0.0271, -0.1172],
         [-0.0265, -0.2566],
         [ 0.0598,  0.0385]],

        [[ 0.0271, -0.1172],
         [-0.0265, -0.2566],
         [ 0.0598,  0.0385]],

        [[ 0.0271, -0.1172],
         [-0.0265, -0.2566],
         [ 0.0598,  0.0385]],

        [[ 0.0271, -0.1172],
         [-0.0265, -0.2566],
         [ 0.0598,  0.0385]],

        [[ 0.0665, -0.1196],
         [-0.0197, -0.2551],
         [ 0.0457,  0.0400]],

        [[ 0.0665, -0.1196],
         [-0.0197, -0.2551],
         [ 0.0457,  0.0400]],

        [[ 0.0665, -0.1196],
         [-0.0197, -0.2551],
         [ 0.0457,  0.0400]],

        [[ 0.0665, -0.1196],
         [-0.0197, -0.2551],
         [ 0.0457,  0.0400]],

        [[ 0.0665, -0.1196],
         [-0.0197, -0.2551],
         [ 0.0457,  0.0400]],

        [[ 0.0665, -0.1196],
         [-0.0197, -0.2551],
         [ 0.0457,  0.0400]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:40,323][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:40,329][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:40,331][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:40,362][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:40,363][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:40,363][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:40,364][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:40,396][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=6
[2025-01-13 12:57:40,398][train.train_model][ERROR] -   => agent_in=tensor([[1696.5350, 1094.0781,   -5.0005,   -7.0232],
        [1694.0352, 1090.5671,   -5.0578,   -7.0814],
        [1691.5071, 1087.0275,   -5.0920,   -7.2296],
        [1688.9617, 1083.4137,   -4.9642,   -7.2619],
        [1686.4802, 1079.7836,   -4.7850,   -7.2679],
        [1684.0884, 1076.1505,   -4.9188,   -7.3705]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1696.5350, 1094.0781],
        [1694.0352, 1090.5671],
        [1691.5071, 1087.0275],
        [1688.9617, 1083.4137],
        [1686.4802, 1079.7836],
        [1684.0884, 1076.1505],
        [1681.6268, 1072.4622],
        [1679.1255, 1068.7766],
        [1677.0952, 1065.8768],
        [1674.4963, 1062.2288],
        [1672.1090, 1058.9421],
        [1669.3761, 1055.2026]], device='cuda:0')
[2025-01-13 12:57:40,402][train.train_model][ERROR] -   => pi=tensor([[0.3284, 0.3689, 0.3026],
        [0.3284, 0.3689, 0.3026],
        [0.3284, 0.3689, 0.3026],
        [0.3284, 0.3689, 0.3026],
        [0.3284, 0.3689, 0.3026],
        [0.3284, 0.3689, 0.3026],
        [0.3281, 0.3682, 0.3037],
        [0.3281, 0.3682, 0.3037],
        [0.3281, 0.3682, 0.3037],
        [0.3281, 0.3682, 0.3037],
        [0.3281, 0.3682, 0.3037],
        [0.3281, 0.3682, 0.3037]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0105, -0.0168],
         [ 0.0387, -0.0256],
         [ 0.1085,  0.0354]],

        [[-0.0105, -0.0168],
         [ 0.0387, -0.0256],
         [ 0.1085,  0.0354]],

        [[-0.0105, -0.0168],
         [ 0.0387, -0.0256],
         [ 0.1085,  0.0354]],

        [[-0.0105, -0.0168],
         [ 0.0387, -0.0256],
         [ 0.1085,  0.0354]],

        [[-0.0105, -0.0168],
         [ 0.0387, -0.0256],
         [ 0.1085,  0.0354]],

        [[-0.0105, -0.0168],
         [ 0.0387, -0.0256],
         [ 0.1085,  0.0354]],

        [[-0.0302,  0.0136],
         [ 0.0234, -0.0226],
         [ 0.1043,  0.0372]],

        [[-0.0302,  0.0136],
         [ 0.0234, -0.0226],
         [ 0.1043,  0.0372]],

        [[-0.0302,  0.0136],
         [ 0.0234, -0.0226],
         [ 0.1043,  0.0372]],

        [[-0.0302,  0.0136],
         [ 0.0234, -0.0226],
         [ 0.1043,  0.0372]],

        [[-0.0302,  0.0136],
         [ 0.0234, -0.0226],
         [ 0.1043,  0.0372]],

        [[-0.0302,  0.0136],
         [ 0.0234, -0.0226],
         [ 0.1043,  0.0372]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0115, -0.0776],
         [-0.0140, -0.2479],
         [ 0.0569,  0.0414]],

        [[ 0.0115, -0.0776],
         [-0.0140, -0.2479],
         [ 0.0569,  0.0414]],

        [[ 0.0115, -0.0776],
         [-0.0140, -0.2479],
         [ 0.0569,  0.0414]],

        [[ 0.0115, -0.0776],
         [-0.0140, -0.2479],
         [ 0.0569,  0.0414]],

        [[ 0.0115, -0.0776],
         [-0.0140, -0.2479],
         [ 0.0569,  0.0414]],

        [[ 0.0115, -0.0776],
         [-0.0140, -0.2479],
         [ 0.0569,  0.0414]],

        [[ 0.0428, -0.0805],
         [-0.0100, -0.2456],
         [ 0.0443,  0.0423]],

        [[ 0.0428, -0.0805],
         [-0.0100, -0.2456],
         [ 0.0443,  0.0423]],

        [[ 0.0428, -0.0805],
         [-0.0100, -0.2456],
         [ 0.0443,  0.0423]],

        [[ 0.0428, -0.0805],
         [-0.0100, -0.2456],
         [ 0.0443,  0.0423]],

        [[ 0.0428, -0.0805],
         [-0.0100, -0.2456],
         [ 0.0443,  0.0423]],

        [[ 0.0428, -0.0805],
         [-0.0100, -0.2456],
         [ 0.0443,  0.0423]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:40,403][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:40,407][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:40,409][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:40,439][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:40,440][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:40,440][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:40,441][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:40,472][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=7
[2025-01-13 12:57:40,474][train.train_model][ERROR] -   => agent_in=tensor([[ 1.3012e+03,  8.9607e+02, -1.1902e-05, -8.0476e-06],
        [ 1.3012e+03,  8.9607e+02, -9.1011e-06, -7.9270e-06],
        [ 1.3012e+03,  8.9607e+02, -9.1843e-06, -5.6134e-06],
        [ 1.3012e+03,  8.9607e+02, -5.3120e-06, -7.1906e-06],
        [ 1.3012e+03,  8.9607e+02,  1.9153e-07, -1.0263e-05],
        [ 1.3012e+03,  8.9607e+02,  1.4769e-06, -9.9697e-06]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1301.2034,  896.0732],
        [1301.2034,  896.0732],
        [1301.2034,  896.0732],
        [1301.2034,  896.0732],
        [1301.2034,  896.0731],
        [1301.2034,  896.0731],
        [1301.2034,  896.0731],
        [1301.2034,  896.0731],
        [1301.2034,  896.0731],
        [1301.2034,  896.0731],
        [1301.2034,  896.0731],
        [1301.2034,  896.0731]], device='cuda:0')
[2025-01-13 12:57:40,478][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3692, 0.3070],
        [0.3238, 0.3692, 0.3070],
        [0.3238, 0.3692, 0.3070],
        [0.3238, 0.3692, 0.3070],
        [0.3238, 0.3692, 0.3070],
        [0.3238, 0.3692, 0.3070],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079],
        [0.3246, 0.3675, 0.3079]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0130, -0.0194],
         [ 0.0533, -0.0421],
         [ 0.0978,  0.0227]],

        [[ 0.0130, -0.0194],
         [ 0.0533, -0.0421],
         [ 0.0978,  0.0227]],

        [[ 0.0130, -0.0194],
         [ 0.0533, -0.0421],
         [ 0.0978,  0.0227]],

        [[ 0.0130, -0.0194],
         [ 0.0533, -0.0421],
         [ 0.0978,  0.0227]],

        [[ 0.0130, -0.0194],
         [ 0.0533, -0.0421],
         [ 0.0978,  0.0227]],

        [[ 0.0130, -0.0194],
         [ 0.0533, -0.0421],
         [ 0.0978,  0.0227]],

        [[-0.0147,  0.0148],
         [ 0.0397, -0.0354],
         [ 0.0873,  0.0252]],

        [[-0.0147,  0.0148],
         [ 0.0397, -0.0354],
         [ 0.0873,  0.0252]],

        [[-0.0147,  0.0148],
         [ 0.0397, -0.0354],
         [ 0.0873,  0.0252]],

        [[-0.0147,  0.0148],
         [ 0.0397, -0.0354],
         [ 0.0873,  0.0252]],

        [[-0.0147,  0.0148],
         [ 0.0397, -0.0354],
         [ 0.0873,  0.0252]],

        [[-0.0147,  0.0148],
         [ 0.0397, -0.0354],
         [ 0.0873,  0.0252]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0302, -0.0878],
         [-0.0099, -0.2413],
         [ 0.0609,  0.0378]],

        [[ 0.0302, -0.0878],
         [-0.0099, -0.2413],
         [ 0.0609,  0.0378]],

        [[ 0.0302, -0.0878],
         [-0.0099, -0.2413],
         [ 0.0609,  0.0378]],

        [[ 0.0302, -0.0878],
         [-0.0099, -0.2413],
         [ 0.0609,  0.0378]],

        [[ 0.0302, -0.0878],
         [-0.0099, -0.2413],
         [ 0.0609,  0.0378]],

        [[ 0.0302, -0.0878],
         [-0.0099, -0.2413],
         [ 0.0609,  0.0378]],

        [[ 0.0584, -0.0920],
         [-0.0047, -0.2474],
         [ 0.0485,  0.0451]],

        [[ 0.0584, -0.0920],
         [-0.0047, -0.2474],
         [ 0.0485,  0.0451]],

        [[ 0.0584, -0.0920],
         [-0.0047, -0.2474],
         [ 0.0485,  0.0451]],

        [[ 0.0584, -0.0920],
         [-0.0047, -0.2474],
         [ 0.0485,  0.0451]],

        [[ 0.0584, -0.0920],
         [-0.0047, -0.2474],
         [ 0.0485,  0.0451]],

        [[ 0.0584, -0.0920],
         [-0.0047, -0.2474],
         [ 0.0485,  0.0451]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:40,478][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:42,611][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:42,613][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:42,646][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:42,646][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:42,647][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:42,648][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:42,679][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=8
[2025-01-13 12:57:42,681][train.train_model][ERROR] -   => agent_in=tensor([[1132.3098,  622.2480,   -3.9024,   -7.3415],
        [1130.3591,  618.5780,   -4.0395,   -7.5283],
        [1128.3398,  614.8147,   -4.1204,   -7.5899],
        [1126.2802,  611.0208,   -4.1353,   -7.4339],
        [1124.2108,  607.3008,   -4.0084,   -7.1202],
        [1122.2048,  603.7375,   -3.9691,   -6.9476]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1132.3098,  622.2480],
        [1130.3591,  618.5780],
        [1128.3398,  614.8147],
        [1126.2802,  611.0208],
        [1124.2108,  607.3008],
        [1122.2048,  603.7375],
        [1120.2208,  600.2646],
        [1118.4546,  597.2351],
        [1116.5435,  593.9962],
        [1114.6677,  590.8506],
        [1112.8485,  587.8761],
        [1111.0848,  585.0757]], device='cuda:0')
[2025-01-13 12:57:42,685][train.train_model][ERROR] -   => pi=tensor([[0.3307, 0.3681, 0.3012],
        [0.3307, 0.3681, 0.3012],
        [0.3307, 0.3681, 0.3012],
        [0.3307, 0.3681, 0.3012],
        [0.3307, 0.3681, 0.3012],
        [0.3307, 0.3681, 0.3012],
        [0.3297, 0.3676, 0.3027],
        [0.3297, 0.3676, 0.3027],
        [0.3297, 0.3676, 0.3027],
        [0.3297, 0.3676, 0.3027],
        [0.3297, 0.3676, 0.3027],
        [0.3297, 0.3676, 0.3027]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0342, -0.0027],
         [ 0.0303, -0.0082],
         [ 0.1168,  0.0462]],

        [[-0.0342, -0.0027],
         [ 0.0303, -0.0082],
         [ 0.1168,  0.0462]],

        [[-0.0342, -0.0027],
         [ 0.0303, -0.0082],
         [ 0.1168,  0.0462]],

        [[-0.0342, -0.0027],
         [ 0.0303, -0.0082],
         [ 0.1168,  0.0462]],

        [[-0.0342, -0.0027],
         [ 0.0303, -0.0082],
         [ 0.1168,  0.0462]],

        [[-0.0342, -0.0027],
         [ 0.0303, -0.0082],
         [ 0.1168,  0.0462]],

        [[-0.0472,  0.0170],
         [ 0.0232, -0.0100],
         [ 0.1147,  0.0497]],

        [[-0.0472,  0.0170],
         [ 0.0232, -0.0100],
         [ 0.1147,  0.0497]],

        [[-0.0472,  0.0170],
         [ 0.0232, -0.0100],
         [ 0.1147,  0.0497]],

        [[-0.0472,  0.0170],
         [ 0.0232, -0.0100],
         [ 0.1147,  0.0497]],

        [[-0.0472,  0.0170],
         [ 0.0232, -0.0100],
         [ 0.1147,  0.0497]],

        [[-0.0472,  0.0170],
         [ 0.0232, -0.0100],
         [ 0.1147,  0.0497]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[-0.0036, -0.0906],
         [-0.0131, -0.2639],
         [ 0.0649,  0.0370]],

        [[-0.0036, -0.0906],
         [-0.0131, -0.2639],
         [ 0.0649,  0.0370]],

        [[-0.0036, -0.0906],
         [-0.0131, -0.2639],
         [ 0.0649,  0.0370]],

        [[-0.0036, -0.0906],
         [-0.0131, -0.2639],
         [ 0.0649,  0.0370]],

        [[-0.0036, -0.0906],
         [-0.0131, -0.2639],
         [ 0.0649,  0.0370]],

        [[-0.0036, -0.0906],
         [-0.0131, -0.2639],
         [ 0.0649,  0.0370]],

        [[ 0.0282, -0.0960],
         [-0.0080, -0.2502],
         [ 0.0508,  0.0339]],

        [[ 0.0282, -0.0960],
         [-0.0080, -0.2502],
         [ 0.0508,  0.0339]],

        [[ 0.0282, -0.0960],
         [-0.0080, -0.2502],
         [ 0.0508,  0.0339]],

        [[ 0.0282, -0.0960],
         [-0.0080, -0.2502],
         [ 0.0508,  0.0339]],

        [[ 0.0282, -0.0960],
         [-0.0080, -0.2502],
         [ 0.0508,  0.0339]],

        [[ 0.0282, -0.0960],
         [-0.0080, -0.2502],
         [ 0.0508,  0.0339]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:42,685][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:42,689][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:42,691][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:42,722][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:42,723][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:42,723][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:42,724][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:42,756][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=9
[2025-01-13 12:57:42,759][train.train_model][ERROR] -   => agent_in=tensor([[ 760.4646, 1413.8085,   -6.1940,    3.8676],
        [ 757.3651, 1415.7438,   -5.8811,    3.6495],
        [ 754.4251, 1417.5682,   -5.6946,    3.5272],
        [ 751.5786, 1419.3313,   -5.2102,    3.2277],
        [ 748.9741, 1420.9447,   -5.0029,    3.1224],
        [ 746.4733, 1422.5056,   -4.8573,    3.0595]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 760.4646, 1413.8085],
        [ 757.3651, 1415.7438],
        [ 754.4251, 1417.5682],
        [ 751.5786, 1419.3313],
        [ 748.9741, 1420.9447],
        [ 746.4733, 1422.5056],
        [ 744.0452, 1424.0349],
        [ 741.7874, 1425.4642],
        [ 739.6719, 1426.7620],
        [ 737.5536, 1427.9879],
        [ 735.3176, 1429.1315],
        [ 732.8992, 1430.2338]], device='cuda:0')
[2025-01-13 12:57:42,763][train.train_model][ERROR] -   => pi=tensor([[0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3301, 0.3680, 0.3019],
        [0.3298, 0.3663, 0.3038],
        [0.3298, 0.3663, 0.3038],
        [0.3298, 0.3663, 0.3038],
        [0.3298, 0.3663, 0.3038],
        [0.3298, 0.3663, 0.3038],
        [0.3298, 0.3663, 0.3038]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[-0.0080, -0.0160],
         [ 0.0352, -0.0092],
         [ 0.0793,  0.0152]],

        [[-0.0080, -0.0160],
         [ 0.0352, -0.0092],
         [ 0.0793,  0.0152]],

        [[-0.0080, -0.0160],
         [ 0.0352, -0.0092],
         [ 0.0793,  0.0152]],

        [[-0.0080, -0.0160],
         [ 0.0352, -0.0092],
         [ 0.0793,  0.0152]],

        [[-0.0080, -0.0160],
         [ 0.0352, -0.0092],
         [ 0.0793,  0.0152]],

        [[-0.0080, -0.0160],
         [ 0.0352, -0.0092],
         [ 0.0793,  0.0152]],

        [[-0.0318,  0.0218],
         [ 0.0163, -0.0068],
         [ 0.0806,  0.0137]],

        [[-0.0318,  0.0218],
         [ 0.0163, -0.0068],
         [ 0.0806,  0.0137]],

        [[-0.0318,  0.0218],
         [ 0.0163, -0.0068],
         [ 0.0806,  0.0137]],

        [[-0.0318,  0.0218],
         [ 0.0163, -0.0068],
         [ 0.0806,  0.0137]],

        [[-0.0318,  0.0218],
         [ 0.0163, -0.0068],
         [ 0.0806,  0.0137]],

        [[-0.0318,  0.0218],
         [ 0.0163, -0.0068],
         [ 0.0806,  0.0137]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0300, -0.1404],
         [-0.0245, -0.2202],
         [ 0.0466,  0.0343]],

        [[ 0.0300, -0.1404],
         [-0.0245, -0.2202],
         [ 0.0466,  0.0343]],

        [[ 0.0300, -0.1404],
         [-0.0245, -0.2202],
         [ 0.0466,  0.0343]],

        [[ 0.0300, -0.1404],
         [-0.0245, -0.2202],
         [ 0.0466,  0.0343]],

        [[ 0.0300, -0.1404],
         [-0.0245, -0.2202],
         [ 0.0466,  0.0343]],

        [[ 0.0300, -0.1404],
         [-0.0245, -0.2202],
         [ 0.0466,  0.0343]],

        [[ 0.0674, -0.1428],
         [-0.0179, -0.2220],
         [ 0.0375,  0.0375]],

        [[ 0.0674, -0.1428],
         [-0.0179, -0.2220],
         [ 0.0375,  0.0375]],

        [[ 0.0674, -0.1428],
         [-0.0179, -0.2220],
         [ 0.0375,  0.0375]],

        [[ 0.0674, -0.1428],
         [-0.0179, -0.2220],
         [ 0.0375,  0.0375]],

        [[ 0.0674, -0.1428],
         [-0.0179, -0.2220],
         [ 0.0375,  0.0375]],

        [[ 0.0674, -0.1428],
         [-0.0179, -0.2220],
         [ 0.0375,  0.0375]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:42,763][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:42,767][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 12:57:42,769][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 12:57:42,800][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 12:57:42,801][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 12:57:42,801][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 12:57:42,802][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 12:57:42,822][train.train_model][ERROR] - [Training Step] NaN/Inf in loss at batch_idx=10
[2025-01-13 12:57:42,824][train.train_model][ERROR] -   => agent_in=tensor([[1187.2881,  921.4396,    6.0789,    6.8377],
        [1190.3267,  924.8575,    5.9732,    6.7031],
        [1193.3125,  928.2082,    5.9988,    6.6875],
        [1196.3080,  931.5476,    5.7569,    6.4834],
        [1199.1888,  934.7920,    5.5071,    6.1871],
        [1201.9386,  937.8813,    5.2965,    5.9721]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1187.2881,  921.4396],
        [1190.3267,  924.8575],
        [1193.3125,  928.2082],
        [1196.3080,  931.5476],
        [1199.1888,  934.7920],
        [1201.9386,  937.8813],
        [1204.5891,  940.8699],
        [1207.0553,  943.6518],
        [1209.3031,  946.2083],
        [1211.6019,  948.8021],
        [1213.9220,  951.4351],
        [1215.7325,  953.4495]], device='cuda:0')
[2025-01-13 12:57:42,828][train.train_model][ERROR] -   => pi=tensor([[0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3238, 0.3695, 0.3067],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092],
        [0.3236, 0.3673, 0.3092]], device='cuda:0', grad_fn=<SelectBackward0>) mu=tensor([[[ 0.0063, -0.0097],
         [ 0.0423, -0.0366],
         [ 0.0926,  0.0039]],

        [[ 0.0063, -0.0097],
         [ 0.0423, -0.0366],
         [ 0.0926,  0.0039]],

        [[ 0.0063, -0.0097],
         [ 0.0423, -0.0366],
         [ 0.0926,  0.0039]],

        [[ 0.0063, -0.0097],
         [ 0.0423, -0.0366],
         [ 0.0926,  0.0039]],

        [[ 0.0063, -0.0097],
         [ 0.0423, -0.0366],
         [ 0.0926,  0.0039]],

        [[ 0.0063, -0.0097],
         [ 0.0423, -0.0366],
         [ 0.0926,  0.0039]],

        [[-0.0204,  0.0281],
         [ 0.0277, -0.0304],
         [ 0.0886,  0.0047]],

        [[-0.0204,  0.0281],
         [ 0.0277, -0.0304],
         [ 0.0886,  0.0047]],

        [[-0.0204,  0.0281],
         [ 0.0277, -0.0304],
         [ 0.0886,  0.0047]],

        [[-0.0204,  0.0281],
         [ 0.0277, -0.0304],
         [ 0.0886,  0.0047]],

        [[-0.0204,  0.0281],
         [ 0.0277, -0.0304],
         [ 0.0886,  0.0047]],

        [[-0.0204,  0.0281],
         [ 0.0277, -0.0304],
         [ 0.0886,  0.0047]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>) b=tensor([[[ 0.0237, -0.1190],
         [-0.0170, -0.2502],
         [ 0.0615,  0.0294]],

        [[ 0.0237, -0.1190],
         [-0.0170, -0.2502],
         [ 0.0615,  0.0294]],

        [[ 0.0237, -0.1190],
         [-0.0170, -0.2502],
         [ 0.0615,  0.0294]],

        [[ 0.0237, -0.1190],
         [-0.0170, -0.2502],
         [ 0.0615,  0.0294]],

        [[ 0.0237, -0.1190],
         [-0.0170, -0.2502],
         [ 0.0615,  0.0294]],

        [[ 0.0237, -0.1190],
         [-0.0170, -0.2502],
         [ 0.0615,  0.0294]],

        [[ 0.0621, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0321]],

        [[ 0.0621, -0.1220],
         [-0.0124, -0.2502],
         [ 0.0483,  0.0321]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<SelectBackward0>)
[2025-01-13 12:57:42,828][train.train_model][ERROR] -   => Will return zero and skip this batch.
[2025-01-13 12:57:46,157][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:46,163][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:46,205][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:46,206][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:46,206][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:46,207][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:46,232][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=0
[2025-01-13 12:57:46,235][train.train_model][ERROR] -   => agent_in=tensor([[ 873.2697, 1867.5603,   -5.7234,    3.5980],
        [ 870.4088, 1869.3589,   -5.6397,    3.5708],
        [ 867.5896, 1871.1438,   -5.4182,    3.4254],
        [ 864.8811, 1872.8562,   -5.2736,    3.3171],
        [ 862.2451, 1874.5143,   -5.0552,    3.1200],
        [ 859.4662, 1876.2294,   -4.8648,    2.9810]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 873.2697, 1867.5603],
        [ 870.4088, 1869.3589],
        [ 867.5896, 1871.1438],
        [ 864.8811, 1872.8562],
        [ 862.2451, 1874.5143],
        [ 859.4662, 1876.2294],
        [ 857.0346, 1877.7194],
        [ 854.7612, 1879.0966],
        [ 852.5053, 1880.4707],
        [ 850.4337, 1881.7307],
        [ 848.0394, 1883.2101],
        [ 845.4049, 1884.8805]], device='cuda:0')
[2025-01-13 12:57:46,239][train.train_model][ERROR] -   => pi=tensor([[0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3295, 0.3680, 0.3025],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031],
        [0.3299, 0.3670, 0.3031]], device='cuda:0') mu=tensor([[[ 0.0163, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0935,  0.0120]],

        [[ 0.0163, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0935,  0.0120]],

        [[ 0.0163, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0935,  0.0120]],

        [[ 0.0163, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0935,  0.0120]],

        [[ 0.0163, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0935,  0.0120]],

        [[ 0.0163, -0.0171],
         [ 0.0308, -0.0058],
         [ 0.0935,  0.0120]],

        [[-0.0126,  0.0191],
         [ 0.0105,  0.0009],
         [ 0.0891,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0105,  0.0009],
         [ 0.0891,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0105,  0.0009],
         [ 0.0891,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0105,  0.0009],
         [ 0.0891,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0105,  0.0009],
         [ 0.0891,  0.0075]],

        [[-0.0126,  0.0191],
         [ 0.0105,  0.0009],
         [ 0.0891,  0.0075]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0523, -0.1522],
         [-0.0327, -0.2042],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2042],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2042],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2042],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2042],
         [ 0.0558,  0.0288]],

        [[ 0.0523, -0.1522],
         [-0.0327, -0.2042],
         [ 0.0558,  0.0288]],

        [[ 0.0804, -0.1522],
         [-0.0280, -0.2141],
         [ 0.0495,  0.0369]],

        [[ 0.0804, -0.1522],
         [-0.0280, -0.2141],
         [ 0.0495,  0.0369]],

        [[ 0.0804, -0.1522],
         [-0.0280, -0.2141],
         [ 0.0495,  0.0369]],

        [[ 0.0804, -0.1522],
         [-0.0280, -0.2141],
         [ 0.0495,  0.0369]],

        [[ 0.0804, -0.1522],
         [-0.0280, -0.2141],
         [ 0.0495,  0.0369]],

        [[ 0.0804, -0.1522],
         [-0.0280, -0.2141],
         [ 0.0495,  0.0369]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:57:46,241][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 12:57:46,243][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 12:57:46,273][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 12:57:46,273][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 12:57:46,274][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 12:57:46,275][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 12:57:46,307][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=1
[2025-01-13 12:57:46,309][train.train_model][ERROR] -   => agent_in=tensor([[ 3.9609e+02,  1.1474e+03, -1.2863e-04,  8.5636e-05],
        [ 3.9609e+02,  1.1474e+03, -1.0998e-04,  7.4718e-05],
        [ 3.9609e+02,  1.1474e+03, -8.6321e-05,  8.2352e-05],
        [ 3.9609e+02,  1.1474e+03, -1.1263e-04, -1.2039e-05],
        [ 3.9609e+02,  1.1474e+03, -8.9997e-05,  4.4610e-06],
        [ 3.9609e+02,  1.1474e+03, -5.2940e-05,  5.6597e-05]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[ 396.0914, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0913, 1147.3600],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0912, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0911, 1147.3601],
        [ 396.0910, 1147.3601],
        [ 396.0910, 1147.3601]], device='cuda:0')
[2025-01-13 12:57:46,313][train.train_model][ERROR] -   => pi=tensor([[0.3320, 0.3671, 0.3008],
        [0.3320, 0.3671, 0.3008],
        [0.3320, 0.3671, 0.3008],
        [0.3320, 0.3671, 0.3008],
        [0.3320, 0.3671, 0.3008],
        [0.3320, 0.3671, 0.3008],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005],
        [0.3325, 0.3670, 0.3005]], device='cuda:0') mu=tensor([[[ 0.0028, -0.0324],
         [ 0.0211, -0.0114],
         [ 0.0985,  0.0161]],

        [[ 0.0028, -0.0324],
         [ 0.0211, -0.0114],
         [ 0.0985,  0.0161]],

        [[ 0.0028, -0.0324],
         [ 0.0211, -0.0114],
         [ 0.0985,  0.0161]],

        [[ 0.0028, -0.0324],
         [ 0.0211, -0.0114],
         [ 0.0985,  0.0161]],

        [[ 0.0028, -0.0324],
         [ 0.0211, -0.0114],
         [ 0.0985,  0.0161]],

        [[ 0.0028, -0.0324],
         [ 0.0211, -0.0114],
         [ 0.0985,  0.0161]],

        [[-0.0221,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0980,  0.0052]],

        [[-0.0221,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0980,  0.0052]],

        [[-0.0221,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0980,  0.0052]],

        [[-0.0221,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0980,  0.0052]],

        [[-0.0221,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0980,  0.0052]],

        [[-0.0221,  0.0055],
         [-0.0030, -0.0009],
         [ 0.0980,  0.0052]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0421, -0.1581],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0229]],

        [[ 0.0421, -0.1581],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0229]],

        [[ 0.0421, -0.1581],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0229]],

        [[ 0.0421, -0.1581],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0229]],

        [[ 0.0421, -0.1581],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0229]],

        [[ 0.0421, -0.1581],
         [-0.0386, -0.1876],
         [ 0.0311,  0.0229]],

        [[ 0.0650, -0.1560],
         [-0.0332, -0.2006],
         [ 0.0311,  0.0334]],

        [[ 0.0650, -0.1560],
         [-0.0332, -0.2006],
         [ 0.0311,  0.0334]],

        [[ 0.0650, -0.1560],
         [-0.0332, -0.2006],
         [ 0.0311,  0.0334]],

        [[ 0.0650, -0.1560],
         [-0.0332, -0.2006],
         [ 0.0311,  0.0334]],

        [[ 0.0650, -0.1560],
         [-0.0332, -0.2006],
         [ 0.0311,  0.0334]],

        [[ 0.0650, -0.1560],
         [-0.0332, -0.2006],
         [ 0.0311,  0.0334]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:57:46,314][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 12:57:46,316][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 12:57:46,343][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 12:57:46,343][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 12:57:46,344][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 12:57:46,345][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 12:57:46,368][train.train_model][ERROR] - [Validation Step] NaN/Inf in val_loss at batch_idx=2
[2025-01-13 12:57:46,370][train.train_model][ERROR] -   => agent_in=tensor([[ 1.2170e+03,  2.7927e+03, -8.0835e-01,  6.7101e-01],
        [ 1.2166e+03,  2.7931e+03, -5.6761e-01,  4.6959e-01],
        [ 1.2163e+03,  2.7933e+03, -1.6878e-01,  1.3934e-01],
        [ 1.2162e+03,  2.7934e+03,  3.6582e-02, -2.6921e-02],
        [ 1.2162e+03,  2.7934e+03,  7.5744e-03, -3.5029e-03],
        [ 1.2162e+03,  2.7934e+03,  1.0428e-03,  1.4729e-03]], device='cuda:0') lane_in=tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0') traj_pts=tensor([[1216.9841, 2792.7312],
        [1216.5796, 2793.0671],
        [1216.2955, 2793.3020],
        [1216.2112, 2793.3716],
        [1216.2294, 2793.3582],
        [1216.2332, 2793.3564],
        [1216.2338, 2793.3572],
        [1216.2341, 2793.3579],
        [1216.2346, 2793.3584],
        [1216.2350, 2793.3589],
        [1216.1223, 2793.4521],
        [1215.7076, 2793.7937]], device='cuda:0')
[2025-01-13 12:57:46,374][train.train_model][ERROR] -   => pi=tensor([[0.3309, 0.3679, 0.3012],
        [0.3309, 0.3679, 0.3012],
        [0.3309, 0.3679, 0.3012],
        [0.3309, 0.3679, 0.3012],
        [0.3309, 0.3679, 0.3012],
        [0.3309, 0.3679, 0.3012],
        [0.3313, 0.3671, 0.3016],
        [0.3313, 0.3671, 0.3016],
        [0.3313, 0.3671, 0.3016],
        [0.3313, 0.3671, 0.3016],
        [0.3313, 0.3671, 0.3016],
        [0.3313, 0.3671, 0.3016]], device='cuda:0') mu=tensor([[[ 0.0154, -0.0189],
         [ 0.0281, -0.0101],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0189],
         [ 0.0281, -0.0101],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0189],
         [ 0.0281, -0.0101],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0189],
         [ 0.0281, -0.0101],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0189],
         [ 0.0281, -0.0101],
         [ 0.0916,  0.0154]],

        [[ 0.0154, -0.0189],
         [ 0.0281, -0.0101],
         [ 0.0916,  0.0154]],

        [[-0.0113,  0.0164],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0164],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0164],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0164],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0164],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]],

        [[-0.0113,  0.0164],
         [ 0.0084, -0.0038],
         [ 0.0869,  0.0107]]], device='cuda:0', dtype=torch.float16) b=tensor([[[ 0.0593, -0.1493],
         [-0.0347, -0.1993],
         [ 0.0548,  0.0295]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1993],
         [ 0.0548,  0.0295]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1993],
         [ 0.0548,  0.0295]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1993],
         [ 0.0548,  0.0295]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1993],
         [ 0.0548,  0.0295]],

        [[ 0.0593, -0.1493],
         [-0.0347, -0.1993],
         [ 0.0548,  0.0295]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2089],
         [ 0.0490,  0.0379]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2089],
         [ 0.0490,  0.0379]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2089],
         [ 0.0490,  0.0379]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2089],
         [ 0.0490,  0.0379]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2089],
         [ 0.0490,  0.0379]],

        [[ 0.0861, -0.1489],
         [-0.0297, -0.2089],
         [ 0.0490,  0.0379]]], device='cuda:0', dtype=torch.float16)
[2025-01-13 12:57:46,375][train.train_model][WARNING] - No valid samples found in validation.
[2025-01-13 13:00:09,876][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 13:00:09,876][train.train_model][INFO] - Final Config:
[2025-01-13 13:00:09,878][train.train_model][INFO] - train:
  lr: 0.0001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 13:00:46,277][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 13:00:46,277][train.train_model][INFO] - Final Config:
[2025-01-13 13:00:46,279][train.train_model][INFO] - train:
  lr: 0.0001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 13:01:17,423][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 13:01:50,117][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 13:01:50,140][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 13:02:00,007][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:00,097][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:00,174][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:00,210][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:00,210][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:00,221][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:00,247][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:00,249][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:00,280][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:00,281][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:00,281][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:00,282][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:00,315][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=1116.941162109375
[2025-01-13 13:02:03,516][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:03,525][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:03,614][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:03,620][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:03,621][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:03,623][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:03,735][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:03,737][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:03,771][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:03,772][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:03,772][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:03,774][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:03,871][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:03,873][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:03,905][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:03,906][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:03,906][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:03,907][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:04,006][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:04,008][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:04,040][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:04,041][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:04,041][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:04,042][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:05,963][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:05,968][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:06,011][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:06,012][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:06,012][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:06,013][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:06,105][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:06,107][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:06,138][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:06,138][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:06,138][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:06,140][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:06,238][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:06,240][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:06,270][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:06,271][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:06,271][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:06,273][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:06,371][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:06,373][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:06,403][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:06,404][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:06,404][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:06,406][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:08,377][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:08,379][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:08,410][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:08,411][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:08,411][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:08,412][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:08,511][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:08,513][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:08,543][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:08,544][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:08,544][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:08,545][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:08,644][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 13:02:08,646][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 13:02:08,680][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 13:02:08,680][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 13:02:08,681][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 13:02:08,682][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 13:02:12,195][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:12,199][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:12,234][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:12,235][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:12,235][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:12,236][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:12,268][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:12,270][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:12,301][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:12,301][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:12,302][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:12,303][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:12,336][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 13:02:12,338][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 13:02:12,365][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 13:02:12,365][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 13:02:12,366][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 13:02:12,367][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 13:02:12,392][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=0.059070467948913574
[2025-01-13 13:02:40,553][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:40,562][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:02:40,650][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:02:40,651][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:02:40,651][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:02:40,654][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:02:40,751][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:02:40,754][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:03:30,122][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 13:03:30,122][train.train_model][INFO] - Final Config:
[2025-01-13 13:03:30,124][train.train_model][INFO] - train:
  lr: 0.0001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 16
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 13:04:01,236][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 13:04:33,276][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 13:04:33,298][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 13:04:43,137][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:43,227][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:43,307][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:43,343][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:43,343][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:43,355][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:43,381][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:43,383][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:43,414][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:43,414][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:43,415][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:43,416][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:43,449][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=1236.689697265625
[2025-01-13 13:04:46,642][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:46,646][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:46,724][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:46,731][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:46,731][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:46,733][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:46,846][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:46,848][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:46,882][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:46,883][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:46,883][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:46,885][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:46,978][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:46,981][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:47,013][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:47,013][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:47,013][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:47,015][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:47,110][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:47,112][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:47,145][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:47,145][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:47,145][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:47,147][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:49,094][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:49,096][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:49,127][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:49,128][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:49,128][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:49,129][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:49,230][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:49,232][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:49,264][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:49,264][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:49,264][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:49,266][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:49,363][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:49,365][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:49,396][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:49,396][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:49,396][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:49,398][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:49,494][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:49,496][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:49,529][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:49,529][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:49,530][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:49,531][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:51,507][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:51,512][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:51,559][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:51,560][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:51,560][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:51,561][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:51,649][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:51,651][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:51,685][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:51,685][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:51,686][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:51,687][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:51,781][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 13:04:51,783][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 13:04:51,815][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 13:04:51,815][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 13:04:51,815][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 13:04:51,817][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 13:04:55,371][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:55,378][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:55,423][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:55,423][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:55,423][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:55,425][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:55,450][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:04:55,452][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:04:55,482][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:04:55,483][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:04:55,483][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:04:55,485][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:04:55,517][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 13:04:55,519][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 13:04:55,547][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 13:04:55,547][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 13:04:55,548][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 13:04:55,549][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 13:04:55,571][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=0.03386392444372177
[2025-01-13 13:05:27,397][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:05:27,405][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:05:27,485][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:05:27,486][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:05:27,486][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:05:27,489][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:05:27,588][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:05:27,590][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:25:56,189][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 13:25:56,189][train.train_model][INFO] - Final Config:
[2025-01-13 13:25:56,192][train.train_model][INFO] - train:
  lr: 0.0001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 4
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 13:26:27,586][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 13:27:00,296][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 13:27:00,319][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 13:27:10,349][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:10,437][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:10,519][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:10,555][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:10,555][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:10,560][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:10,589][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:10,591][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:10,621][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:10,622][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:10,622][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:10,623][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:10,657][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=1234.864013671875
[2025-01-13 13:27:13,939][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:13,944][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:14,019][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:14,025][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:14,026][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:14,028][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:14,143][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:14,145][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:14,178][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:14,178][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:14,179][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:14,181][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:14,279][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:14,281][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:14,313][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:14,313][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:14,313][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:14,315][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:14,414][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:14,416][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:14,448][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:14,448][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:14,448][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:14,450][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:16,434][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:16,437][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:16,473][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:16,473][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:16,474][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:16,475][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:16,571][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:16,573][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:16,605][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:16,606][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:16,606][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:16,607][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:16,705][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:16,707][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:16,739][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:16,740][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:16,740][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:16,741][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:16,842][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:16,844][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:16,876][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:16,877][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:16,877][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:16,878][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:18,932][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:18,935][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:18,966][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:18,967][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:18,967][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:18,968][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:19,067][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:19,069][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:19,100][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:19,100][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:19,101][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:19,102][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:19,414][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 13:27:19,416][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 13:27:19,473][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 13:27:19,473][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 13:27:19,473][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 13:27:19,475][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 13:27:22,851][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:22,857][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:22,902][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:22,903][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:22,903][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:22,904][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:22,932][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:22,934][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:22,964][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:22,965][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:22,965][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:22,967][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:23,000][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 13:27:23,002][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 13:27:23,029][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 13:27:23,030][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 13:27:23,030][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 13:27:23,031][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 13:27:23,057][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=3.166682471800186e-10
[2025-01-13 13:27:54,033][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:54,042][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:27:54,094][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:27:54,095][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:27:54,095][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:27:54,097][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:27:54,216][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:27:54,218][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:41:02,052][train.train_model][INFO] - [train_main] Initializing TrajLLM model...
[2025-01-13 13:41:02,052][train.train_model][INFO] - Final Config:
[2025-01-13 13:41:02,055][train.train_model][INFO] - train:
  lr: 0.0001
  epochs: 10
  weight_decay: 0.01
  batch_size: 64
  gpus: 1
  gradient_clip_val: 0.5
  lr_step: 10
  lr_gamma: 0.1
  k_values:
  - 5
  - 10
  lambda_lane: 1.0
test:
  batch_size: 1
  gpus: 1
  data_root: /home/user/data/kim_bh/Nuscenes
  checkpoint: /path/to/your/checkpoint.ckpt
  output_file: predictions.json
data:
  nuscenes_path: /home/user/data/kim_bh/Nuscenes
  train_split: train
  val_split: val
  test_split: test
wandb:
  project: Traj-LLM
  mode: online
tasks:
  train:
    lr: 0.001
    epochs: 10
    gpus: 1
    batch_size: 16
task: train
modules:
  data:
    nuscenes_path: /home/user/data/kim_bh/Nuscenes
    batch_size: 16
  data_loader:
    num_agents: 6
    num_lanes: 6
    target_length: 12
  sparse_encoder:
    input_dim: 4
    hidden_dim: 128
    output_dim: 128
  high_level_model:
    llm_model_name: meta-llama/Llama-3.2-3B
    input_dim: 128
    output_dim: 3072
    use_lora: true
    lora_rank: 4
  lane_aware_probability:
    input_dim: 3072
    hidden_dim: 128
    num_lanes: 6
  laplace_decoder:
    input_dim: 3108
    output_dim: 2
    num_modes: 3
  fusion:
    num_heads: 4

[2025-01-13 13:41:33,124][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'train' with 680 scenes.
[2025-01-13 13:42:05,027][data.nuscenes_data_loader][INFO] - [NuscenesDatasetFiltered] Creating dataset for 'val' with 170 scenes.
[2025-01-13 13:42:05,049][train.train_model][INFO] - [train_main] Starting trainer.fit()...
[2025-01-13 13:42:14,871][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:14,960][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:15,048][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:15,083][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:15,083][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:15,089][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:15,116][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:15,118][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:15,148][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:15,149][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:15,149][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:15,150][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:15,184][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=1145.0621337890625
[2025-01-13 13:42:18,410][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:18,418][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:18,507][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:18,513][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:18,514][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:18,516][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:18,629][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:18,631][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:18,663][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:18,664][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:18,664][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:18,666][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:18,765][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:18,767][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:18,799][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:18,799][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:18,800][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:18,801][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:18,900][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:18,903][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:18,934][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:18,935][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:18,935][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:18,936][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:20,878][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:20,881][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:20,912][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:20,912][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:20,912][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:20,914][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:21,013][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:21,015][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:21,046][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:21,047][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:21,047][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:21,048][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:21,146][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:21,148][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:21,179][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:21,180][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:21,180][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:21,181][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:21,279][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:21,281][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:21,312][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:21,313][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:21,313][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:21,314][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:23,334][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:23,336][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:23,367][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:23,367][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:23,368][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:23,369][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:23,467][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:23,469][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:23,500][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:23,501][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:23,501][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:23,502][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:23,600][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([40, 6, 4]), lane_inputs shape=torch.Size([40, 6, 4])
[2025-01-13 13:42:23,602][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([40, 6, 128])
[2025-01-13 13:42:23,632][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([40, 12, 3072])
[2025-01-13 13:42:23,633][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([40, 12, 36])
[2025-01-13 13:42:23,633][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([40, 12, 3108])
[2025-01-13 13:42:23,634][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([40, 12, 3]), mu=torch.Size([40, 12, 3, 2]), b=torch.Size([40, 12, 3, 2]), unc=torch.Size([40, 12, 3, 2])
[2025-01-13 13:42:27,206][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:27,213][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:27,255][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:27,256][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:27,256][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:27,257][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:27,287][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:27,288][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:27,319][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:27,319][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:27,320][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:27,321][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:27,355][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([42, 6, 4]), lane_inputs shape=torch.Size([42, 6, 4])
[2025-01-13 13:42:27,357][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([42, 6, 128])
[2025-01-13 13:42:27,386][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([42, 12, 3072])
[2025-01-13 13:42:27,386][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([42, 12, 36])
[2025-01-13 13:42:27,386][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([42, 12, 3108])
[2025-01-13 13:42:27,387][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([42, 12, 3]), mu=torch.Size([42, 12, 3, 2]), b=torch.Size([42, 12, 3, 2]), unc=torch.Size([42, 12, 3, 2])
[2025-01-13 13:42:27,411][train.train_model][INFO] - [TrajLLM] val epoch end => avg_loss=0.4524226784706116
[2025-01-13 13:42:59,085][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:59,093][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
[2025-01-13 13:42:59,172][train.train_model][DEBUG] - [Forward] after high_level_model => torch.Size([64, 12, 3072])
[2025-01-13 13:42:59,173][train.train_model][DEBUG] - [Forward] lane prob shape => torch.Size([64, 12, 36])
[2025-01-13 13:42:59,173][train.train_model][DEBUG] - [Forward] fused_features => torch.Size([64, 12, 3108])
[2025-01-13 13:42:59,175][train.train_model][DEBUG] - [Forward] laplace outputs => pi=torch.Size([64, 12, 3]), mu=torch.Size([64, 12, 3, 2]), b=torch.Size([64, 12, 3, 2]), unc=torch.Size([64, 12, 3, 2])
[2025-01-13 13:42:59,261][train.train_model][DEBUG] - [Forward] agent_inputs shape=torch.Size([64, 6, 4]), lane_inputs shape=torch.Size([64, 6, 4])
[2025-01-13 13:42:59,264][train.train_model][DEBUG] - [Forward] after sparse_encoder => torch.Size([64, 6, 128])
