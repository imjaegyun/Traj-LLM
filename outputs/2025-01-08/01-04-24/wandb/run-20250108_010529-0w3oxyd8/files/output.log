LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]

  | Name                   | Type                         | Params | Mode
--------------------------------------------------------------------------------
0 | sparse_encoder         | SparseContextEncoder         | 231 K  | train
1 | mamba_layer            | MambaLayer                   | 330 K  | train
2 | high_level_model       | HighLevelInteractionModel    | 1.2 M  | train
3 | lane_probability_model | LaneAwareProbabilityLearning | 347 K  | train
4 | laplace_decoder        | MultimodalLaplaceDecoder     | 516    | train
--------------------------------------------------------------------------------
2.1 M     Trainable params
0         Non-trainable params
2.1 M     Total params
8.515     Total estimated model params size (MB)
90        Modules in train mode
0         Modules in eval mode
Sanity Checking DataLoader 0:   0%|                                                                                                                                                                       | 0/2 [00:00<?, ?it/s]Sparse features shape: torch.Size([16, 15, 128])
Input to MambaLayer: torch.Size([16, 15, 128])
Passing through MambaBlock 0
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 0: torch.Size([16, 15, 128])
Passing through MambaBlock 1
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 1: torch.Size([16, 15, 128])
Passing through MambaBlock 2
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 2: torch.Size([16, 15, 128])
Passing through MambaBlock 3
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 3: torch.Size([16, 15, 128])
Mamba features shape: torch.Size([16, 15, 128])
High-level features shape: torch.Size([16, 15, 128])
Lane features before MambaLayer: torch.Size([16, 15, 128])
Input to MambaLayer: torch.Size([16, 15, 128])
Passing through MambaBlock 0
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 0: torch.Size([16, 15, 128])
Passing through MambaBlock 1
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 1: torch.Size([16, 15, 128])
Passing through MambaBlock 2
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 2: torch.Size([16, 15, 128])
Passing through MambaBlock 3
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 3: torch.Size([16, 15, 128])
Lane features after MambaLayer: torch.Size([16, 15, 128])
Lane features after flattening: torch.Size([240, 128])
Lane features after linear_in: torch.Size([240, 128])
Lane features reshaped back: torch.Size([16, 15, 128])
Lane probabilities shape: torch.Size([16, 15, 6])
Lane probabilities shape: torch.Size([16, 15, 6])
Mu shape: torch.Size([16, 15, 2]), B shape: torch.Size([16, 15, 2])
Lane probabilities shape: torch.Size([16, 15, 6])
Lane labels shape: torch.Size([16])
Reshaped lane probabilities shape: torch.Size([240, 6])
Reshaped lane labels shape: torch.Size([240])
Sanity Checking DataLoader 0:  50%|███████████████████████████████████████████████████████████████████████████████▌                                                                               | 1/2 [00:00<00:00,  6.73it/s]Sparse features shape: torch.Size([16, 15, 128])
Input to MambaLayer: torch.Size([16, 15, 128])
Passing through MambaBlock 0
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 0: torch.Size([16, 15, 128])
Passing through MambaBlock 1
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 1: torch.Size([16, 15, 128])
Passing through MambaBlock 2
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 2: torch.Size([16, 15, 128])
Passing through MambaBlock 3
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 3: torch.Size([16, 15, 128])
Mamba features shape: torch.Size([16, 15, 128])
High-level features shape: torch.Size([16, 15, 128])
Lane features before MambaLayer: torch.Size([16, 15, 128])
Input to MambaLayer: torch.Size([16, 15, 128])
Passing through MambaBlock 0
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 0: torch.Size([16, 15, 128])
Passing through MambaBlock 1
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 1: torch.Size([16, 15, 128])
Passing through MambaBlock 2
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 2: torch.Size([16, 15, 128])
Passing through MambaBlock 3
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 3: torch.Size([16, 15, 128])
Lane features after MambaLayer: torch.Size([16, 15, 128])
Lane features after flattening: torch.Size([240, 128])
Lane features after linear_in: torch.Size([240, 128])
Lane features reshaped back: torch.Size([16, 15, 128])
Lane probabilities shape: torch.Size([16, 15, 6])
Lane probabilities shape: torch.Size([16, 15, 6])
Mu shape: torch.Size([16, 15, 2]), B shape: torch.Size([16, 15, 2])
Lane probabilities shape: torch.Size([16, 15, 6])
Lane labels shape: torch.Size([16])
Reshaped lane probabilities shape: torch.Size([240, 6])
Reshaped lane labels shape: torch.Size([240])
Epoch 0:   0%|                                                                                                                                                                                           | 0/43 [00:00<?, ?it/s]Sparse features shape: torch.Size([16, 15, 128])
/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/fit_loop.py:310: The number of training batches (43) is smaller than the logging interval Trainer(log_every_n_steps=50). Set a lower value for log_every_n_steps if you want to see logs for the training epoch.
Input to MambaLayer: torch.Size([16, 15, 128])
Passing through MambaBlock 0
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 0: torch.Size([16, 15, 128])
Passing through MambaBlock 1
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 1: torch.Size([16, 15, 128])
Passing through MambaBlock 2
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 2: torch.Size([16, 15, 128])
Passing through MambaBlock 3
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 3: torch.Size([16, 15, 128])
Mamba features shape: torch.Size([16, 15, 128])
High-level features shape: torch.Size([16, 15, 128])
Lane features before MambaLayer: torch.Size([16, 15, 128])
Input to MambaLayer: torch.Size([16, 15, 128])
Passing through MambaBlock 0
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 0: torch.Size([16, 15, 128])
Passing through MambaBlock 1
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 1: torch.Size([16, 15, 128])
Passing through MambaBlock 2
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 2: torch.Size([16, 15, 128])
Passing through MambaBlock 3
Input shape before processing: torch.Size([16, 15, 128])
Shape after linear_in: torch.Size([16, 15, 128])
Shape after Conv1D: torch.Size([16, 128, 15])
Shape after linear_out: torch.Size([16, 15, 128])
Output shape after residual and LayerNorm: torch.Size([16, 15, 128])
Output shape after MambaBlock 3: torch.Size([16, 15, 128])
Lane features after MambaLayer: torch.Size([16, 15, 128])
Lane features after flattening: torch.Size([240, 128])
Lane features after linear_in: torch.Size([240, 128])
Lane features reshaped back: torch.Size([16, 15, 128])
Lane probabilities shape: torch.Size([16, 15, 6])
Lane probabilities shape: torch.Size([16, 15, 6])
Mu shape: torch.Size([16, 15, 2]), B shape: torch.Size([16, 15, 2])
Error executing job with overrides: ['+task=train']
Traceback (most recent call last):
  File "/home/user/Traj-LLM/imjaegyun/Traj-LLM/train.py", line 26, in <module>
    main()
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/_internal/utils.py", line 223, in run_and_report
    raise ex
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 132, in run
    _ = ret.return_value
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/core/utils.py", line 260, in return_value
    raise self._return_value
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/user/Traj-LLM/imjaegyun/Traj-LLM/train.py", line 15, in main
    train_main(config)  # train_main에 DictConfig 전달
  File "/home/user/Traj-LLM/imjaegyun/Traj-LLM/train/train_model.py", line 183, in train_main
    trainer.fit(model, train_loader, val_loader)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 539, in fit
    call._call_and_handle_interrupt(
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/trainer/call.py", line 47, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 575, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 982, in _run
    results = self._run_stage()
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 1026, in _run_stage
    self.fit_loop.run()
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/fit_loop.py", line 216, in run
    self.advance()
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/fit_loop.py", line 455, in advance
    self.epoch_loop.run(self._data_fetcher)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/training_epoch_loop.py", line 150, in run
    self.advance(data_fetcher)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/training_epoch_loop.py", line 320, in advance
    batch_output = self.automatic_optimization.run(trainer.optimizers[0], batch_idx, kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/optimization/automatic.py", line 192, in run
    self._optimizer_step(batch_idx, closure)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/optimization/automatic.py", line 270, in _optimizer_step
    call._call_lightning_module_hook(
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/trainer/call.py", line 171, in _call_lightning_module_hook
    output = fn(*args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/core/module.py", line 1302, in optimizer_step
    optimizer.step(closure=optimizer_closure)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/core/optimizer.py", line 154, in step
    step_output = self._strategy.optimizer_step(self._optimizer, closure, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/strategies/strategy.py", line 239, in optimizer_step
    return self.precision_plugin.optimizer_step(optimizer, model=model, closure=closure, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/plugins/precision/precision.py", line 123, in optimizer_step
    return optimizer.step(closure=closure, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/torch/optim/optimizer.py", line 373, in wrapper
    out = func(*args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/torch/optim/adam.py", line 143, in step
    loss = closure()
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/plugins/precision/precision.py", line 109, in _wrap_closure
    closure_result = closure()
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/optimization/automatic.py", line 146, in __call__
    self._result = self.closure(*args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/optimization/automatic.py", line 131, in closure
    step_output = self._step_fn()
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/loops/optimization/automatic.py", line 319, in _training_step
    training_step_output = call._call_strategy_hook(trainer, "training_step", *kwargs.values())
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/trainer/call.py", line 323, in _call_strategy_hook
    output = fn(*args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/pytorch_lightning/strategies/strategy.py", line 391, in training_step
    return self.lightning_module.training_step(*args, **kwargs)
  File "/home/user/Traj-LLM/imjaegyun/Traj-LLM/train/train_model.py", line 98, in training_step
    lane_loss = nn.CrossEntropyLoss()(lane_probabilities, lane_labels)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/torch/nn/modules/loss.py", line 1179, in forward
    return F.cross_entropy(input, target, weight=self.weight,
  File "/home/user/anaconda3/envs/im_jg/lib/python3.9/site-packages/torch/nn/functional.py", line 3053, in cross_entropy
    return torch._C._nn.cross_entropy_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index, label_smoothing)
RuntimeError: Expected target size [16, 6], got [16]
